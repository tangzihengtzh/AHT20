
IIC_K.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a02c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee4  0800a140  0800a140  0001a140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c024  0800c024  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c024  0800c024  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c024  0800c024  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c024  0800c024  0001c024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c028  0800c028  0001c028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  200001e0  0800c20c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800c20c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107b8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e8  00000000  00000000  000309c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ea  00000000  00000000  00034e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013440  00000000  00000000  0004e04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2cf  00000000  00000000  0006148a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000589c  00000000  00000000  000ef7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a124 	.word	0x0800a124

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a124 	.word	0x0800a124

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <AHT20INIT>:

#include "aht20.h"
#define AHT20_ADDRESS 0x70

void AHT20INIT()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
	uint8_t readbuffer;
	HAL_Delay(40);
 80011d2:	2028      	movs	r0, #40	; 0x28
 80011d4:	f001 fcb8 	bl	8002b48 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readbuffer, 1, HAL_MAX_DELAY);
 80011d8:	1dfa      	adds	r2, r7, #7
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2170      	movs	r1, #112	; 0x70
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <AHT20INIT+0x28>)
 80011e6:	f002 f995 	bl	8003514 <HAL_I2C_Master_Receive>
	if(readbuffer & 0x08 == 0x00)
	{
		uint8_t sendbffer[3]={0xBE,0x08,0x00};
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbffer, 3, HAL_MAX_DELAY);
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001fc 	.word	0x200001fc

080011f8 <AHT20READ>:

void AHT20READ(float *tem,float *hum)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	uint8_t sendbffer[3]={0xAC,0x33,0x00};
 8001202:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <AHT20READ+0xe8>)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	4611      	mov	r1, r2
 800120c:	8019      	strh	r1, [r3, #0]
 800120e:	3302      	adds	r3, #2
 8001210:	0c12      	lsrs	r2, r2, #16
 8001212:	701a      	strb	r2, [r3, #0]
	uint8_t readbuffer[6];

	HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbffer, 3, HAL_MAX_DELAY);
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2303      	movs	r3, #3
 8001220:	2170      	movs	r1, #112	; 0x70
 8001222:	4830      	ldr	r0, [pc, #192]	; (80012e4 <AHT20READ+0xec>)
 8001224:	f002 f878 	bl	8003318 <HAL_I2C_Master_Transmit>
	HAL_Delay(75);
 8001228:	204b      	movs	r0, #75	; 0x4b
 800122a:	f001 fc8d 	bl	8002b48 <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readbuffer, 6, HAL_MAX_DELAY);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2306      	movs	r3, #6
 800123a:	2170      	movs	r1, #112	; 0x70
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <AHT20READ+0xec>)
 800123e:	f002 f969 	bl	8003514 <HAL_I2C_Master_Receive>

	if( (readbuffer[0] & 0x80) == 0x00)
 8001242:	7a3b      	ldrb	r3, [r7, #8]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	db40      	blt.n	80012cc <AHT20READ+0xd4>
	{
		uint32_t data=0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
		data=((uint32_t)readbuffer[3]>>4) +
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
				((uint32_t)readbuffer[2]<<4) +
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	011b      	lsls	r3, r3, #4
		data=((uint32_t)readbuffer[3]>>4) +
 800125a:	441a      	add	r2, r3
				((uint32_t)readbuffer[1]<<12);
 800125c:	7a7b      	ldrb	r3, [r7, #9]
 800125e:	031b      	lsls	r3, r3, #12
		data=((uint32_t)readbuffer[3]>>4) +
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
		*hum = data*100.0f/(1<<20);
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff fd35 	bl	8000cd4 <__aeabi_ui2f>
 800126a:	4603      	mov	r3, r0
 800126c:	491e      	ldr	r1, [pc, #120]	; (80012e8 <AHT20READ+0xf0>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd88 	bl	8000d84 <__aeabi_fmul>
 8001274:	4603      	mov	r3, r0
 8001276:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe36 	bl	8000eec <__aeabi_fdiv>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	601a      	str	r2, [r3, #0]
		data=((uint32_t)(readbuffer[3] & 0x0F)<<16) +
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
						((uint32_t)readbuffer[4]<<8) +
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	021b      	lsls	r3, r3, #8
		data=((uint32_t)(readbuffer[3] & 0x0F)<<16) +
 8001294:	4413      	add	r3, r2
						((uint32_t)readbuffer[5]);
 8001296:	7b7a      	ldrb	r2, [r7, #13]
		data=((uint32_t)(readbuffer[3] & 0x0F)<<16) +
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
		*tem=data*200.0f/(1<<20)-50;
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f7ff fd19 	bl	8000cd4 <__aeabi_ui2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4911      	ldr	r1, [pc, #68]	; (80012ec <AHT20READ+0xf4>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd6c 	bl	8000d84 <__aeabi_fmul>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe1a 	bl	8000eec <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <AHT20READ+0xf8>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fc57 	bl	8000b70 <__aeabi_fsub>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
	else
	{
		*hum=-1;
		*tem=-1;
	}
}
 80012ca:	e005      	b.n	80012d8 <AHT20READ+0xe0>
		*hum=-1;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <AHT20READ+0xfc>)
 80012d0:	601a      	str	r2, [r3, #0]
		*tem=-1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <AHT20READ+0xfc>)
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	0800a140 	.word	0x0800a140
 80012e4:	200001fc 	.word	0x200001fc
 80012e8:	42c80000 	.word	0x42c80000
 80012ec:	43480000 	.word	0x43480000
 80012f0:	42480000 	.word	0x42480000
 80012f4:	bf800000 	.word	0xbf800000

080012f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_GPIO_Init+0x68>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_GPIO_Init+0x68>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_GPIO_Init+0x68>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_GPIO_Init+0x68>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <MX_GPIO_Init+0x68>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_GPIO_Init+0x68>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800133c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0x6c>)
 8001352:	f001 fd01 	bl	8002d58 <HAL_GPIO_Init>

}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40010c00 	.word	0x40010c00

08001368 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f001 fe73 	bl	8003090 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 fe23 	bl	8001ffa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001fc 	.word	0x200001fc
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_I2C_MspInit+0x70>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d123      	bne.n	800142c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_I2C_MspInit+0x74>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_I2C_MspInit+0x74>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_I2C_MspInit+0x74>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <HAL_I2C_MspInit+0x78>)
 8001410:	f001 fca2 	bl	8002d58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_I2C_MspInit+0x74>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_I2C_MspInit+0x74>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_I2C_MspInit+0x74>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40021000 	.word	0x40021000
 800143c:	40010c00 	.word	0x40010c00

08001440 <mapTemperatureToColor>:
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void mapTemperatureToColor(float temperature,int *color[3]) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    //int color[3];
	int minval=0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
    if (temperature <= 25) {
 800144e:	4954      	ldr	r1, [pc, #336]	; (80015a0 <mapTemperatureToColor+0x160>)
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fe3f 	bl	80010d4 <__aeabi_fcmple>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00b      	beq.n	8001474 <mapTemperatureToColor+0x34>
        color[0] = minval;    // Red
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
        color[1] = minval;    // Green
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3304      	adds	r3, #4
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]
        color[2] = 255;  // Blue
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3308      	adds	r3, #8
 800146e:	22ff      	movs	r2, #255	; 0xff
 8001470:	601a      	str	r2, [r3, #0]
//    for (int i = 0; i < 3; i++)
//    {
//        color[i] = 20*i;
//    }
//    return color;
}
 8001472:	e090      	b.n	8001596 <mapTemperatureToColor+0x156>
        if (temperature >= 25 && temperature <= 27.5)
 8001474:	494a      	ldr	r1, [pc, #296]	; (80015a0 <mapTemperatureToColor+0x160>)
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe36 	bl	80010e8 <__aeabi_fcmpge>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <mapTemperatureToColor+0xa4>
 8001482:	4948      	ldr	r1, [pc, #288]	; (80015a4 <mapTemperatureToColor+0x164>)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe25 	bl	80010d4 <__aeabi_fcmple>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d029      	beq.n	80014e4 <mapTemperatureToColor+0xa4>
            color[0] = minval;  // Red
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	601a      	str	r2, [r3, #0]
            color[1] = minval + (int)((temperature - 25) * 102);    // Green
 8001496:	4942      	ldr	r1, [pc, #264]	; (80015a0 <mapTemperatureToColor+0x160>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fb69 	bl	8000b70 <__aeabi_fsub>
 800149e:	4603      	mov	r3, r0
 80014a0:	4941      	ldr	r1, [pc, #260]	; (80015a8 <mapTemperatureToColor+0x168>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fc6e 	bl	8000d84 <__aeabi_fmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe30 	bl	8001110 <__aeabi_f2iz>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	441a      	add	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3304      	adds	r3, #4
 80014ba:	601a      	str	r2, [r3, #0]
            color[2] = 255 - (int)((temperature - 25) * 102);    // Blue
 80014bc:	4938      	ldr	r1, [pc, #224]	; (80015a0 <mapTemperatureToColor+0x160>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fb56 	bl	8000b70 <__aeabi_fsub>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4938      	ldr	r1, [pc, #224]	; (80015a8 <mapTemperatureToColor+0x168>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc5b 	bl	8000d84 <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe1d 	bl	8001110 <__aeabi_f2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3308      	adds	r3, #8
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e058      	b.n	8001596 <mapTemperatureToColor+0x156>
            if (temperature >= 27.5 && temperature <= 30)
 80014e4:	492f      	ldr	r1, [pc, #188]	; (80015a4 <mapTemperatureToColor+0x164>)
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fdfe 	bl	80010e8 <__aeabi_fcmpge>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d045      	beq.n	800157e <mapTemperatureToColor+0x13e>
 80014f2:	492e      	ldr	r1, [pc, #184]	; (80015ac <mapTemperatureToColor+0x16c>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fded 	bl	80010d4 <__aeabi_fcmple>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03e      	beq.n	800157e <mapTemperatureToColor+0x13e>
                color[0] = minval + (int)((temperature - 27.5) * 102);    // Red
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7fe ff91 	bl	8000428 <__aeabi_f2d>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <mapTemperatureToColor+0x170>)
 800150c:	f7fe fe2c 	bl	8000168 <__aeabi_dsub>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <mapTemperatureToColor+0x174>)
 800151e:	f7fe ffdb 	bl	80004d8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fa85 	bl	8000a38 <__aeabi_d2iz>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	461a      	mov	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]
                color[1] = 255 - (int)((temperature - 27.5) * 102);    // Green
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7fe ff74 	bl	8000428 <__aeabi_f2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <mapTemperatureToColor+0x170>)
 8001546:	f7fe fe0f 	bl	8000168 <__aeabi_dsub>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <mapTemperatureToColor+0x174>)
 8001558:	f7fe ffbe 	bl	80004d8 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fa68 	bl	8000a38 <__aeabi_d2iz>
 8001568:	4603      	mov	r3, r0
 800156a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3304      	adds	r3, #4
 8001572:	601a      	str	r2, [r3, #0]
                color[2] = minval;  // Blue
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3308      	adds	r3, #8
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e00b      	b.n	8001596 <mapTemperatureToColor+0x156>
                color[0] = 255;    // Red
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	22ff      	movs	r2, #255	; 0xff
 8001582:	601a      	str	r2, [r3, #0]
                color[1] = minval;    // Green
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3304      	adds	r3, #4
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]
                color[2] = minval;  // Blue
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3308      	adds	r3, #8
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	e7ff      	b.n	8001596 <mapTemperatureToColor+0x156>
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	41c80000 	.word	0x41c80000
 80015a4:	41dc0000 	.word	0x41dc0000
 80015a8:	42cc0000 	.word	0x42cc0000
 80015ac:	41f00000 	.word	0x41f00000
 80015b0:	403b8000 	.word	0x403b8000
 80015b4:	40598000 	.word	0x40598000

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	f5ad 4d82 	sub.w	sp, sp, #16640	; 0x4100
 80015be:	b09c      	sub	sp, #112	; 0x70
 80015c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f001 fa5f 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 fcdd 	bl	8001f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f7ff fe95 	bl	80012f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015ce:	f7ff fecb 	bl	8001368 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015d2:	f001 f9bd 	bl	8002950 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80015d6:	f001 f8c5 	bl	8002764 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015da:	2100      	movs	r1, #0
 80015dc:	4859      	ldr	r0, [pc, #356]	; (8001744 <main+0x18c>)
 80015de:	f003 fa43 	bl	8004a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015e2:	2104      	movs	r1, #4
 80015e4:	4857      	ldr	r0, [pc, #348]	; (8001744 <main+0x18c>)
 80015e6:	f003 fa3f 	bl	8004a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015ea:	2108      	movs	r1, #8
 80015ec:	4855      	ldr	r0, [pc, #340]	; (8001744 <main+0x18c>)
 80015ee:	f003 fa3b 	bl	8004a68 <HAL_TIM_PWM_Start>
  AHT20INIT();
 80015f2:	f7ff fdeb 	bl	80011cc <AHT20INIT>
  OLED_Init();
 80015f6:	f000 fddf 	bl	80021b8 <OLED_Init>
  OLED_ColorTurn(0);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fd26 	bl	800204c <OLED_ColorTurn>
  OLED_DisplayTurn(0);
 8001600:	2000      	movs	r0, #0
 8001602:	f000 fd3a 	bl	800207a <OLED_DisplayTurn>
  char msg[50];
  char demsg[50];
  char msg1[11];
  char msg2[11];

  int i=0,j=0;
 8001606:	2300      	movs	r3, #0
 8001608:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800160c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001618:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800161c:	6013      	str	r3, [r2, #0]
  int idx=0;
 800161e:	2300      	movs	r3, #0
 8001620:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001624:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001628:	6013      	str	r3, [r2, #0]
  float init1,init2;
  float sum1=0;
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001632:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001636:	6013      	str	r3, [r2, #0]
  float sum2=0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001640:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8001644:	6013      	str	r3, [r2, #0]
  AHT20READ(&init1,&init2);
 8001646:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800164a:	f102 0210 	add.w	r2, r2, #16
 800164e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001652:	f103 0314 	add.w	r3, r3, #20
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fdcd 	bl	80011f8 <AHT20READ>
  int dataline[128][32];
  for(i=0;i<128;i++)
 800165e:	2300      	movs	r3, #0
 8001660:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001664:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e036      	b.n	80016da <main+0x122>
  {
	  for(j=0;j<32;j++)
 800166c:	2300      	movs	r3, #0
 800166e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001672:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e01d      	b.n	80016b6 <main+0xfe>
	  {
		  dataline[i][j]=0;
 800167a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800167e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001682:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001686:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	0151      	lsls	r1, r2, #5
 800168e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001692:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	440a      	add	r2, r1
 800169a:	2100      	movs	r1, #0
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(j=0;j<32;j++)
 80016a0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80016a4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80016b0:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80016ba:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b1f      	cmp	r3, #31
 80016c2:	ddda      	ble.n	800167a <main+0xc2>
  for(i=0;i<128;i++)
 80016c4:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80016c8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80016d4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80016de:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b7f      	cmp	r3, #127	; 0x7f
 80016e6:	ddc1      	ble.n	800166c <main+0xb4>
  }
//  for(i=0;i<128;i++)
//  {
//		  dataline[i][16]=1;
//  }
  for(i=0;i<32;i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80016ee:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e018      	b.n	8001728 <main+0x170>
  {
		  dataline[126][i]=1;
 80016f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80016fa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80016fe:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001702:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 800170c:	2101      	movs	r1, #1
 800170e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0;i<32;i++)
 8001712:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001716:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001722:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800172c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b1f      	cmp	r3, #31
 8001734:	dddf      	ble.n	80016f6 <main+0x13e>
  }
  for(i=0;i<20;i++)
 8001736:	2300      	movs	r3, #0
 8001738:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800173c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e034      	b.n	80017ae <main+0x1f6>
 8001744:	200006d4 	.word	0x200006d4
  {
	  temlist[i]=init1;
 8001748:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800174c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001750:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800175a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001766:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800176a:	443b      	add	r3, r7
 800176c:	f843 2c80 	str.w	r2, [r3, #-128]
	  humlist[i]=init2;
 8001770:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001774:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001778:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001782:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800178e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001792:	443b      	add	r3, r7
 8001794:	f843 2cd0 	str.w	r2, [r3, #-208]
  for(i=0;i<20;i++)
 8001798:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800179c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80017a8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80017b2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b13      	cmp	r3, #19
 80017ba:	ddc5      	ble.n	8001748 <main+0x190>
  }
  int ro=0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80017c2:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80017c6:	6013      	str	r3, [r2, #0]
  int rl=0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80017ce:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80017d2:	6013      	str	r3, [r2, #0]
  int color[3]={0,0,0};
 80017d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  int curdata=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80017fe:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001802:	6013      	str	r3, [r2, #0]
  int xloop=126;
 8001804:	237e      	movs	r3, #126	; 0x7e
 8001806:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800180a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800180e:	6013      	str	r3, [r2, #0]
  float st=27.15;
 8001810:	4bc3      	ldr	r3, [pc, #780]	; (8001b20 <main+0x568>)
 8001812:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001816:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800181a:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart2, "begin", 5, 200);
	  AHT20INIT();
 800181c:	f7ff fcd6 	bl	80011cc <AHT20INIT>
//	  OLED_Init();
//	  OLED_ColorTurn(0);
//	  OLED_DisplayTurn(0);
	  AHT20READ(&tem,&hum);
 8001820:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001824:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001828:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800182c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fce0 	bl	80011f8 <AHT20READ>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==0)
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	48b9      	ldr	r0, [pc, #740]	; (8001b24 <main+0x56c>)
 800183e:	f001 fc0f 	bl	8003060 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d119      	bne.n	800187c <main+0x2c4>
	  {
		  ro=(ro+1)%2;
 8001848:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800184c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	bfb8      	it	lt
 800185c:	425b      	neglt	r3, r3
 800185e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001862:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8001866:	6013      	str	r3, [r2, #0]
		  OLED_DisplayTurn(ro);
 8001868:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800186c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f000 fc02 	bl	800207a <OLED_DisplayTurn>
		  HAL_Delay(50);
 8001876:	2032      	movs	r0, #50	; 0x32
 8001878:	f001 f966 	bl	8002b48 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==0)
 800187c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001880:	48a8      	ldr	r0, [pc, #672]	; (8001b24 <main+0x56c>)
 8001882:	f001 fbed 	bl	8003060 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d119      	bne.n	80018c0 <main+0x308>
	  {
		  rl=(rl+1)%2;
 800188c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001890:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	bfb8      	it	lt
 80018a0:	425b      	neglt	r3, r3
 80018a2:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80018a6:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80018aa:	6013      	str	r3, [r2, #0]
		  OLED_ColorTurn(rl);
 80018ac:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80018b0:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f000 fbc9 	bl	800204c <OLED_ColorTurn>
		  HAL_Delay(50);
 80018ba:	2032      	movs	r0, #50	; 0x32
 80018bc:	f001 f944 	bl	8002b48 <HAL_Delay>
	  }
	  temlist[idx]=tem;
 80018c0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80018c4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80018ce:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80018da:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80018de:	443b      	add	r3, r7
 80018e0:	f843 2c80 	str.w	r2, [r3, #-128]
	  humlist[idx]=hum;
 80018e4:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80018e8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80018f2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80018fe:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001902:	443b      	add	r3, r7
 8001904:	f843 2cd0 	str.w	r2, [r3, #-208]
	  sum1=0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001910:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001914:	6013      	str	r3, [r2, #0]
	  sum2=0;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800191e:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8001922:	6013      	str	r3, [r2, #0]
	  idx=(idx+1)%20;
 8001924:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001928:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4b7d      	ldr	r3, [pc, #500]	; (8001b28 <main+0x570>)
 8001932:	fb83 1302 	smull	r1, r3, r3, r2
 8001936:	10d9      	asrs	r1, r3, #3
 8001938:	17d3      	asrs	r3, r2, #31
 800193a:	1ac9      	subs	r1, r1, r3
 800193c:	460b      	mov	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800194a:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800194e:	6013      	str	r3, [r2, #0]
	  for(i=0;i<20;i++)
 8001950:	2300      	movs	r3, #0
 8001952:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001956:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e040      	b.n	80019e0 <main+0x428>
	  {
		  sum1+=temlist[i];
 800195e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001962:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800196e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001972:	443b      	add	r3, r7
 8001974:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001978:	4619      	mov	r1, r3
 800197a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800197e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f7ff f8f6 	bl	8000b74 <__addsf3>
 8001988:	4603      	mov	r3, r0
 800198a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800198e:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001992:	6013      	str	r3, [r2, #0]
		  sum2+=humlist[i];
 8001994:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001998:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80019a4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80019a8:	443b      	add	r3, r7
 80019aa:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80019b4:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f7ff f8db 	bl	8000b74 <__addsf3>
 80019be:	4603      	mov	r3, r0
 80019c0:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80019c4:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80019c8:	6013      	str	r3, [r2, #0]
	  for(i=0;i<20;i++)
 80019ca:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80019ce:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80019da:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80019e4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b13      	cmp	r3, #19
 80019ec:	ddb7      	ble.n	800195e <main+0x3a6>
	  }

	  sprintf(msg,"TEM:%.2fC,HUM:%.2f%%\r\n",(sum1/20)*0.98,(sum2/20)*1.00);
 80019ee:	494f      	ldr	r1, [pc, #316]	; (8001b2c <main+0x574>)
 80019f0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80019f4:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	f7ff fa77 	bl	8000eec <__aeabi_fdiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd11 	bl	8000428 <__aeabi_f2d>
 8001a06:	a344      	add	r3, pc, #272	; (adr r3, 8001b18 <main+0x560>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fd64 	bl	80004d8 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4944      	ldr	r1, [pc, #272]	; (8001b2c <main+0x574>)
 8001a1a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001a1e:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f7ff fa62 	bl	8000eec <__aeabi_fdiv>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fcfc 	bl	8000428 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 8001a38:	f100 0064 	add.w	r0, r0, #100	; 0x64
 8001a3c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a40:	4622      	mov	r2, r4
 8001a42:	462b      	mov	r3, r5
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <main+0x578>)
 8001a46:	f004 fdb1 	bl	80065ac <siprintf>
	  curdata=(int)(
			  8*((sum1/20)-st)
 8001a4a:	4938      	ldr	r1, [pc, #224]	; (8001b2c <main+0x574>)
 8001a4c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001a50:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f7ff fa49 	bl	8000eec <__aeabi_fdiv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001a60:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001a64:	6811      	ldr	r1, [r2, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f882 	bl	8000b70 <__aeabi_fsub>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f986 	bl	8000d84 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
	  curdata=(int)(
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb48 	bl	8001110 <__aeabi_f2iz>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001a86:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001a8a:	6013      	str	r3, [r2, #0]
			  );
	  if(curdata<=-16)
 8001a8c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001a90:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f113 0f0f 	cmn.w	r3, #15
 8001a9a:	da4b      	bge.n	8001b34 <main+0x57c>
	  {
		  curdata=-8;
 8001a9c:	f06f 0307 	mvn.w	r3, #7
 8001aa0:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001aa4:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001aa8:	6013      	str	r3, [r2, #0]
		  st=(sum1/20);
 8001aaa:	4920      	ldr	r1, [pc, #128]	; (8001b2c <main+0x574>)
 8001aac:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001ab0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	f7ff fa19 	bl	8000eec <__aeabi_fdiv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001ac0:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001ac4:	6013      	str	r3, [r2, #0]
		  for(i=0;i<32;i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001acc:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e018      	b.n	8001b06 <main+0x54e>
		  {
			  dataline[126][i]=1;
 8001ad4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ad8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001adc:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001ae0:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 8001aea:	2101      	movs	r1, #1
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  for(i=0;i<32;i++)
 8001af0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001af4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001b00:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001b0a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dddf      	ble.n	8001ad4 <main+0x51c>
 8001b14:	e082      	b.n	8001c1c <main+0x664>
 8001b16:	bf00      	nop
 8001b18:	f5c28f5c 	.word	0xf5c28f5c
 8001b1c:	3fef5c28 	.word	0x3fef5c28
 8001b20:	41d93333 	.word	0x41d93333
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	66666667 	.word	0x66666667
 8001b2c:	41a00000 	.word	0x41a00000
 8001b30:	0800a144 	.word	0x0800a144
		  }
	  }
	  else
	  {
		  if(curdata>=15)
 8001b34:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001b38:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b0e      	cmp	r3, #14
 8001b40:	dd35      	ble.n	8001bae <main+0x5f6>
		  {
			  st=(sum1/20);
 8001b42:	49af      	ldr	r1, [pc, #700]	; (8001e00 <main+0x848>)
 8001b44:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001b48:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	f7ff f9cd 	bl	8000eec <__aeabi_fdiv>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001b58:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001b5c:	6013      	str	r3, [r2, #0]
			  for(i=0;i<32;i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001b64:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e018      	b.n	8001b9e <main+0x5e6>
			  {
				  dataline[126][i]=1;
 8001b6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b70:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b74:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001b78:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 8001b82:	2101      	movs	r1, #1
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  for(i=0;i<32;i++)
 8001b88:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001b8c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001b98:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001ba2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b1f      	cmp	r3, #31
 8001baa:	dddf      	ble.n	8001b6c <main+0x5b4>
 8001bac:	e036      	b.n	8001c1c <main+0x664>
			  }
		  }
		  else
		  {
			  for(i=0;i<32;i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001bb4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e018      	b.n	8001bee <main+0x636>
			  {
				  dataline[127][i]=0;
 8001bbc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bc0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bc4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001bc8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	f502 627e 	add.w	r2, r2, #4064	; 0xfe0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  for(i=0;i<32;i++)
 8001bd8:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001bdc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001be8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001bf2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b1f      	cmp	r3, #31
 8001bfa:	dddf      	ble.n	8001bbc <main+0x604>
			  }
			  dataline[127][curdata+16]=1;
 8001bfc:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001c00:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f103 0210 	add.w	r2, r3, #16
 8001c0a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c0e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c12:	f502 627e 	add.w	r2, r2, #4064	; 0xfe0
 8001c16:	2101      	movs	r1, #1
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  }
	  }
	  //xloop=(xloop+1)%128;

	  for(i=1;i<128;i++)
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001c22:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e048      	b.n	8001cbc <main+0x704>
	  {
		  for(j=0;j<32;j++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001c30:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e02f      	b.n	8001c98 <main+0x6e0>
		  {
			  dataline[i-1][j]=dataline[i][j];
 8001c38:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001c3c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c48:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c4c:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8001c50:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001c54:	6809      	ldr	r1, [r1, #0]
 8001c56:	0148      	lsls	r0, r1, #5
 8001c58:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8001c5c:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001c60:	6809      	ldr	r1, [r1, #0]
 8001c62:	4401      	add	r1, r0
 8001c64:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001c68:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c70:	0150      	lsls	r0, r2, #5
 8001c72:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001c76:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4402      	add	r2, r0
 8001c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  for(j=0;j<32;j++)
 8001c82:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001c86:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001c92:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001c9c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b1f      	cmp	r3, #31
 8001ca4:	ddc8      	ble.n	8001c38 <main+0x680>
	  for(i=1;i<128;i++)
 8001ca6:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001caa:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001cb6:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001cc0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc8:	ddaf      	ble.n	8001c2a <main+0x672>
//		  }
//	  }

	  //*color = mapTemperatureToColor((sum1/20)*0.98);
	  mapTemperatureToColor(
			  (sum1/20)*0.98,
 8001cca:	494d      	ldr	r1, [pc, #308]	; (8001e00 <main+0x848>)
 8001ccc:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001cd0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f7ff f909 	bl	8000eec <__aeabi_fdiv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fba3 	bl	8000428 <__aeabi_f2d>
 8001ce2:	a341      	add	r3, pc, #260	; (adr r3, 8001de8 <main+0x830>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fbf6 	bl	80004d8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
	  mapTemperatureToColor(
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fee8 	bl	8000ac8 <__aeabi_d2f>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cfe:	3b64      	subs	r3, #100	; 0x64
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff fb9c 	bl	8001440 <mapTemperatureToColor>
			  &color
	  );
	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, color[0]*0.6);
 8001d08:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb76 	bl	8000404 <__aeabi_i2d>
 8001d18:	a335      	add	r3, pc, #212	; (adr r3, 8001df0 <main+0x838>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fbdb 	bl	80004d8 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4937      	ldr	r1, [pc, #220]	; (8001e04 <main+0x84c>)
 8001d28:	680c      	ldr	r4, [r1, #0]
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe feab 	bl	8000a88 <__aeabi_d2uiz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	63e3      	str	r3, [r4, #60]	; 0x3c
	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, color[1]*1.0);
 8001d36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d3a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fb5f 	bl	8000404 <__aeabi_i2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	492e      	ldr	r1, [pc, #184]	; (8001e04 <main+0x84c>)
 8001d4c:	680c      	ldr	r4, [r1, #0]
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe fe99 	bl	8000a88 <__aeabi_d2uiz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	63a3      	str	r3, [r4, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, color[2]*0.8);
 8001d5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d5e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb4d 	bl	8000404 <__aeabi_i2d>
 8001d6a:	a323      	add	r3, pc, #140	; (adr r3, 8001df8 <main+0x840>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fbb2 	bl	80004d8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4922      	ldr	r1, [pc, #136]	; (8001e04 <main+0x84c>)
 8001d7a:	680c      	ldr	r4, [r1, #0]
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe82 	bl	8000a88 <__aeabi_d2uiz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	6363      	str	r3, [r4, #52]	; 0x34

	  sprintf(demsg,"%d,%d,%d%\r\n--",
 8001d88:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d96:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001da0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 8001daa:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	4915      	ldr	r1, [pc, #84]	; (8001e08 <main+0x850>)
 8001db4:	f004 fbfa 	bl	80065ac <siprintf>
			  color[0],
			  color[1],
			  color[2]);
	  HAL_UART_Transmit(&huart2, demsg, strlen(demsg), 200);
 8001db8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001dbc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe f9c5 	bl	8000150 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8001dce:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001dd2:	23c8      	movs	r3, #200	; 0xc8
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <main+0x854>)
 8001dd6:	f003 fbc5 	bl	8005564 <HAL_UART_Transmit>
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 200);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);


	  for(i=0;i<10;i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001de0:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e054      	b.n	8001e92 <main+0x8da>
 8001de8:	f5c28f5c 	.word	0xf5c28f5c
 8001dec:	3fef5c28 	.word	0x3fef5c28
 8001df0:	33333333 	.word	0x33333333
 8001df4:	3fe33333 	.word	0x3fe33333
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fe99999 	.word	0x3fe99999
 8001e00:	41a00000 	.word	0x41a00000
 8001e04:	200006d4 	.word	0x200006d4
 8001e08:	0800a15c 	.word	0x0800a15c
 8001e0c:	2000071c 	.word	0x2000071c
	  {
		  msg1[i]=msg[i];
 8001e10:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e14:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001e18:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001e1c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e20:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	7819      	ldrb	r1, [r3, #0]
 8001e2a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e2e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001e32:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8001e36:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e3a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	460a      	mov	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
		  msg2[i]=msg[i+11];
 8001e46:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e4a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330b      	adds	r3, #11
 8001e52:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001e56:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001e5a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001e5e:	5cd1      	ldrb	r1, [r2, r3]
 8001e60:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e64:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001e68:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001e6c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e70:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	460a      	mov	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
	  for(i=0;i<10;i++)
 8001e7c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e80:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001e8c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001e96:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	ddb7      	ble.n	8001e10 <main+0x858>
	  }
	  msg1[10]='\0';
 8001ea0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001ea4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001ea8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eac:	2200      	movs	r2, #0
 8001eae:	729a      	strb	r2, [r3, #10]
	  msg2[10]='\0';
 8001eb0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001eb4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001eb8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	729a      	strb	r2, [r3, #10]

	  //HAL_UART_Transmit(&huart2, msg1, strlen(msg1), 200);
	  //HAL_UART_Transmit(&huart2, msg2, strlen(msg2), 200);
	  OLED_ShowString(8, 44, msg1, 16, 1);
 8001ec0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001ec4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2310      	movs	r3, #16
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	2008      	movs	r0, #8
 8001ed2:	f000 fb05 	bl	80024e0 <OLED_ShowString>
	  //OLED_ShowString(8, 44, msg2, 16, 1);
	  for(i=0;i<128;i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001edc:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e045      	b.n	8001f70 <main+0x9b8>
	  {
		  for(j=0;j<32;j++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001eea:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e02c      	b.n	8001f4c <main+0x994>
		  {
			  OLED_DrawPoint(i,32-j,dataline[i][j]);
 8001ef2:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001ef6:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1c3 0020 	rsb	r0, r3, #32
 8001f00:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f04:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f08:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001f0c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	0151      	lsls	r1, r2, #5
 8001f14:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001f18:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	440a      	add	r2, r1
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4601      	mov	r1, r0
 8001f28:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001f2c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f000 f9b1 	bl	8002298 <OLED_DrawPoint>
		  for(j=0;j<32;j++)
 8001f36:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001f3a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001f46:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001f50:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b1f      	cmp	r3, #31
 8001f58:	ddcb      	ble.n	8001ef2 <main+0x93a>
	  for(i=0;i<128;i++)
 8001f5a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001f5e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001f6a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001f74:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f7c:	ddb2      	ble.n	8001ee4 <main+0x92c>
		  }
	  }
	  OLED_Refresh();
 8001f7e:	f000 f89b 	bl	80020b8 <OLED_Refresh>
  {
 8001f82:	e44b      	b.n	800181c <main+0x264>

08001f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b090      	sub	sp, #64	; 0x40
 8001f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	2228      	movs	r2, #40	; 0x28
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fc90 	bl	80058b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f89c 	bl	80040f8 <HAL_RCC_OscConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001fc6:	f000 f818 	bl	8001ffa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fca:	230f      	movs	r3, #15
 8001fcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fb0a 	bl	80045fc <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fee:	f000 f804 	bl	8001ffa <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3740      	adds	r7, #64	; 0x40
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffe:	b672      	cpsid	i
}
 8002000:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002002:	e7fe      	b.n	8002002 <Error_Handler+0x8>

08002004 <OLED_WR_Byte>:

uint8_t OLED_GRAM[144][8];

//发送一个字节
//mode:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(uint8_t data, uint8_t mode) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	4603      	mov	r3, r0
 800200c:	460a      	mov	r2, r1
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	4613      	mov	r3, r2
 8002012:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[2] = { 0 };
 8002014:	2300      	movs	r3, #0
 8002016:	81bb      	strh	r3, [r7, #12]
	if (mode)
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <OLED_WR_Byte+0x20>
		send_buf[0] = 0x40;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	733b      	strb	r3, [r7, #12]
 8002022:	e001      	b.n	8002028 <OLED_WR_Byte+0x24>
	else
		send_buf[0] = 0x00;
 8002024:	2300      	movs	r3, #0
 8002026:	733b      	strb	r3, [r7, #12]
	send_buf[1] = data;
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, send_buf, 2, 1);
 800202c:	f107 020c 	add.w	r2, r7, #12
 8002030:	2301      	movs	r3, #1
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2302      	movs	r3, #2
 8002036:	217a      	movs	r1, #122	; 0x7a
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <OLED_WR_Byte+0x44>)
 800203a:	f001 f96d 	bl	8003318 <HAL_I2C_Master_Transmit>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200001fc 	.word	0x200001fc

0800204c <OLED_ColorTurn>:

//反显函数
void OLED_ColorTurn(uint8_t i) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	if (i == 0) {
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <OLED_ColorTurn+0x18>
		OLED_WR_Byte(0xA6, OLED_CMD); //正常显示
 800205c:	2100      	movs	r1, #0
 800205e:	20a6      	movs	r0, #166	; 0xa6
 8002060:	f7ff ffd0 	bl	8002004 <OLED_WR_Byte>
	}
	if (i == 1) {
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d103      	bne.n	8002072 <OLED_ColorTurn+0x26>
		OLED_WR_Byte(0xA7, OLED_CMD); //反色显示
 800206a:	2100      	movs	r1, #0
 800206c:	20a7      	movs	r0, #167	; 0xa7
 800206e:	f7ff ffc9 	bl	8002004 <OLED_WR_Byte>
	}
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <OLED_DisplayTurn>:

//屏幕旋转180度
void OLED_DisplayTurn(uint8_t i) {
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
	if (i == 0) {
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <OLED_DisplayTurn+0x20>
		OLED_WR_Byte(0xC8, OLED_CMD); //正常显示
 800208a:	2100      	movs	r1, #0
 800208c:	20c8      	movs	r0, #200	; 0xc8
 800208e:	f7ff ffb9 	bl	8002004 <OLED_WR_Byte>
		OLED_WR_Byte(0xA1, OLED_CMD);
 8002092:	2100      	movs	r1, #0
 8002094:	20a1      	movs	r0, #161	; 0xa1
 8002096:	f7ff ffb5 	bl	8002004 <OLED_WR_Byte>
	}
	if (i == 1) {
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <OLED_DisplayTurn+0x36>
		OLED_WR_Byte(0xC0, OLED_CMD); //反转显示
 80020a0:	2100      	movs	r1, #0
 80020a2:	20c0      	movs	r0, #192	; 0xc0
 80020a4:	f7ff ffae 	bl	8002004 <OLED_WR_Byte>
		OLED_WR_Byte(0xA0, OLED_CMD);
 80020a8:	2100      	movs	r1, #0
 80020aa:	20a0      	movs	r0, #160	; 0xa0
 80020ac:	f7ff ffaa 	bl	8002004 <OLED_WR_Byte>
	}
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <OLED_Refresh>:
	OLED_WR_Byte(0x10, OLED_CMD); //关闭电荷泵
	OLED_WR_Byte(0xAE, OLED_CMD); //关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0a4      	sub	sp, #144	; 0x90
 80020bc:	af02      	add	r7, sp, #8
	uint8_t i, n;
	uint8_t send_buf[129] = { 0 };
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	227d      	movs	r2, #125	; 0x7d
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fbf4 	bl	80058b8 <memset>
	for (i = 0; i < 8; i++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80020d6:	e03b      	b.n	8002150 <OLED_Refresh+0x98>
		OLED_WR_Byte(0xb0 + i, OLED_CMD); //设置行起始地址
 80020d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020dc:	3b50      	subs	r3, #80	; 0x50
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff8e 	bl	8002004 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);   //设置低列起始地址
 80020e8:	2100      	movs	r1, #0
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7ff ff8a 	bl	8002004 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);   //设置高列起始地址
 80020f0:	2100      	movs	r1, #0
 80020f2:	2010      	movs	r0, #16
 80020f4:	f7ff ff86 	bl	8002004 <OLED_WR_Byte>
		send_buf[0] = 0x40;
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	713b      	strb	r3, [r7, #4]
		for (n = 0; n < 128; n++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002102:	e014      	b.n	800212e <OLED_Refresh+0x76>
			send_buf[n + 1] = OLED_GRAM[n][i];
 8002104:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002108:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800210c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002110:	3301      	adds	r3, #1
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <OLED_Refresh+0xac>)
 8002114:	00c9      	lsls	r1, r1, #3
 8002116:	4401      	add	r1, r0
 8002118:	440a      	add	r2, r1
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	3388      	adds	r3, #136	; 0x88
 800211e:	443b      	add	r3, r7
 8002120:	f803 2c84 	strb.w	r2, [r3, #-132]
		for (n = 0; n < 128; n++) {
 8002124:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002128:	3301      	adds	r3, #1
 800212a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800212e:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 8002132:	2b00      	cmp	r3, #0
 8002134:	dae6      	bge.n	8002104 <OLED_Refresh+0x4c>
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, send_buf, 129, 20);
 8002136:	1d3a      	adds	r2, r7, #4
 8002138:	2314      	movs	r3, #20
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2381      	movs	r3, #129	; 0x81
 800213e:	217a      	movs	r1, #122	; 0x7a
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <OLED_Refresh+0xb0>)
 8002142:	f001 f8e9 	bl	8003318 <HAL_I2C_Master_Transmit>
	for (i = 0; i < 8; i++) {
 8002146:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800214a:	3301      	adds	r3, #1
 800214c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002150:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002154:	2b07      	cmp	r3, #7
 8002156:	d9bf      	bls.n	80020d8 <OLED_Refresh+0x20>
	}
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3788      	adds	r7, #136	; 0x88
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000250 	.word	0x20000250
 8002168:	200001fc 	.word	0x200001fc

0800216c <OLED_Clear>:

//清屏函数
void OLED_Clear(void) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e014      	b.n	80021a2 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++) {
 8002178:	2300      	movs	r3, #0
 800217a:	71bb      	strb	r3, [r7, #6]
 800217c:	e00a      	b.n	8002194 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0;   //清除所有数据
 800217e:	79ba      	ldrb	r2, [r7, #6]
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	490c      	ldr	r1, [pc, #48]	; (80021b4 <OLED_Clear+0x48>)
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	440a      	add	r2, r1
 8002188:	4413      	add	r3, r2
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++) {
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	3301      	adds	r3, #1
 8002192:	71bb      	strb	r3, [r7, #6]
 8002194:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002198:	2b00      	cmp	r3, #0
 800219a:	daf0      	bge.n	800217e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++) {
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3301      	adds	r3, #1
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d9e7      	bls.n	8002178 <OLED_Clear+0xc>
		}
	}
//	OLED_Refresh();   //更新显示
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000250 	.word	0x20000250

080021b8 <OLED_Init>:

//OLED的初始化
void OLED_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0xAE, OLED_CMD); /*display off*/
 80021bc:	2100      	movs	r1, #0
 80021be:	20ae      	movs	r0, #174	; 0xae
 80021c0:	f7ff ff20 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); /*set lower column address*/
 80021c4:	2100      	movs	r1, #0
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff ff1c 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); /*set higher column address*/
 80021cc:	2100      	movs	r1, #0
 80021ce:	2010      	movs	r0, #16
 80021d0:	f7ff ff18 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); /*set display start line*/
 80021d4:	2100      	movs	r1, #0
 80021d6:	2040      	movs	r0, #64	; 0x40
 80021d8:	f7ff ff14 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0, OLED_CMD); /*set page address*/
 80021dc:	2100      	movs	r1, #0
 80021de:	20b0      	movs	r0, #176	; 0xb0
 80021e0:	f7ff ff10 	bl	8002004 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); /*contract control*/
 80021e4:	2100      	movs	r1, #0
 80021e6:	2081      	movs	r0, #129	; 0x81
 80021e8:	f7ff ff0c 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xcf, OLED_CMD); /*128*/
 80021ec:	2100      	movs	r1, #0
 80021ee:	20cf      	movs	r0, #207	; 0xcf
 80021f0:	f7ff ff08 	bl	8002004 <OLED_WR_Byte>

	OLED_WR_Byte(0xA1, OLED_CMD); /*set segment remap*/
 80021f4:	2100      	movs	r1, #0
 80021f6:	20a1      	movs	r0, #161	; 0xa1
 80021f8:	f7ff ff04 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); /*normal / reverse*/
 80021fc:	2100      	movs	r1, #0
 80021fe:	20a6      	movs	r0, #166	; 0xa6
 8002200:	f7ff ff00 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); /*multiplex ratio*/
 8002204:	2100      	movs	r1, #0
 8002206:	20a8      	movs	r0, #168	; 0xa8
 8002208:	f7ff fefc 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F, OLED_CMD); /*duty = 1/64*/
 800220c:	2100      	movs	r1, #0
 800220e:	203f      	movs	r0, #63	; 0x3f
 8002210:	f7ff fef8 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xad, OLED_CMD); /*set charge pump enable*/
 8002214:	2100      	movs	r1, #0
 8002216:	20ad      	movs	r0, #173	; 0xad
 8002218:	f7ff fef4 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x8b, OLED_CMD); /* 0x8B 内供 VCC */
 800221c:	2100      	movs	r1, #0
 800221e:	208b      	movs	r0, #139	; 0x8b
 8002220:	f7ff fef0 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x33, OLED_CMD); /*0X30---0X33 set VPP 9V */
 8002224:	2100      	movs	r1, #0
 8002226:	2033      	movs	r0, #51	; 0x33
 8002228:	f7ff feec 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); /*Com scan direction*/
 800222c:	2100      	movs	r1, #0
 800222e:	20c8      	movs	r0, #200	; 0xc8
 8002230:	f7ff fee8 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); /*set display offset*/
 8002234:	2100      	movs	r1, #0
 8002236:	20d3      	movs	r0, #211	; 0xd3
 8002238:	f7ff fee4 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); /* 0x20 */
 800223c:	2100      	movs	r1, #0
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fee0 	bl	8002004 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); /*set osc division*/
 8002244:	2100      	movs	r1, #0
 8002246:	20d5      	movs	r0, #213	; 0xd5
 8002248:	f7ff fedc 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD);
 800224c:	2100      	movs	r1, #0
 800224e:	2080      	movs	r0, #128	; 0x80
 8002250:	f7ff fed8 	bl	8002004 <OLED_WR_Byte>

	OLED_WR_Byte(0xD9, OLED_CMD); /*set pre-charge period*/
 8002254:	2100      	movs	r1, #0
 8002256:	20d9      	movs	r0, #217	; 0xd9
 8002258:	f7ff fed4 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f, OLED_CMD); /*0x22*/
 800225c:	2100      	movs	r1, #0
 800225e:	201f      	movs	r0, #31
 8002260:	f7ff fed0 	bl	8002004 <OLED_WR_Byte>

	OLED_WR_Byte(0xDA, OLED_CMD); /*set COM pins*/
 8002264:	2100      	movs	r1, #0
 8002266:	20da      	movs	r0, #218	; 0xda
 8002268:	f7ff fecc 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800226c:	2100      	movs	r1, #0
 800226e:	2012      	movs	r0, #18
 8002270:	f7ff fec8 	bl	8002004 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xdb, OLED_CMD); /*set vcomh*/
 8002274:	2100      	movs	r1, #0
 8002276:	20db      	movs	r0, #219	; 0xdb
 8002278:	f7ff fec4 	bl	8002004 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD);
 800227c:	2100      	movs	r1, #0
 800227e:	2040      	movs	r0, #64	; 0x40
 8002280:	f7ff fec0 	bl	8002004 <OLED_WR_Byte>

	OLED_Clear();
 8002284:	f7ff ff72 	bl	800216c <OLED_Clear>
	OLED_Refresh();
 8002288:	f7ff ff16 	bl	80020b8 <OLED_Refresh>
	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 800228c:	2100      	movs	r1, #0
 800228e:	20af      	movs	r0, #175	; 0xaf
 8002290:	f7ff feb8 	bl	8002004 <OLED_WR_Byte>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <OLED_DrawPoint>:

//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	460b      	mov	r3, r1
 80022a4:	71bb      	strb	r3, [r7, #6]
 80022a6:	4613      	mov	r3, r2
 80022a8:	717b      	strb	r3, [r7, #5]
	uint8_t i, m, n;
	i = y / 8;
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 80022b8:	7bbb      	ldrb	r3, [r7, #14]
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	737b      	strb	r3, [r7, #13]
	if (t)
 80022c2:	797b      	ldrb	r3, [r7, #5]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <OLED_DrawPoint+0x56>
		OLED_GRAM[x][i] |= n;
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4924      	ldr	r1, [pc, #144]	; (8002360 <OLED_DrawPoint+0xc8>)
 80022ce:	00d2      	lsls	r2, r2, #3
 80022d0:	440a      	add	r2, r1
 80022d2:	4413      	add	r3, r2
 80022d4:	7818      	ldrb	r0, [r3, #0]
 80022d6:	79fa      	ldrb	r2, [r7, #7]
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	7b79      	ldrb	r1, [r7, #13]
 80022dc:	4301      	orrs	r1, r0
 80022de:	b2c8      	uxtb	r0, r1
 80022e0:	491f      	ldr	r1, [pc, #124]	; (8002360 <OLED_DrawPoint+0xc8>)
 80022e2:	00d2      	lsls	r2, r2, #3
 80022e4:	440a      	add	r2, r1
 80022e6:	4413      	add	r3, r2
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
	else {
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
		OLED_GRAM[x][i] |= n;
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
	}
}
 80022ec:	e033      	b.n	8002356 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	491b      	ldr	r1, [pc, #108]	; (8002360 <OLED_DrawPoint+0xc8>)
 80022f4:	00d2      	lsls	r2, r2, #3
 80022f6:	440a      	add	r2, r1
 80022f8:	4413      	add	r3, r2
 80022fa:	7819      	ldrb	r1, [r3, #0]
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	43c9      	mvns	r1, r1
 8002302:	b2c8      	uxtb	r0, r1
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <OLED_DrawPoint+0xc8>)
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	440a      	add	r2, r1
 800230a:	4413      	add	r3, r2
 800230c:	4602      	mov	r2, r0
 800230e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] |= n;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4912      	ldr	r1, [pc, #72]	; (8002360 <OLED_DrawPoint+0xc8>)
 8002316:	00d2      	lsls	r2, r2, #3
 8002318:	440a      	add	r2, r1
 800231a:	4413      	add	r3, r2
 800231c:	7818      	ldrb	r0, [r3, #0]
 800231e:	79fa      	ldrb	r2, [r7, #7]
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	7b79      	ldrb	r1, [r7, #13]
 8002324:	4301      	orrs	r1, r0
 8002326:	b2c8      	uxtb	r0, r1
 8002328:	490d      	ldr	r1, [pc, #52]	; (8002360 <OLED_DrawPoint+0xc8>)
 800232a:	00d2      	lsls	r2, r2, #3
 800232c:	440a      	add	r2, r1
 800232e:	4413      	add	r3, r2
 8002330:	4602      	mov	r2, r0
 8002332:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8002334:	79fa      	ldrb	r2, [r7, #7]
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4909      	ldr	r1, [pc, #36]	; (8002360 <OLED_DrawPoint+0xc8>)
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	440a      	add	r2, r1
 800233e:	4413      	add	r3, r2
 8002340:	7819      	ldrb	r1, [r3, #0]
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	43c9      	mvns	r1, r1
 8002348:	b2c8      	uxtb	r0, r1
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <OLED_DrawPoint+0xc8>)
 800234c:	00d2      	lsls	r2, r2, #3
 800234e:	440a      	add	r2, r1
 8002350:	4413      	add	r3, r2
 8002352:	4602      	mov	r2, r0
 8002354:	701a      	strb	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000250 	.word	0x20000250

08002364 <OLED_ShowChar>:
 * _char: 要显示的字符
 * size1: 字号8(6x8)/12(6x12)/16(8x16)/24(12x24)
 * mode: 0反色显示, 1正常显示
 *
 * */
void OLED_ShowChar(uint8_t x, uint8_t y, char _char, uint8_t size1, uint8_t mode) {
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	4604      	mov	r4, r0
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4623      	mov	r3, r4
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	4603      	mov	r3, r0
 8002378:	71bb      	strb	r3, [r7, #6]
 800237a:	460b      	mov	r3, r1
 800237c:	717b      	strb	r3, [r7, #5]
 800237e:	4613      	mov	r3, r2
 8002380:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t x0 = x, y0 = y;
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	72bb      	strb	r3, [r7, #10]
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	72fb      	strb	r3, [r7, #11]
	if (size1 == 8)
 800238a:	793b      	ldrb	r3, [r7, #4]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d102      	bne.n	8002396 <OLED_ShowChar+0x32>
		size2 = 6;
 8002390:	2306      	movs	r3, #6
 8002392:	733b      	strb	r3, [r7, #12]
 8002394:	e014      	b.n	80023c0 <OLED_ShowChar+0x5c>
	else
		size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); //得到字体一个字符对应点阵集所占的字节数
 8002396:	793b      	ldrb	r3, [r7, #4]
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	793b      	ldrb	r3, [r7, #4]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf14      	ite	ne
 80023aa:	2301      	movne	r3, #1
 80023ac:	2300      	moveq	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	793a      	ldrb	r2, [r7, #4]
 80023b6:	0852      	lsrs	r2, r2, #1
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	733b      	strb	r3, [r7, #12]
	chr1 = _char - ' ';  //计算偏移后的值
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	3b20      	subs	r3, #32
 80023c4:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < size2; i++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e078      	b.n	80024be <OLED_ShowChar+0x15a>
		if (size1 == 8)
 80023cc:	793b      	ldrb	r3, [r7, #4]
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d10b      	bne.n	80023ea <OLED_ShowChar+0x86>
			temp = asc2_0806[chr1][i]; //调用0806字体
 80023d2:	7a7a      	ldrb	r2, [r7, #9]
 80023d4:	7bf9      	ldrb	r1, [r7, #15]
 80023d6:	483e      	ldr	r0, [pc, #248]	; (80024d0 <OLED_ShowChar+0x16c>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4403      	add	r3, r0
 80023e2:	440b      	add	r3, r1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	737b      	strb	r3, [r7, #13]
 80023e8:	e028      	b.n	800243c <OLED_ShowChar+0xd8>
		else if (size1 == 12)
 80023ea:	793b      	ldrb	r3, [r7, #4]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d10b      	bne.n	8002408 <OLED_ShowChar+0xa4>
			temp = asc2_1206[chr1][i]; //调用1206字体
 80023f0:	7a7a      	ldrb	r2, [r7, #9]
 80023f2:	7bf9      	ldrb	r1, [r7, #15]
 80023f4:	4837      	ldr	r0, [pc, #220]	; (80024d4 <OLED_ShowChar+0x170>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4403      	add	r3, r0
 8002400:	440b      	add	r3, r1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	737b      	strb	r3, [r7, #13]
 8002406:	e019      	b.n	800243c <OLED_ShowChar+0xd8>
		else if (size1 == 16)
 8002408:	793b      	ldrb	r3, [r7, #4]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d108      	bne.n	8002420 <OLED_ShowChar+0xbc>
			temp = asc2_1608[chr1][i]; //调用1608字体
 800240e:	7a7a      	ldrb	r2, [r7, #9]
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	4931      	ldr	r1, [pc, #196]	; (80024d8 <OLED_ShowChar+0x174>)
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	440a      	add	r2, r1
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	737b      	strb	r3, [r7, #13]
 800241e:	e00d      	b.n	800243c <OLED_ShowChar+0xd8>
		else if (size1 == 24)
 8002420:	793b      	ldrb	r3, [r7, #4]
 8002422:	2b18      	cmp	r3, #24
 8002424:	d150      	bne.n	80024c8 <OLED_ShowChar+0x164>
			temp = asc2_2412[chr1][i]; //调用2412字体
 8002426:	7a7a      	ldrb	r2, [r7, #9]
 8002428:	7bf9      	ldrb	r1, [r7, #15]
 800242a:	482c      	ldr	r0, [pc, #176]	; (80024dc <OLED_ShowChar+0x178>)
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4403      	add	r3, r0
 8002436:	440b      	add	r3, r1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	737b      	strb	r3, [r7, #13]
		else
			return;
		for (m = 0; m < 8; m++) {
 800243c:	2300      	movs	r3, #0
 800243e:	73bb      	strb	r3, [r7, #14]
 8002440:	e022      	b.n	8002488 <OLED_ShowChar+0x124>
			if (temp & 0x01)
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <OLED_ShowChar+0xf8>
				OLED_DrawPoint(x, y, mode);
 800244c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002450:	79b9      	ldrb	r1, [r7, #6]
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff1f 	bl	8002298 <OLED_DrawPoint>
 800245a:	e00c      	b.n	8002476 <OLED_ShowChar+0x112>
			else
				OLED_DrawPoint(x, y, !mode);
 800245c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	79b9      	ldrb	r1, [r7, #6]
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff11 	bl	8002298 <OLED_DrawPoint>
			temp >>= 1;
 8002476:	7b7b      	ldrb	r3, [r7, #13]
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	737b      	strb	r3, [r7, #13]
			y++;
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	3301      	adds	r3, #1
 8002480:	71bb      	strb	r3, [r7, #6]
		for (m = 0; m < 8; m++) {
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	3301      	adds	r3, #1
 8002486:	73bb      	strb	r3, [r7, #14]
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	2b07      	cmp	r3, #7
 800248c:	d9d9      	bls.n	8002442 <OLED_ShowChar+0xde>
		}
		x++;
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	3301      	adds	r3, #1
 8002492:	71fb      	strb	r3, [r7, #7]
		if ((size1 != 8) && ((x - x0) == size1 / 2)) {
 8002494:	793b      	ldrb	r3, [r7, #4]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d00c      	beq.n	80024b4 <OLED_ShowChar+0x150>
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	7abb      	ldrb	r3, [r7, #10]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	793a      	ldrb	r2, [r7, #4]
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d104      	bne.n	80024b4 <OLED_ShowChar+0x150>
			x = x0;
 80024aa:	7abb      	ldrb	r3, [r7, #10]
 80024ac:	71fb      	strb	r3, [r7, #7]
			y0 = y0 + 8;
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	3308      	adds	r3, #8
 80024b2:	72fb      	strb	r3, [r7, #11]
		}
		y = y0;
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < size2; i++) {
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	3301      	adds	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	7b3b      	ldrb	r3, [r7, #12]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d382      	bcc.n	80023cc <OLED_ShowChar+0x68>
 80024c6:	e000      	b.n	80024ca <OLED_ShowChar+0x166>
			return;
 80024c8:	bf00      	nop
	}
}
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	0800a16c 	.word	0x0800a16c
 80024d4:	0800a394 	.word	0x0800a394
 80024d8:	0800a808 	.word	0x0800a808
 80024dc:	0800adf8 	.word	0x0800adf8

080024e0 <OLED_ShowString>:
 * _string: 要显示的字符串
 * size1: 字号8(6x8)/12(6x12)/16(8x16)/24(12x24)
 * mode: 0反色显示, 1正常显示
 *
 * */
void OLED_ShowString(uint8_t x, uint8_t y, char *_string, uint8_t size1, uint8_t mode) {
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	460b      	mov	r3, r1
 80024f0:	71bb      	strb	r3, [r7, #6]
 80024f2:	4613      	mov	r3, r2
 80024f4:	717b      	strb	r3, [r7, #5]
	while ((*_string >= ' ') && (*_string <= '~')) //判断是不是非法字符!
 80024f6:	e019      	b.n	800252c <OLED_ShowString+0x4c>
	{
		OLED_ShowChar(x, y, *_string, size1, mode);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	797c      	ldrb	r4, [r7, #5]
 80024fe:	79b9      	ldrb	r1, [r7, #6]
 8002500:	79f8      	ldrb	r0, [r7, #7]
 8002502:	7e3b      	ldrb	r3, [r7, #24]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4623      	mov	r3, r4
 8002508:	f7ff ff2c 	bl	8002364 <OLED_ShowChar>
		if (size1 == 8)
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d103      	bne.n	800251a <OLED_ShowString+0x3a>
			x += 6;
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	3306      	adds	r3, #6
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	e005      	b.n	8002526 <OLED_ShowString+0x46>
		else
			x += size1 / 2;
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	4413      	add	r3, r2
 8002524:	71fb      	strb	r3, [r7, #7]
		_string++;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	603b      	str	r3, [r7, #0]
	while ((*_string >= ' ') && (*_string <= '~')) //判断是不是非法字符!
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b1f      	cmp	r3, #31
 8002532:	d903      	bls.n	800253c <OLED_ShowString+0x5c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b7e      	cmp	r3, #126	; 0x7e
 800253a:	d9dd      	bls.n	80024f8 <OLED_ShowString+0x18>
	}
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_MspInit+0x40>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_MspInit+0x40>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_MspInit+0x40>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_MspInit+0x40>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_MspInit+0x40>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_MspInit+0x40>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ce:	f000 fa9f 	bl	8002b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  return 1;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f003 f939 	bl	8005864 <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
  return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002616:	e7fe      	b.n	8002616 <_exit+0x12>

08002618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00a      	b.n	8002640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262a:	f3af 8000 	nop.w
 800262e:	4601      	mov	r1, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf0      	blt.n	800262a <_read+0x12>
  }

  return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e009      	b.n	8002678 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf1      	blt.n	8002664 <_write+0x12>
  }
  return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <_isatty>:

int _isatty(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f003 f8a2 	bl	8005864 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20005000 	.word	0x20005000
 800274c:	00000400 	.word	0x00000400
 8002750:	200006d0 	.word	0x200006d0
 8002754:	20000778 	.word	0x20000778

08002758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <MX_TIM3_Init+0x110>)
 8002796:	4a38      	ldr	r2, [pc, #224]	; (8002878 <MX_TIM3_Init+0x114>)
 8002798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <MX_TIM3_Init+0x110>)
 800279c:	2201      	movs	r2, #1
 800279e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b34      	ldr	r3, [pc, #208]	; (8002874 <MX_TIM3_Init+0x110>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <MX_TIM3_Init+0x110>)
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ac:	4b31      	ldr	r3, [pc, #196]	; (8002874 <MX_TIM3_Init+0x110>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <MX_TIM3_Init+0x110>)
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027b8:	482e      	ldr	r0, [pc, #184]	; (8002874 <MX_TIM3_Init+0x110>)
 80027ba:	f002 f8ad 	bl	8004918 <HAL_TIM_Base_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80027c4:	f7ff fc19 	bl	8001ffa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d2:	4619      	mov	r1, r3
 80027d4:	4827      	ldr	r0, [pc, #156]	; (8002874 <MX_TIM3_Init+0x110>)
 80027d6:	f002 faab 	bl	8004d30 <HAL_TIM_ConfigClockSource>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80027e0:	f7ff fc0b 	bl	8001ffa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027e4:	4823      	ldr	r0, [pc, #140]	; (8002874 <MX_TIM3_Init+0x110>)
 80027e6:	f002 f8e6 	bl	80049b6 <HAL_TIM_PWM_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80027f0:	f7ff fc03 	bl	8001ffa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027fc:	f107 0320 	add.w	r3, r7, #32
 8002800:	4619      	mov	r1, r3
 8002802:	481c      	ldr	r0, [pc, #112]	; (8002874 <MX_TIM3_Init+0x110>)
 8002804:	f002 fe00 	bl	8005408 <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800280e:	f7ff fbf4 	bl	8001ffa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002812:	2360      	movs	r3, #96	; 0x60
 8002814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	4812      	ldr	r0, [pc, #72]	; (8002874 <MX_TIM3_Init+0x110>)
 800282a:	f002 f9bf 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002834:	f7ff fbe1 	bl	8001ffa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2204      	movs	r2, #4
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_TIM3_Init+0x110>)
 8002840:	f002 f9b4 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800284a:	f7ff fbd6 	bl	8001ffa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2208      	movs	r2, #8
 8002852:	4619      	mov	r1, r3
 8002854:	4807      	ldr	r0, [pc, #28]	; (8002874 <MX_TIM3_Init+0x110>)
 8002856:	f002 f9a9 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002860:	f7ff fbcb 	bl	8001ffa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <MX_TIM3_Init+0x110>)
 8002866:	f000 f827 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 800286a:	bf00      	nop
 800286c:	3738      	adds	r7, #56	; 0x38
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200006d4 	.word	0x200006d4
 8002878:	40000400 	.word	0x40000400

0800287c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_TIM_Base_MspInit+0x34>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10b      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_TIM_Base_MspInit+0x38>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_TIM_Base_MspInit+0x38>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_TIM_Base_MspInit+0x38>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <HAL_TIM_MspPostInit+0x88>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d12f      	bne.n	8002938 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_TIM_MspPostInit+0x8c>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2302      	movs	r3, #2
 8002912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4619      	mov	r1, r3
 800291a:	480b      	ldr	r0, [pc, #44]	; (8002948 <HAL_TIM_MspPostInit+0x90>)
 800291c:	f000 fa1c 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002920:	2301      	movs	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2302      	movs	r3, #2
 800292a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4619      	mov	r1, r3
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <HAL_TIM_MspPostInit+0x94>)
 8002934:	f000 fa10 	bl	8002d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40000400 	.word	0x40000400
 8002944:	40021000 	.word	0x40021000
 8002948:	40010800 	.word	0x40010800
 800294c:	40010c00 	.word	0x40010c00

08002950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <MX_USART2_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_USART2_UART_Init+0x4c>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_USART2_UART_Init+0x4c>)
 8002988:	f002 fd9c 	bl	80054c4 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002992:	f7ff fb32 	bl	8001ffa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000071c 	.word	0x2000071c
 80029a0:	40004400 	.word	0x40004400

080029a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_UART_MspInit+0x88>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d12f      	bne.n	8002a24 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029f4:	2304      	movs	r3, #4
 80029f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4619      	mov	r1, r3
 8002a06:	480b      	ldr	r0, [pc, #44]	; (8002a34 <HAL_UART_MspInit+0x90>)
 8002a08:	f000 f9a6 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_UART_MspInit+0x90>)
 8002a20:	f000 f99a 	bl	8002d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010800 	.word	0x40010800

08002a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a38:	f7ff fe8e 	bl	8002758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a3e:	490c      	ldr	r1, [pc, #48]	; (8002a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a54:	4c09      	ldr	r4, [pc, #36]	; (8002a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a62:	f002 ff05 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a66:	f7fe fda7 	bl	80015b8 <main>
  bx lr
 8002a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a74:	0800c02c 	.word	0x0800c02c
  ldr r2, =_sbss
 8002a78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a7c:	20000778 	.word	0x20000778

08002a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC1_2_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_Init+0x28>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_Init+0x28>)
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f000 f92b 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9a:	200f      	movs	r0, #15
 8002a9c:	f000 f808 	bl	8002ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa0:	f7ff fd50 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x54>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_InitTick+0x58>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f935 	bl	8002d3e <HAL_SYSTICK_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00e      	b.n	8002afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d80a      	bhi.n	8002afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f000 f90b 	bl	8002d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <HAL_InitTick+0x5c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000008 	.word	0x20000008
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_IncTick+0x1c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_IncTick+0x20>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <HAL_IncTick+0x20>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000008 	.word	0x20000008
 8002b30:	20000764 	.word	0x20000764

08002b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_GetTick+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	20000764 	.word	0x20000764

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fff0 	bl	8002b34 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffe0 	bl	8002b34 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000008 	.word	0x20000008

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff90 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff49 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff5e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff90 	bl	8002c48 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5f 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffb0 	bl	8002cac <SysTick_Config>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6a:	e169      	b.n	8003040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 8158 	bne.w	800303a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ff8 <HAL_GPIO_Init+0x2a0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d05e      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002d94:	4a98      	ldr	r2, [pc, #608]	; (8002ff8 <HAL_GPIO_Init+0x2a0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d875      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002d9a:	4a98      	ldr	r2, [pc, #608]	; (8002ffc <HAL_GPIO_Init+0x2a4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d058      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002da0:	4a96      	ldr	r2, [pc, #600]	; (8002ffc <HAL_GPIO_Init+0x2a4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d86f      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002da6:	4a96      	ldr	r2, [pc, #600]	; (8003000 <HAL_GPIO_Init+0x2a8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d052      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002dac:	4a94      	ldr	r2, [pc, #592]	; (8003000 <HAL_GPIO_Init+0x2a8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d869      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002db2:	4a94      	ldr	r2, [pc, #592]	; (8003004 <HAL_GPIO_Init+0x2ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04c      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002db8:	4a92      	ldr	r2, [pc, #584]	; (8003004 <HAL_GPIO_Init+0x2ac>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d863      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dbe:	4a92      	ldr	r2, [pc, #584]	; (8003008 <HAL_GPIO_Init+0x2b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d046      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_GPIO_Init+0x2b0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d85d      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d82a      	bhi.n	8002e24 <HAL_GPIO_Init+0xcc>
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	d859      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_GPIO_Init+0x80>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002e53 	.word	0x08002e53
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e3f 	.word	0x08002e3f
 8002de4:	08002e81 	.word	0x08002e81
 8002de8:	08002e87 	.word	0x08002e87
 8002dec:	08002e87 	.word	0x08002e87
 8002df0:	08002e87 	.word	0x08002e87
 8002df4:	08002e87 	.word	0x08002e87
 8002df8:	08002e87 	.word	0x08002e87
 8002dfc:	08002e87 	.word	0x08002e87
 8002e00:	08002e87 	.word	0x08002e87
 8002e04:	08002e87 	.word	0x08002e87
 8002e08:	08002e87 	.word	0x08002e87
 8002e0c:	08002e87 	.word	0x08002e87
 8002e10:	08002e87 	.word	0x08002e87
 8002e14:	08002e87 	.word	0x08002e87
 8002e18:	08002e87 	.word	0x08002e87
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	4a79      	ldr	r2, [pc, #484]	; (800300c <HAL_GPIO_Init+0x2b4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e2a:	e02c      	b.n	8002e86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	623b      	str	r3, [r7, #32]
          break;
 8002e32:	e029      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	623b      	str	r3, [r7, #32]
          break;
 8002e3c:	e024      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	3308      	adds	r3, #8
 8002e44:	623b      	str	r3, [r7, #32]
          break;
 8002e46:	e01f      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e01a      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	623b      	str	r3, [r7, #32]
          break;
 8002e5e:	e013      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	611a      	str	r2, [r3, #16]
          break;
 8002e72:	e009      	b.n	8002e88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e74:	2308      	movs	r3, #8
 8002e76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	615a      	str	r2, [r3, #20]
          break;
 8002e7e:	e003      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e80:	2300      	movs	r3, #0
 8002e82:	623b      	str	r3, [r7, #32]
          break;
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          break;
 8002e86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2bff      	cmp	r3, #255	; 0xff
 8002e8c:	d801      	bhi.n	8002e92 <HAL_GPIO_Init+0x13a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	e001      	b.n	8002e96 <HAL_GPIO_Init+0x13e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_GPIO_Init+0x14c>
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x152>
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	3b08      	subs	r3, #8
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b1 	beq.w	800303a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ef0:	4a48      	ldr	r2, [pc, #288]	; (8003014 <HAL_GPIO_Init+0x2bc>)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_GPIO_Init+0x2c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_GPIO_Init+0x1ec>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3f      	ldr	r2, [pc, #252]	; (800301c <HAL_GPIO_Init+0x2c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00d      	beq.n	8002f40 <HAL_GPIO_Init+0x1e8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3e      	ldr	r2, [pc, #248]	; (8003020 <HAL_GPIO_Init+0x2c8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x1e4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	; (8003024 <HAL_GPIO_Init+0x2cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_GPIO_Init+0x1e0>
 8002f34:	2303      	movs	r3, #3
 8002f36:	e006      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e004      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e002      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f44:	2300      	movs	r3, #0
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	f002 0203 	and.w	r2, r2, #3
 8002f4c:	0092      	lsls	r2, r2, #2
 8002f4e:	4093      	lsls	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f56:	492f      	ldr	r1, [pc, #188]	; (8003014 <HAL_GPIO_Init+0x2bc>)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	492c      	ldr	r1, [pc, #176]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4928      	ldr	r1, [pc, #160]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	491e      	ldr	r1, [pc, #120]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4918      	ldr	r1, [pc, #96]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4914      	ldr	r1, [pc, #80]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d021      	beq.n	800302c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	e021      	b.n	800303a <HAL_GPIO_Init+0x2e2>
 8002ff6:	bf00      	nop
 8002ff8:	10320000 	.word	0x10320000
 8002ffc:	10310000 	.word	0x10310000
 8003000:	10220000 	.word	0x10220000
 8003004:	10210000 	.word	0x10210000
 8003008:	10120000 	.word	0x10120000
 800300c:	10110000 	.word	0x10110000
 8003010:	40021000 	.word	0x40021000
 8003014:	40010000 	.word	0x40010000
 8003018:	40010800 	.word	0x40010800
 800301c:	40010c00 	.word	0x40010c00
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_GPIO_Init+0x304>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	43db      	mvns	r3, r3
 8003034:	4909      	ldr	r1, [pc, #36]	; (800305c <HAL_GPIO_Init+0x304>)
 8003036:	4013      	ands	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	3301      	adds	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	f47f ae8e 	bne.w	8002d6c <HAL_GPIO_Init+0x14>
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	372c      	adds	r7, #44	; 0x2c
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e001      	b.n	8003082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e12b      	b.n	80032fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f984 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f4:	f001 fbca 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a81      	ldr	r2, [pc, #516]	; (8003304 <HAL_I2C_Init+0x274>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d807      	bhi.n	8003114 <HAL_I2C_Init+0x84>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a80      	ldr	r2, [pc, #512]	; (8003308 <HAL_I2C_Init+0x278>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e006      	b.n	8003122 <HAL_I2C_Init+0x92>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a7d      	ldr	r2, [pc, #500]	; (800330c <HAL_I2C_Init+0x27c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	bf94      	ite	ls
 800311c:	2301      	movls	r3, #1
 800311e:	2300      	movhi	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e7      	b.n	80032fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a78      	ldr	r2, [pc, #480]	; (8003310 <HAL_I2C_Init+0x280>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9b      	lsrs	r3, r3, #18
 8003134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a6a      	ldr	r2, [pc, #424]	; (8003304 <HAL_I2C_Init+0x274>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d802      	bhi.n	8003164 <HAL_I2C_Init+0xd4>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3301      	adds	r3, #1
 8003162:	e009      	b.n	8003178 <HAL_I2C_Init+0xe8>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_I2C_Init+0x284>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	3301      	adds	r3, #1
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	495c      	ldr	r1, [pc, #368]	; (8003304 <HAL_I2C_Init+0x274>)
 8003194:	428b      	cmp	r3, r1
 8003196:	d819      	bhi.n	80031cc <HAL_I2C_Init+0x13c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e59      	subs	r1, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ac:	400b      	ands	r3, r1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_I2C_Init+0x138>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e59      	subs	r1, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c6:	e051      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e04f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <HAL_I2C_Init+0x168>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e012      	b.n	800321e <HAL_I2C_Init+0x18e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x196>
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_I2C_Init+0x1dc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10e      	bne.n	800324c <HAL_I2C_Init+0x1bc>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e58      	subs	r0, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	440b      	add	r3, r1
 800323c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324a:	e00f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6911      	ldr	r1, [r2, #16]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	000186a0 	.word	0x000186a0
 8003308:	001e847f 	.word	0x001e847f
 800330c:	003d08ff 	.word	0x003d08ff
 8003310:	431bde83 	.word	0x431bde83
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
 8003328:	4613      	mov	r3, r2
 800332a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff fc02 	bl	8002b34 <HAL_GetTick>
 8003330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 80e0 	bne.w	8003500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	4970      	ldr	r1, [pc, #448]	; (800350c <HAL_I2C_Master_Transmit+0x1f4>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fc9e 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	e0d3      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_I2C_Master_Transmit+0x50>
 8003364:	2302      	movs	r3, #2
 8003366:	e0cc      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d007      	beq.n	800338e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	; 0x21
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2210      	movs	r2, #16
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	893a      	ldrh	r2, [r7, #8]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a50      	ldr	r2, [pc, #320]	; (8003510 <HAL_I2C_Master_Transmit+0x1f8>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d0:	8979      	ldrh	r1, [r7, #10]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fb08 	bl	80039ec <I2C_MasterRequestWrite>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e08d      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033fc:	e066      	b.n	80034cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fd5c 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06b      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11b      	bne.n	80034a0 <HAL_I2C_Master_Transmit+0x188>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d017      	beq.n	80034a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fd53 	bl	8003f50 <I2C_WaitOnBTFFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e01a      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d194      	bne.n	80033fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	00100002 	.word	0x00100002
 8003510:	ffff0000 	.word	0xffff0000

08003514 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff fb02 	bl	8002b34 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	f040 824b 	bne.w	80039d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	497f      	ldr	r1, [pc, #508]	; (8003748 <HAL_I2C_Master_Receive+0x234>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fb9e 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
 8003558:	e23e      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_I2C_Master_Receive+0x54>
 8003564:	2302      	movs	r3, #2
 8003566:	e237      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d007      	beq.n	800358e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2222      	movs	r2, #34	; 0x22
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2210      	movs	r2, #16
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a5f      	ldr	r2, [pc, #380]	; (800374c <HAL_I2C_Master_Receive+0x238>)
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa8a 	bl	8003af0 <I2C_MasterRequestRead>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1f8      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d113      	bne.n	8003616 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e1cc      	b.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b01      	cmp	r3, #1
 800361c:	d11e      	bne.n	800365c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800362e:	b672      	cpsid	i
}
 8003630:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003658:	b662      	cpsie	i
}
 800365a:	e035      	b.n	80036c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b02      	cmp	r3, #2
 8003662:	d11e      	bne.n	80036a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
}
 8003676:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800369e:	b662      	cpsie	i
}
 80036a0:	e012      	b.n	80036c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036c8:	e172      	b.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	f200 811f 	bhi.w	8003912 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d123      	bne.n	8003724 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fc7d 	bl	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e173      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003722:	e145      	b.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b02      	cmp	r3, #2
 800372a:	d152      	bne.n	80037d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	4906      	ldr	r1, [pc, #24]	; (8003750 <HAL_I2C_Master_Receive+0x23c>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 faa8 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e148      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
 8003746:	bf00      	nop
 8003748:	00100002 	.word	0x00100002
 800374c:	ffff0000 	.word	0xffff0000
 8003750:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003754:	b672      	cpsid	i
}
 8003756:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800379a:	b662      	cpsie	i
}
 800379c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d0:	e0ee      	b.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	4981      	ldr	r1, [pc, #516]	; (80039e0 <HAL_I2C_Master_Receive+0x4cc>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa55 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f5      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003832:	4b6c      	ldr	r3, [pc, #432]	; (80039e4 <HAL_I2C_Master_Receive+0x4d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <HAL_I2C_Master_Receive+0x4d4>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a1a      	lsrs	r2, r3, #8
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	3b01      	subs	r3, #1
 8003850:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d118      	bne.n	800388a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800387a:	b662      	cpsie	i
}
 800387c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0a6      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d1d9      	bne.n	800384c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038da:	b662      	cpsie	i
}
 80038dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003910:	e04e      	b.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fb62 	bl	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e058      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d124      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b03      	cmp	r3, #3
 800396c:	d107      	bne.n	800397e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f ae88 	bne.w	80036ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	00010004 	.word	0x00010004
 80039e4:	20000000 	.word	0x20000000
 80039e8:	14f8b589 	.word	0x14f8b589

080039ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d006      	beq.n	8003a16 <I2C_MasterRequestWrite+0x2a>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d003      	beq.n	8003a16 <I2C_MasterRequestWrite+0x2a>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a14:	d108      	bne.n	8003a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e00b      	b.n	8003a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	2b12      	cmp	r3, #18
 8003a2e:	d107      	bne.n	8003a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f91d 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a66:	d103      	bne.n	8003a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e035      	b.n	8003ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a7c:	d108      	bne.n	8003a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	e01b      	b.n	8003ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a90:	897b      	ldrh	r3, [r7, #10]
 8003a92:	11db      	asrs	r3, r3, #7
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 0306 	and.w	r3, r3, #6
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f063 030f 	orn	r3, r3, #15
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <I2C_MasterRequestWrite+0xfc>)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f966 	bl	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e010      	b.n	8003ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <I2C_MasterRequestWrite+0x100>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f956 	bl	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	00010008 	.word	0x00010008
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d006      	beq.n	8003b2a <I2C_MasterRequestRead+0x3a>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d003      	beq.n	8003b2a <I2C_MasterRequestRead+0x3a>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b28:	d108      	bne.n	8003b3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e00b      	b.n	8003b54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	2b11      	cmp	r3, #17
 8003b42:	d107      	bne.n	8003b54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f893 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d103      	bne.n	8003b84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e079      	b.n	8003c7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b90:	d108      	bne.n	8003ba4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e05f      	b.n	8003c64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ba4:	897b      	ldrh	r3, [r7, #10]
 8003ba6:	11db      	asrs	r3, r3, #7
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0306 	and.w	r3, r3, #6
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f063 030f 	orn	r3, r3, #15
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4930      	ldr	r1, [pc, #192]	; (8003c84 <I2C_MasterRequestRead+0x194>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8dc 	bl	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e054      	b.n	8003c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4929      	ldr	r1, [pc, #164]	; (8003c88 <I2C_MasterRequestRead+0x198>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8cc 	bl	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e044      	b.n	8003c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f831 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	d103      	bne.n	8003c48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e017      	b.n	8003c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	11db      	asrs	r3, r3, #7
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 0306 	and.w	r3, r3, #6
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f063 030e 	orn	r3, r3, #14
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4907      	ldr	r1, [pc, #28]	; (8003c88 <I2C_MasterRequestRead+0x198>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f888 	bl	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00010008 	.word	0x00010008
 8003c88:	00010002 	.word	0x00010002

08003c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9c:	e048      	b.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d044      	beq.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe ff45 	bl	8002b34 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d139      	bne.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10d      	bne.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	e00c      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d116      	bne.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e023      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10d      	bne.n	8003d56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	e00c      	b.n	8003d70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d093      	beq.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d8e:	e071      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d123      	bne.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e067      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d041      	beq.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fe fea0 	bl	8002b34 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d136      	bne.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e00b      	b.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e021      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10c      	bne.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	43da      	mvns	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e00b      	b.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f af6d 	bne.w	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ecc:	e034      	b.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8e3 	bl	800409a <I2C_IsAcknowledgeFailed>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e034      	b.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d028      	beq.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fe fe25 	bl	8002b34 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11d      	bne.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d016      	beq.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e007      	b.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d1c3      	bne.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f5c:	e034      	b.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f89b 	bl	800409a <I2C_IsAcknowledgeFailed>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d028      	beq.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fe fddd 	bl	8002b34 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11d      	bne.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d016      	beq.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e007      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d1c3      	bne.n	8003f5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fec:	e049      	b.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d119      	bne.n	8004030 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e030      	b.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fe fd80 	bl	8002b34 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11d      	bne.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d016      	beq.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e007      	b.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d1ae      	bne.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b0:	d11b      	bne.n	80040ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e272      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8087 	beq.w	8004226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004118:	4b92      	ldr	r3, [pc, #584]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b04      	cmp	r3, #4
 8004122:	d00c      	beq.n	800413e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004124:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d112      	bne.n	8004156 <HAL_RCC_OscConfig+0x5e>
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d10b      	bne.n	8004156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	4b89      	ldr	r3, [pc, #548]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d06c      	beq.n	8004224 <HAL_RCC_OscConfig+0x12c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d168      	bne.n	8004224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e24c      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x76>
 8004160:	4b80      	ldr	r3, [pc, #512]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7f      	ldr	r2, [pc, #508]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e02e      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x98>
 8004176:	4b7b      	ldr	r3, [pc, #492]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7a      	ldr	r2, [pc, #488]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b78      	ldr	r3, [pc, #480]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a77      	ldr	r2, [pc, #476]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0xbc>
 800419a:	4b72      	ldr	r3, [pc, #456]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a71      	ldr	r2, [pc, #452]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 80041b4:	4b6b      	ldr	r3, [pc, #428]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6a      	ldr	r2, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b68      	ldr	r3, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a67      	ldr	r2, [pc, #412]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fcae 	bl	8002b34 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fe fcaa 	bl	8002b34 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e200      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xe4>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe fc9a 	bl	8002b34 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe fc96 	bl	8002b34 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1ec      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x10c>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004232:	4b4c      	ldr	r3, [pc, #304]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800423e:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x18c>
 800424a:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x176>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1c0      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4939      	ldr	r1, [pc, #228]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e03a      	b.n	80042fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fc4f 	bl	8002b34 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fe fc4b 	bl	8002b34 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1a1      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4927      	ldr	r1, [pc, #156]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fc2e 	bl	8002b34 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fe fc2a 	bl	8002b34 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e180      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03a      	beq.n	800437c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d019      	beq.n	8004342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_RCC_OscConfig+0x274>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fc0e 	bl	8002b34 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431c:	f7fe fc0a 	bl	8002b34 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e160      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800433a:	2001      	movs	r0, #1
 800433c:	f000 face 	bl	80048dc <RCC_Delay>
 8004340:	e01c      	b.n	800437c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_OscConfig+0x274>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004348:	f7fe fbf4 	bl	8002b34 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434e:	e00f      	b.n	8004370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004350:	f7fe fbf0 	bl	8002b34 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d908      	bls.n	8004370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e146      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	42420000 	.word	0x42420000
 800436c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004370:	4b92      	ldr	r3, [pc, #584]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e9      	bne.n	8004350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a6 	beq.w	80044d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438e:	4b8b      	ldr	r3, [pc, #556]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4a87      	ldr	r2, [pc, #540]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	61d3      	str	r3, [r2, #28]
 80043a6:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b82      	ldr	r3, [pc, #520]	; (80045c0 <HAL_RCC_OscConfig+0x4c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b7f      	ldr	r3, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x4c8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7e      	ldr	r2, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x4c8>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fe fbb1 	bl	8002b34 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fe fbad 	bl	8002b34 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b64      	cmp	r3, #100	; 0x64
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e103      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCC_OscConfig+0x4c8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x312>
 80043fc:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4a6e      	ldr	r2, [pc, #440]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6213      	str	r3, [r2, #32]
 8004408:	e02d      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x334>
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a69      	ldr	r2, [pc, #420]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	4b67      	ldr	r3, [pc, #412]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a66      	ldr	r2, [pc, #408]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6213      	str	r3, [r2, #32]
 800442a:	e01c      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x356>
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4a60      	ldr	r2, [pc, #384]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6213      	str	r3, [r2, #32]
 8004440:	4b5e      	ldr	r3, [pc, #376]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4a5d      	ldr	r2, [pc, #372]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6213      	str	r3, [r2, #32]
 800444c:	e00b      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800444e:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4a5a      	ldr	r2, [pc, #360]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	6213      	str	r3, [r2, #32]
 800445a:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a57      	ldr	r2, [pc, #348]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446e:	f7fe fb61 	bl	8002b34 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fe fb5d 	bl	8002b34 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0b1      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCC_OscConfig+0x37e>
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449a:	f7fe fb4b 	bl	8002b34 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fe fb47 	bl	8002b34 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e09b      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8087 	beq.w	80045ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d061      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d146      	bne.n	8004582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_RCC_OscConfig+0x4cc>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fe fb1b 	bl	8002b34 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fe fb17 	bl	8002b34 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e06d      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d108      	bne.n	800453c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453c:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a19      	ldr	r1, [r3, #32]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	430b      	orrs	r3, r1
 800454e:	491b      	ldr	r1, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe faeb 	bl	8002b34 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe fae7 	bl	8002b34 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e03d      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x46a>
 8004580:	e035      	b.n	80045ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_RCC_OscConfig+0x4cc>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe fad4 	bl	8002b34 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fad0 	bl	8002b34 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e026      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x498>
 80045ae:	e01e      	b.n	80045ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e019      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
 80045c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_OscConfig+0x500>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0d0      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b6a      	ldr	r3, [pc, #424]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d910      	bls.n	8004640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 0207 	bic.w	r2, r3, #7
 8004626:	4965      	ldr	r1, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800467a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d040      	beq.n	800471c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d115      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e073      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06b      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f023 0203 	bic.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4936      	ldr	r1, [pc, #216]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ec:	f7fe fa22 	bl	8002b34 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	e00a      	b.n	800470a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f4:	f7fe fa1e 	bl	8002b34 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e053      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 020c 	and.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d1eb      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d210      	bcs.n	800474c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 0207 	bic.w	r2, r3, #7
 8004732:	4922      	ldr	r1, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f821 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1cc>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1d0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe f980 	bl	8002ab0 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40022000 	.word	0x40022000
 80047c0:	40021000 	.word	0x40021000
 80047c4:	0800bb54 	.word	0x0800bb54
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCC_GetSysClockFreq+0x94>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x30>
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x36>
 80047fe:	e027      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_GetSysClockFreq+0x98>)
 8004802:	613b      	str	r3, [r7, #16]
      break;
 8004804:	e027      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0c9b      	lsrs	r3, r3, #18
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_GetSysClockFreq+0x94>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0c5b      	lsrs	r3, r3, #17
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	4a11      	ldr	r2, [pc, #68]	; (8004870 <HAL_RCC_GetSysClockFreq+0xa0>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_RCC_GetSysClockFreq+0x98>)
 8004832:	fb03 f202 	mul.w	r2, r3, r2
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e004      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	613b      	str	r3, [r7, #16]
      break;
 800484e:	e002      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetSysClockFreq+0x98>)
 8004852:	613b      	str	r3, [r7, #16]
      break;
 8004854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004856:	693b      	ldr	r3, [r7, #16]
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	007a1200 	.word	0x007a1200
 800486c:	0800bb6c 	.word	0x0800bb6c
 8004870:	0800bb7c 	.word	0x0800bb7c
 8004874:	003d0900 	.word	0x003d0900

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b02      	ldr	r3, [pc, #8]	; (8004888 <HAL_RCC_GetHCLKFreq+0x10>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	20000000 	.word	0x20000000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004890:	f7ff fff2 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	0800bb64 	.word	0x0800bb64

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048b8:	f7ff ffde 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	0adb      	lsrs	r3, r3, #11
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800bb64 	.word	0x0800bb64

080048dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <RCC_Delay+0x34>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <RCC_Delay+0x38>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048f8:	bf00      	nop
  }
  while (Delay --);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e5a      	subs	r2, r3, #1
 80048fe:	60fa      	str	r2, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f9      	bne.n	80048f8 <RCC_Delay+0x1c>
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	20000000 	.word	0x20000000
 8004914:	10624dd3 	.word	0x10624dd3

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e041      	b.n	80049ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd ff9c 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fab2 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e041      	b.n	8004a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f839 	bl	8004a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fa63 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x24>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x3e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x58>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e05e      	b.n	8004b98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0x82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_PWM_Start+0x92>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	e00b      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b08:	e003      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc50 	bl	80053c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <HAL_TIM_PWM_Start+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d107      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_TIM_PWM_Start+0x138>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <HAL_TIM_PWM_Start+0x13c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <HAL_TIM_PWM_Start+0x140>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	e007      	b.n	8004b96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800

08004bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0ae      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	f200 809f 	bhi.w	8004d18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004d19 	.word	0x08004d19
 8004be8:	08004d19 	.word	0x08004d19
 8004bec:	08004d19 	.word	0x08004d19
 8004bf0:	08004c55 	.word	0x08004c55
 8004bf4:	08004d19 	.word	0x08004d19
 8004bf8:	08004d19 	.word	0x08004d19
 8004bfc:	08004d19 	.word	0x08004d19
 8004c00:	08004c97 	.word	0x08004c97
 8004c04:	08004d19 	.word	0x08004d19
 8004c08:	08004d19 	.word	0x08004d19
 8004c0c:	08004d19 	.word	0x08004d19
 8004c10:	08004cd7 	.word	0x08004cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f9b2 	bl	8004f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0208 	orr.w	r2, r2, #8
 8004c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0204 	bic.w	r2, r2, #4
 8004c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6999      	ldr	r1, [r3, #24]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	619a      	str	r2, [r3, #24]
      break;
 8004c52:	e064      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f9f8 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6999      	ldr	r1, [r3, #24]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	619a      	str	r2, [r3, #24]
      break;
 8004c94:	e043      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa41 	bl	8005124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0208 	orr.w	r2, r2, #8
 8004cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0204 	bic.w	r2, r2, #4
 8004cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69d9      	ldr	r1, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	61da      	str	r2, [r3, #28]
      break;
 8004cd4:	e023      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fa8b 	bl	80051f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	021a      	lsls	r2, r3, #8
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	61da      	str	r2, [r3, #28]
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_TIM_ConfigClockSource+0x1c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0b4      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x186>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	d03e      	beq.n	8004e04 <HAL_TIM_ConfigClockSource+0xd4>
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	f200 8087 	bhi.w	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d92:	f000 8086 	beq.w	8004ea2 <HAL_TIM_ConfigClockSource+0x172>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	d87f      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b70      	cmp	r3, #112	; 0x70
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004da0:	2b70      	cmp	r3, #112	; 0x70
 8004da2:	d87b      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d050      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x11a>
 8004da8:	2b60      	cmp	r3, #96	; 0x60
 8004daa:	d877      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b50      	cmp	r3, #80	; 0x50
 8004dae:	d03c      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xfa>
 8004db0:	2b50      	cmp	r3, #80	; 0x50
 8004db2:	d873      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d058      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x13a>
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d86f      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d064      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d86b      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d060      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d867      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05c      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d05a      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	e062      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f000 facc 	bl	8005382 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]
      break;
 8004e02:	e04f      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f000 fab5 	bl	8005382 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e26:	609a      	str	r2, [r3, #8]
      break;
 8004e28:	e03c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 fa2c 	bl	8005294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2150      	movs	r1, #80	; 0x50
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fa83 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004e48:	e02c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 fa4a 	bl	80052f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2160      	movs	r1, #96	; 0x60
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa73 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004e68:	e01c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 fa0c 	bl	8005294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fa63 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004e88:	e00c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 fa5a 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004e9a:	e003      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e000      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <TIM_Base_SetConfig+0xb8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x30>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x30>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <TIM_Base_SetConfig+0xbc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x30>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <TIM_Base_SetConfig+0xc0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <TIM_Base_SetConfig+0xb8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <TIM_Base_SetConfig+0xbc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <TIM_Base_SetConfig+0xc0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <TIM_Base_SetConfig+0xb8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800

08004f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f023 0201 	bic.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0302 	bic.w	r3, r3, #2
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <TIM_OC1_SetConfig+0xc8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10c      	bne.n	8004ffa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0308 	bic.w	r3, r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	; (800504c <TIM_OC1_SetConfig+0xc8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <TIM_OC2_SetConfig+0xd0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10d      	bne.n	80050cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a14      	ldr	r2, [pc, #80]	; (8005120 <TIM_OC2_SetConfig+0xd0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d113      	bne.n	80050fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00

08005124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <TIM_OC3_SetConfig+0xd0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d10d      	bne.n	800519e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <TIM_OC3_SetConfig+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d113      	bne.n	80051ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00

080051f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	031b      	lsls	r3, r3, #12
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <TIM_OC4_SetConfig+0x98>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00

08005294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 030a 	bic.w	r3, r3, #10
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0210 	bic.w	r2, r3, #16
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	031b      	lsls	r3, r3, #12
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	f043 0307 	orr.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b087      	sub	sp, #28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	609a      	str	r2, [r3, #8]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2201      	movs	r2, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e046      	b.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d009      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10c      	bne.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e042      	b.n	800555c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd fa5a 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f91d 	bl	8005748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	d16d      	bne.n	8005660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_UART_Transmit+0x2c>
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e066      	b.n	8005662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2221      	movs	r2, #33	; 0x21
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055a2:	f7fd fac7 	bl	8002b34 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d108      	bne.n	80055d0 <HAL_UART_Transmit+0x6c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e003      	b.n	80055d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d8:	e02a      	b.n	8005630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f840 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e036      	b.n	8005662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cf      	bne.n	80055da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f810 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b090      	sub	sp, #64	; 0x40
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	e050      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d04c      	beq.n	800571e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0x30>
 800568a:	f7fd fa53 	bl	8002b34 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005696:	429a      	cmp	r2, r3
 8005698:	d241      	bcs.n	800571e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056ba:	637a      	str	r2, [r7, #52]	; 0x34
 80056bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ee:	623a      	str	r2, [r7, #32]
 80056f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	69f9      	ldr	r1, [r7, #28]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e00f      	b.n	800573e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d09f      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3740      	adds	r7, #64	; 0x40
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005782:	f023 030c 	bic.w	r3, r3, #12
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	430b      	orrs	r3, r1
 800578e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2c      	ldr	r2, [pc, #176]	; (800585c <UART_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057b0:	f7ff f880 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	e002      	b.n	80057be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7ff f868 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80057bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	4a22      	ldr	r2, [pc, #136]	; (8005860 <UART_SetConfig+0x118>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	0119      	lsls	r1, r3, #4
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009a      	lsls	r2, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <UART_SetConfig+0x118>)
 80057f6:	fba3 0302 	umull	r0, r3, r3, r2
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	2064      	movs	r0, #100	; 0x64
 80057fe:	fb00 f303 	mul.w	r3, r0, r3
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	3332      	adds	r3, #50	; 0x32
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <UART_SetConfig+0x118>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005814:	4419      	add	r1, r3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009a      	lsls	r2, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	fbb2 f2f3 	udiv	r2, r2, r3
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <UART_SetConfig+0x118>)
 800582e:	fba3 0302 	umull	r0, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2064      	movs	r0, #100	; 0x64
 8005836:	fb00 f303 	mul.w	r3, r0, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	3332      	adds	r3, #50	; 0x32
 8005840:	4a07      	ldr	r2, [pc, #28]	; (8005860 <UART_SetConfig+0x118>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	440a      	add	r2, r1
 8005852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40013800 	.word	0x40013800
 8005860:	51eb851f 	.word	0x51eb851f

08005864 <__errno>:
 8005864:	4b01      	ldr	r3, [pc, #4]	; (800586c <__errno+0x8>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	2600      	movs	r6, #0
 8005874:	4d0c      	ldr	r5, [pc, #48]	; (80058a8 <__libc_init_array+0x38>)
 8005876:	4c0d      	ldr	r4, [pc, #52]	; (80058ac <__libc_init_array+0x3c>)
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	42a6      	cmp	r6, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	f004 fc50 	bl	800a124 <_init>
 8005884:	2600      	movs	r6, #0
 8005886:	4d0a      	ldr	r5, [pc, #40]	; (80058b0 <__libc_init_array+0x40>)
 8005888:	4c0a      	ldr	r4, [pc, #40]	; (80058b4 <__libc_init_array+0x44>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	42a6      	cmp	r6, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f855 3b04 	ldr.w	r3, [r5], #4
 8005898:	4798      	blx	r3
 800589a:	3601      	adds	r6, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a2:	4798      	blx	r3
 80058a4:	3601      	adds	r6, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	0800c024 	.word	0x0800c024
 80058ac:	0800c024 	.word	0x0800c024
 80058b0:	0800c024 	.word	0x0800c024
 80058b4:	0800c028 	.word	0x0800c028

080058b8 <memset>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <__cvt>:
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ce:	461f      	mov	r7, r3
 80058d0:	bfbb      	ittet	lt
 80058d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	461f      	movlt	r7, r3
 80058d8:	2300      	movge	r3, #0
 80058da:	232d      	movlt	r3, #45	; 0x2d
 80058dc:	b088      	sub	sp, #32
 80058de:	4614      	mov	r4, r2
 80058e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80058e4:	7013      	strb	r3, [r2, #0]
 80058e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80058ec:	f023 0820 	bic.w	r8, r3, #32
 80058f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058f4:	d005      	beq.n	8005902 <__cvt+0x3a>
 80058f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058fa:	d100      	bne.n	80058fe <__cvt+0x36>
 80058fc:	3501      	adds	r5, #1
 80058fe:	2302      	movs	r3, #2
 8005900:	e000      	b.n	8005904 <__cvt+0x3c>
 8005902:	2303      	movs	r3, #3
 8005904:	aa07      	add	r2, sp, #28
 8005906:	9204      	str	r2, [sp, #16]
 8005908:	aa06      	add	r2, sp, #24
 800590a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800590e:	e9cd 3500 	strd	r3, r5, [sp]
 8005912:	4622      	mov	r2, r4
 8005914:	463b      	mov	r3, r7
 8005916:	f001 fd83 	bl	8007420 <_dtoa_r>
 800591a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800591e:	4606      	mov	r6, r0
 8005920:	d102      	bne.n	8005928 <__cvt+0x60>
 8005922:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005924:	07db      	lsls	r3, r3, #31
 8005926:	d522      	bpl.n	800596e <__cvt+0xa6>
 8005928:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800592c:	eb06 0905 	add.w	r9, r6, r5
 8005930:	d110      	bne.n	8005954 <__cvt+0x8c>
 8005932:	7833      	ldrb	r3, [r6, #0]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d10a      	bne.n	800594e <__cvt+0x86>
 8005938:	2200      	movs	r2, #0
 800593a:	2300      	movs	r3, #0
 800593c:	4620      	mov	r0, r4
 800593e:	4639      	mov	r1, r7
 8005940:	f7fb f832 	bl	80009a8 <__aeabi_dcmpeq>
 8005944:	b918      	cbnz	r0, 800594e <__cvt+0x86>
 8005946:	f1c5 0501 	rsb	r5, r5, #1
 800594a:	f8ca 5000 	str.w	r5, [sl]
 800594e:	f8da 3000 	ldr.w	r3, [sl]
 8005952:	4499      	add	r9, r3
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	4620      	mov	r0, r4
 800595a:	4639      	mov	r1, r7
 800595c:	f7fb f824 	bl	80009a8 <__aeabi_dcmpeq>
 8005960:	b108      	cbz	r0, 8005966 <__cvt+0x9e>
 8005962:	f8cd 901c 	str.w	r9, [sp, #28]
 8005966:	2230      	movs	r2, #48	; 0x30
 8005968:	9b07      	ldr	r3, [sp, #28]
 800596a:	454b      	cmp	r3, r9
 800596c:	d307      	bcc.n	800597e <__cvt+0xb6>
 800596e:	4630      	mov	r0, r6
 8005970:	9b07      	ldr	r3, [sp, #28]
 8005972:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005974:	1b9b      	subs	r3, r3, r6
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	b008      	add	sp, #32
 800597a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	9107      	str	r1, [sp, #28]
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e7f0      	b.n	8005968 <__cvt+0xa0>

08005986 <__exponent>:
 8005986:	4603      	mov	r3, r0
 8005988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598a:	2900      	cmp	r1, #0
 800598c:	f803 2b02 	strb.w	r2, [r3], #2
 8005990:	bfb6      	itet	lt
 8005992:	222d      	movlt	r2, #45	; 0x2d
 8005994:	222b      	movge	r2, #43	; 0x2b
 8005996:	4249      	neglt	r1, r1
 8005998:	2909      	cmp	r1, #9
 800599a:	7042      	strb	r2, [r0, #1]
 800599c:	dd2b      	ble.n	80059f6 <__exponent+0x70>
 800599e:	f10d 0407 	add.w	r4, sp, #7
 80059a2:	46a4      	mov	ip, r4
 80059a4:	270a      	movs	r7, #10
 80059a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80059aa:	460a      	mov	r2, r1
 80059ac:	46a6      	mov	lr, r4
 80059ae:	fb07 1516 	mls	r5, r7, r6, r1
 80059b2:	2a63      	cmp	r2, #99	; 0x63
 80059b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059b8:	4631      	mov	r1, r6
 80059ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80059be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059c2:	dcf0      	bgt.n	80059a6 <__exponent+0x20>
 80059c4:	3130      	adds	r1, #48	; 0x30
 80059c6:	f1ae 0502 	sub.w	r5, lr, #2
 80059ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059ce:	4629      	mov	r1, r5
 80059d0:	1c44      	adds	r4, r0, #1
 80059d2:	4561      	cmp	r1, ip
 80059d4:	d30a      	bcc.n	80059ec <__exponent+0x66>
 80059d6:	f10d 0209 	add.w	r2, sp, #9
 80059da:	eba2 020e 	sub.w	r2, r2, lr
 80059de:	4565      	cmp	r5, ip
 80059e0:	bf88      	it	hi
 80059e2:	2200      	movhi	r2, #0
 80059e4:	4413      	add	r3, r2
 80059e6:	1a18      	subs	r0, r3, r0
 80059e8:	b003      	add	sp, #12
 80059ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059f4:	e7ed      	b.n	80059d2 <__exponent+0x4c>
 80059f6:	2330      	movs	r3, #48	; 0x30
 80059f8:	3130      	adds	r1, #48	; 0x30
 80059fa:	7083      	strb	r3, [r0, #2]
 80059fc:	70c1      	strb	r1, [r0, #3]
 80059fe:	1d03      	adds	r3, r0, #4
 8005a00:	e7f1      	b.n	80059e6 <__exponent+0x60>
	...

08005a04 <_printf_float>:
 8005a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	b091      	sub	sp, #68	; 0x44
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a10:	4616      	mov	r6, r2
 8005a12:	461f      	mov	r7, r3
 8005a14:	4605      	mov	r5, r0
 8005a16:	f002 fe57 	bl	80086c8 <_localeconv_r>
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a20:	f7fa fb96 	bl	8000150 <strlen>
 8005a24:	2300      	movs	r3, #0
 8005a26:	930e      	str	r3, [sp, #56]	; 0x38
 8005a28:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2c:	900a      	str	r0, [sp, #40]	; 0x28
 8005a2e:	3307      	adds	r3, #7
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	f103 0208 	add.w	r2, r3, #8
 8005a38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a3c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a40:	f8c8 2000 	str.w	r2, [r8]
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4b9c      	ldr	r3, [pc, #624]	; (8005cd0 <_printf_float+0x2cc>)
 8005a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a60:	f7fa ffd4 	bl	8000a0c <__aeabi_dcmpun>
 8005a64:	bb70      	cbnz	r0, 8005ac4 <_printf_float+0xc0>
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4b98      	ldr	r3, [pc, #608]	; (8005cd0 <_printf_float+0x2cc>)
 8005a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a70:	f7fa ffae 	bl	80009d0 <__aeabi_dcmple>
 8005a74:	bb30      	cbnz	r0, 8005ac4 <_printf_float+0xc0>
 8005a76:	2200      	movs	r2, #0
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	f7fa ff9d 	bl	80009bc <__aeabi_dcmplt>
 8005a82:	b110      	cbz	r0, 8005a8a <_printf_float+0x86>
 8005a84:	232d      	movs	r3, #45	; 0x2d
 8005a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8a:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <_printf_float+0x2d0>)
 8005a8c:	4892      	ldr	r0, [pc, #584]	; (8005cd8 <_printf_float+0x2d4>)
 8005a8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a92:	bf94      	ite	ls
 8005a94:	4698      	movls	r8, r3
 8005a96:	4680      	movhi	r8, r0
 8005a98:	2303      	movs	r3, #3
 8005a9a:	f04f 0a00 	mov.w	sl, #0
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	f02b 0304 	bic.w	r3, fp, #4
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	4633      	mov	r3, r6
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	9700      	str	r7, [sp, #0]
 8005aae:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ab0:	f000 f9d4 	bl	8005e5c <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f040 8090 	bne.w	8005bda <_printf_float+0x1d6>
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	b011      	add	sp, #68	; 0x44
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4653      	mov	r3, sl
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4651      	mov	r1, sl
 8005acc:	f7fa ff9e 	bl	8000a0c <__aeabi_dcmpun>
 8005ad0:	b148      	cbz	r0, 8005ae6 <_printf_float+0xe2>
 8005ad2:	f1ba 0f00 	cmp.w	sl, #0
 8005ad6:	bfb8      	it	lt
 8005ad8:	232d      	movlt	r3, #45	; 0x2d
 8005ada:	4880      	ldr	r0, [pc, #512]	; (8005cdc <_printf_float+0x2d8>)
 8005adc:	bfb8      	it	lt
 8005ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ae2:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <_printf_float+0x2dc>)
 8005ae4:	e7d3      	b.n	8005a8e <_printf_float+0x8a>
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	d142      	bne.n	8005b76 <_printf_float+0x172>
 8005af0:	2306      	movs	r3, #6
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	9206      	str	r2, [sp, #24]
 8005af8:	aa0e      	add	r2, sp, #56	; 0x38
 8005afa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005afe:	aa0d      	add	r2, sp, #52	; 0x34
 8005b00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	4642      	mov	r2, r8
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4628      	mov	r0, r5
 8005b18:	4653      	mov	r3, sl
 8005b1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b1c:	f7ff fed4 	bl	80058c8 <__cvt>
 8005b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b22:	4680      	mov	r8, r0
 8005b24:	2947      	cmp	r1, #71	; 0x47
 8005b26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b28:	d108      	bne.n	8005b3c <_printf_float+0x138>
 8005b2a:	1cc8      	adds	r0, r1, #3
 8005b2c:	db02      	blt.n	8005b34 <_printf_float+0x130>
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	4299      	cmp	r1, r3
 8005b32:	dd40      	ble.n	8005bb6 <_printf_float+0x1b2>
 8005b34:	f1a9 0902 	sub.w	r9, r9, #2
 8005b38:	fa5f f989 	uxtb.w	r9, r9
 8005b3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b40:	d81f      	bhi.n	8005b82 <_printf_float+0x17e>
 8005b42:	464a      	mov	r2, r9
 8005b44:	3901      	subs	r1, #1
 8005b46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b4c:	f7ff ff1b 	bl	8005986 <__exponent>
 8005b50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b52:	4682      	mov	sl, r0
 8005b54:	1813      	adds	r3, r2, r0
 8005b56:	2a01      	cmp	r2, #1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	dc02      	bgt.n	8005b62 <_printf_float+0x15e>
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	07d2      	lsls	r2, r2, #31
 8005b60:	d501      	bpl.n	8005b66 <_printf_float+0x162>
 8005b62:	3301      	adds	r3, #1
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d09b      	beq.n	8005aa6 <_printf_float+0xa2>
 8005b6e:	232d      	movs	r3, #45	; 0x2d
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b74:	e797      	b.n	8005aa6 <_printf_float+0xa2>
 8005b76:	2947      	cmp	r1, #71	; 0x47
 8005b78:	d1bc      	bne.n	8005af4 <_printf_float+0xf0>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ba      	bne.n	8005af4 <_printf_float+0xf0>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7b7      	b.n	8005af2 <_printf_float+0xee>
 8005b82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b86:	d118      	bne.n	8005bba <_printf_float+0x1b6>
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	dd0b      	ble.n	8005ba6 <_printf_float+0x1a2>
 8005b8e:	6121      	str	r1, [r4, #16]
 8005b90:	b913      	cbnz	r3, 8005b98 <_printf_float+0x194>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	07d0      	lsls	r0, r2, #31
 8005b96:	d502      	bpl.n	8005b9e <_printf_float+0x19a>
 8005b98:	3301      	adds	r3, #1
 8005b9a:	440b      	add	r3, r1
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	f04f 0a00 	mov.w	sl, #0
 8005ba2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ba4:	e7df      	b.n	8005b66 <_printf_float+0x162>
 8005ba6:	b913      	cbnz	r3, 8005bae <_printf_float+0x1aa>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	07d2      	lsls	r2, r2, #31
 8005bac:	d501      	bpl.n	8005bb2 <_printf_float+0x1ae>
 8005bae:	3302      	adds	r3, #2
 8005bb0:	e7f4      	b.n	8005b9c <_printf_float+0x198>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7f2      	b.n	8005b9c <_printf_float+0x198>
 8005bb6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	db05      	blt.n	8005bcc <_printf_float+0x1c8>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	6121      	str	r1, [r4, #16]
 8005bc4:	07d8      	lsls	r0, r3, #31
 8005bc6:	d5ea      	bpl.n	8005b9e <_printf_float+0x19a>
 8005bc8:	1c4b      	adds	r3, r1, #1
 8005bca:	e7e7      	b.n	8005b9c <_printf_float+0x198>
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	bfcc      	ite	gt
 8005bd0:	2201      	movgt	r2, #1
 8005bd2:	f1c1 0202 	rsble	r2, r1, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	e7e0      	b.n	8005b9c <_printf_float+0x198>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	055a      	lsls	r2, r3, #21
 8005bde:	d407      	bmi.n	8005bf0 <_printf_float+0x1ec>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	4642      	mov	r2, r8
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d12b      	bne.n	8005c46 <_printf_float+0x242>
 8005bee:	e764      	b.n	8005aba <_printf_float+0xb6>
 8005bf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bf4:	f240 80dd 	bls.w	8005db2 <_printf_float+0x3ae>
 8005bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f7fa fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d033      	beq.n	8005c70 <_printf_float+0x26c>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	4a35      	ldr	r2, [pc, #212]	; (8005ce4 <_printf_float+0x2e0>)
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af51 	beq.w	8005aba <_printf_float+0xb6>
 8005c18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	db02      	blt.n	8005c26 <_printf_float+0x222>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07d8      	lsls	r0, r3, #31
 8005c24:	d50f      	bpl.n	8005c46 <_printf_float+0x242>
 8005c26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	f43f af42 	beq.w	8005aba <_printf_float+0xb6>
 8005c36:	f04f 0800 	mov.w	r8, #0
 8005c3a:	f104 091a 	add.w	r9, r4, #26
 8005c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c40:	3b01      	subs	r3, #1
 8005c42:	4543      	cmp	r3, r8
 8005c44:	dc09      	bgt.n	8005c5a <_printf_float+0x256>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	079b      	lsls	r3, r3, #30
 8005c4a:	f100 8102 	bmi.w	8005e52 <_printf_float+0x44e>
 8005c4e:	68e0      	ldr	r0, [r4, #12]
 8005c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c52:	4298      	cmp	r0, r3
 8005c54:	bfb8      	it	lt
 8005c56:	4618      	movlt	r0, r3
 8005c58:	e731      	b.n	8005abe <_printf_float+0xba>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	464a      	mov	r2, r9
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f af28 	beq.w	8005aba <_printf_float+0xb6>
 8005c6a:	f108 0801 	add.w	r8, r8, #1
 8005c6e:	e7e6      	b.n	8005c3e <_printf_float+0x23a>
 8005c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dc38      	bgt.n	8005ce8 <_printf_float+0x2e4>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <_printf_float+0x2e0>)
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f af1a 	beq.w	8005aba <_printf_float+0xb6>
 8005c86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d102      	bne.n	8005c94 <_printf_float+0x290>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	07d9      	lsls	r1, r3, #31
 8005c92:	d5d8      	bpl.n	8005c46 <_printf_float+0x242>
 8005c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f43f af0b 	beq.w	8005aba <_printf_float+0xb6>
 8005ca4:	f04f 0900 	mov.w	r9, #0
 8005ca8:	f104 0a1a 	add.w	sl, r4, #26
 8005cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cae:	425b      	negs	r3, r3
 8005cb0:	454b      	cmp	r3, r9
 8005cb2:	dc01      	bgt.n	8005cb8 <_printf_float+0x2b4>
 8005cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb6:	e794      	b.n	8005be2 <_printf_float+0x1de>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4652      	mov	r2, sl
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f aef9 	beq.w	8005aba <_printf_float+0xb6>
 8005cc8:	f109 0901 	add.w	r9, r9, #1
 8005ccc:	e7ee      	b.n	8005cac <_printf_float+0x2a8>
 8005cce:	bf00      	nop
 8005cd0:	7fefffff 	.word	0x7fefffff
 8005cd4:	0800bb84 	.word	0x0800bb84
 8005cd8:	0800bb88 	.word	0x0800bb88
 8005cdc:	0800bb90 	.word	0x0800bb90
 8005ce0:	0800bb8c 	.word	0x0800bb8c
 8005ce4:	0800bb94 	.word	0x0800bb94
 8005ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cec:	429a      	cmp	r2, r3
 8005cee:	bfa8      	it	ge
 8005cf0:	461a      	movge	r2, r3
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	4691      	mov	r9, r2
 8005cf6:	dc37      	bgt.n	8005d68 <_printf_float+0x364>
 8005cf8:	f04f 0b00 	mov.w	fp, #0
 8005cfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d00:	f104 021a 	add.w	r2, r4, #26
 8005d04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d08:	ebaa 0309 	sub.w	r3, sl, r9
 8005d0c:	455b      	cmp	r3, fp
 8005d0e:	dc33      	bgt.n	8005d78 <_printf_float+0x374>
 8005d10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d14:	429a      	cmp	r2, r3
 8005d16:	db3b      	blt.n	8005d90 <_printf_float+0x38c>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d438      	bmi.n	8005d90 <_printf_float+0x38c>
 8005d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d22:	eba3 020a 	sub.w	r2, r3, sl
 8005d26:	eba3 0901 	sub.w	r9, r3, r1
 8005d2a:	4591      	cmp	r9, r2
 8005d2c:	bfa8      	it	ge
 8005d2e:	4691      	movge	r9, r2
 8005d30:	f1b9 0f00 	cmp.w	r9, #0
 8005d34:	dc34      	bgt.n	8005da0 <_printf_float+0x39c>
 8005d36:	f04f 0800 	mov.w	r8, #0
 8005d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d3e:	f104 0a1a 	add.w	sl, r4, #26
 8005d42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	eba3 0309 	sub.w	r3, r3, r9
 8005d4c:	4543      	cmp	r3, r8
 8005d4e:	f77f af7a 	ble.w	8005c46 <_printf_float+0x242>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4652      	mov	r2, sl
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f aeac 	beq.w	8005aba <_printf_float+0xb6>
 8005d62:	f108 0801 	add.w	r8, r8, #1
 8005d66:	e7ec      	b.n	8005d42 <_printf_float+0x33e>
 8005d68:	4613      	mov	r3, r2
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	d1c0      	bne.n	8005cf8 <_printf_float+0x2f4>
 8005d76:	e6a0      	b.n	8005aba <_printf_float+0xb6>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f ae99 	beq.w	8005aba <_printf_float+0xb6>
 8005d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d8a:	f10b 0b01 	add.w	fp, fp, #1
 8005d8e:	e7b9      	b.n	8005d04 <_printf_float+0x300>
 8005d90:	4631      	mov	r1, r6
 8005d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d1bf      	bne.n	8005d1e <_printf_float+0x31a>
 8005d9e:	e68c      	b.n	8005aba <_printf_float+0xb6>
 8005da0:	464b      	mov	r3, r9
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	eb08 020a 	add.w	r2, r8, sl
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	d1c2      	bne.n	8005d36 <_printf_float+0x332>
 8005db0:	e683      	b.n	8005aba <_printf_float+0xb6>
 8005db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005db4:	2a01      	cmp	r2, #1
 8005db6:	dc01      	bgt.n	8005dbc <_printf_float+0x3b8>
 8005db8:	07db      	lsls	r3, r3, #31
 8005dba:	d537      	bpl.n	8005e2c <_printf_float+0x428>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f43f ae77 	beq.w	8005aba <_printf_float+0xb6>
 8005dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f ae6f 	beq.w	8005aba <_printf_float+0xb6>
 8005ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fa fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8005de8:	b9d8      	cbnz	r0, 8005e22 <_printf_float+0x41e>
 8005dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dec:	f108 0201 	add.w	r2, r8, #1
 8005df0:	3b01      	subs	r3, #1
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d10e      	bne.n	8005e1a <_printf_float+0x416>
 8005dfc:	e65d      	b.n	8005aba <_printf_float+0xb6>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	464a      	mov	r2, r9
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f ae56 	beq.w	8005aba <_printf_float+0xb6>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4543      	cmp	r3, r8
 8005e18:	dcf1      	bgt.n	8005dfe <_printf_float+0x3fa>
 8005e1a:	4653      	mov	r3, sl
 8005e1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e20:	e6e0      	b.n	8005be4 <_printf_float+0x1e0>
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	f104 091a 	add.w	r9, r4, #26
 8005e2a:	e7f2      	b.n	8005e12 <_printf_float+0x40e>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4642      	mov	r2, r8
 8005e30:	e7df      	b.n	8005df2 <_printf_float+0x3ee>
 8005e32:	2301      	movs	r3, #1
 8005e34:	464a      	mov	r2, r9
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f ae3c 	beq.w	8005aba <_printf_float+0xb6>
 8005e42:	f108 0801 	add.w	r8, r8, #1
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e4a:	1a5b      	subs	r3, r3, r1
 8005e4c:	4543      	cmp	r3, r8
 8005e4e:	dcf0      	bgt.n	8005e32 <_printf_float+0x42e>
 8005e50:	e6fd      	b.n	8005c4e <_printf_float+0x24a>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	f104 0919 	add.w	r9, r4, #25
 8005e5a:	e7f4      	b.n	8005e46 <_printf_float+0x442>

08005e5c <_printf_common>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	4616      	mov	r6, r2
 8005e62:	4699      	mov	r9, r3
 8005e64:	688a      	ldr	r2, [r1, #8]
 8005e66:	690b      	ldr	r3, [r1, #16]
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	bfb8      	it	lt
 8005e6e:	4613      	movlt	r3, r2
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e76:	460c      	mov	r4, r1
 8005e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e7c:	b10a      	cbz	r2, 8005e82 <_printf_common+0x26>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	0699      	lsls	r1, r3, #26
 8005e86:	bf42      	ittt	mi
 8005e88:	6833      	ldrmi	r3, [r6, #0]
 8005e8a:	3302      	addmi	r3, #2
 8005e8c:	6033      	strmi	r3, [r6, #0]
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	f015 0506 	ands.w	r5, r5, #6
 8005e94:	d106      	bne.n	8005ea4 <_printf_common+0x48>
 8005e96:	f104 0a19 	add.w	sl, r4, #25
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	6832      	ldr	r2, [r6, #0]
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	dc28      	bgt.n	8005ef6 <_printf_common+0x9a>
 8005ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea8:	1e13      	subs	r3, r2, #0
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	bf18      	it	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	0692      	lsls	r2, r2, #26
 8005eb2:	d42d      	bmi.n	8005f10 <_printf_common+0xb4>
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d020      	beq.n	8005f04 <_printf_common+0xa8>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	68e5      	ldr	r5, [r4, #12]
 8005ec6:	f003 0306 	and.w	r3, r3, #6
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	bf18      	it	ne
 8005ece:	2500      	movne	r5, #0
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	f04f 0600 	mov.w	r6, #0
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	bf08      	it	eq
 8005eda:	1aad      	subeq	r5, r5, r2
 8005edc:	6922      	ldr	r2, [r4, #16]
 8005ede:	bf08      	it	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfc4      	itt	gt
 8005ee8:	1a9b      	subgt	r3, r3, r2
 8005eea:	18ed      	addgt	r5, r5, r3
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xcc>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xac>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4649      	mov	r1, r9
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c0      	blx	r8
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xb0>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c4      	b.n	8005e9a <_printf_common+0x3e>
 8005f10:	2030      	movs	r0, #48	; 0x30
 8005f12:	18e1      	adds	r1, r4, r3
 8005f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f1e:	4422      	add	r2, r4
 8005f20:	3302      	adds	r3, #2
 8005f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f26:	e7c5      	b.n	8005eb4 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa8>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x92>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	7e0f      	ldrb	r7, [r1, #24]
 8005f42:	4691      	mov	r9, r2
 8005f44:	2f78      	cmp	r7, #120	; 0x78
 8005f46:	4680      	mov	r8, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	469a      	mov	sl, r3
 8005f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	; 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d9 	beq.w	8006110 <_printf_i+0x1d4>
 8005f5e:	2f58      	cmp	r7, #88	; 0x58
 8005f60:	f000 80a4 	beq.w	80060ac <_printf_i+0x170>
 8005f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a101      	add	r1, pc, #4	; (adr r1, 8005f7c <_printf_i+0x40>)
 8005f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060f7 	.word	0x080060f7
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	080060d9 	.word	0x080060d9
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006119 	.word	0x08006119
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060e1 	.word	0x080060e1
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	602a      	str	r2, [r5, #0]
 8005fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a4      	b.n	8006132 <_printf_i+0x1f6>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	6829      	ldr	r1, [r5, #0]
 8005fec:	0606      	lsls	r6, r0, #24
 8005fee:	f101 0304 	add.w	r3, r1, #4
 8005ff2:	d50a      	bpl.n	800600a <_printf_i+0xce>
 8005ff4:	680e      	ldr	r6, [r1, #0]
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	2e00      	cmp	r6, #0
 8005ffa:	da03      	bge.n	8006004 <_printf_i+0xc8>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	4276      	negs	r6, r6
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	230a      	movs	r3, #10
 8006006:	485e      	ldr	r0, [pc, #376]	; (8006180 <_printf_i+0x244>)
 8006008:	e019      	b.n	800603e <_printf_i+0x102>
 800600a:	680e      	ldr	r6, [r1, #0]
 800600c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	bf18      	it	ne
 8006014:	b236      	sxthne	r6, r6
 8006016:	e7ef      	b.n	8005ff8 <_printf_i+0xbc>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	6029      	str	r1, [r5, #0]
 8006020:	0601      	lsls	r1, r0, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xec>
 8006024:	681e      	ldr	r6, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0xf2>
 8006028:	0646      	lsls	r6, r0, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xe8>
 800602c:	881e      	ldrh	r6, [r3, #0]
 800602e:	2f6f      	cmp	r7, #111	; 0x6f
 8006030:	bf0c      	ite	eq
 8006032:	2308      	moveq	r3, #8
 8006034:	230a      	movne	r3, #10
 8006036:	4852      	ldr	r0, [pc, #328]	; (8006180 <_printf_i+0x244>)
 8006038:	2100      	movs	r1, #0
 800603a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603e:	6865      	ldr	r5, [r4, #4]
 8006040:	2d00      	cmp	r5, #0
 8006042:	bfa8      	it	ge
 8006044:	6821      	ldrge	r1, [r4, #0]
 8006046:	60a5      	str	r5, [r4, #8]
 8006048:	bfa4      	itt	ge
 800604a:	f021 0104 	bicge.w	r1, r1, #4
 800604e:	6021      	strge	r1, [r4, #0]
 8006050:	b90e      	cbnz	r6, 8006056 <_printf_i+0x11a>
 8006052:	2d00      	cmp	r5, #0
 8006054:	d04d      	beq.n	80060f2 <_printf_i+0x1b6>
 8006056:	4615      	mov	r5, r2
 8006058:	fbb6 f1f3 	udiv	r1, r6, r3
 800605c:	fb03 6711 	mls	r7, r3, r1, r6
 8006060:	5dc7      	ldrb	r7, [r0, r7]
 8006062:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006066:	4637      	mov	r7, r6
 8006068:	42bb      	cmp	r3, r7
 800606a:	460e      	mov	r6, r1
 800606c:	d9f4      	bls.n	8006058 <_printf_i+0x11c>
 800606e:	2b08      	cmp	r3, #8
 8006070:	d10b      	bne.n	800608a <_printf_i+0x14e>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	07de      	lsls	r6, r3, #31
 8006076:	d508      	bpl.n	800608a <_printf_i+0x14e>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	6861      	ldr	r1, [r4, #4]
 800607c:	4299      	cmp	r1, r3
 800607e:	bfde      	ittt	le
 8006080:	2330      	movle	r3, #48	; 0x30
 8006082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800608a:	1b52      	subs	r2, r2, r5
 800608c:	6122      	str	r2, [r4, #16]
 800608e:	464b      	mov	r3, r9
 8006090:	4621      	mov	r1, r4
 8006092:	4640      	mov	r0, r8
 8006094:	f8cd a000 	str.w	sl, [sp]
 8006098:	aa03      	add	r2, sp, #12
 800609a:	f7ff fedf 	bl	8005e5c <_printf_common>
 800609e:	3001      	adds	r0, #1
 80060a0:	d14c      	bne.n	800613c <_printf_i+0x200>
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	b004      	add	sp, #16
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	4834      	ldr	r0, [pc, #208]	; (8006180 <_printf_i+0x244>)
 80060ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060b2:	6829      	ldr	r1, [r5, #0]
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80060ba:	6029      	str	r1, [r5, #0]
 80060bc:	061d      	lsls	r5, r3, #24
 80060be:	d514      	bpl.n	80060ea <_printf_i+0x1ae>
 80060c0:	07df      	lsls	r7, r3, #31
 80060c2:	bf44      	itt	mi
 80060c4:	f043 0320 	orrmi.w	r3, r3, #32
 80060c8:	6023      	strmi	r3, [r4, #0]
 80060ca:	b91e      	cbnz	r6, 80060d4 <_printf_i+0x198>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f023 0320 	bic.w	r3, r3, #32
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	2310      	movs	r3, #16
 80060d6:	e7af      	b.n	8006038 <_printf_i+0xfc>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f043 0320 	orr.w	r3, r3, #32
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	2378      	movs	r3, #120	; 0x78
 80060e2:	4828      	ldr	r0, [pc, #160]	; (8006184 <_printf_i+0x248>)
 80060e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e8:	e7e3      	b.n	80060b2 <_printf_i+0x176>
 80060ea:	0659      	lsls	r1, r3, #25
 80060ec:	bf48      	it	mi
 80060ee:	b2b6      	uxthmi	r6, r6
 80060f0:	e7e6      	b.n	80060c0 <_printf_i+0x184>
 80060f2:	4615      	mov	r5, r2
 80060f4:	e7bb      	b.n	800606e <_printf_i+0x132>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	6826      	ldr	r6, [r4, #0]
 80060fa:	1d18      	adds	r0, r3, #4
 80060fc:	6961      	ldr	r1, [r4, #20]
 80060fe:	6028      	str	r0, [r5, #0]
 8006100:	0635      	lsls	r5, r6, #24
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	d501      	bpl.n	800610a <_printf_i+0x1ce>
 8006106:	6019      	str	r1, [r3, #0]
 8006108:	e002      	b.n	8006110 <_printf_i+0x1d4>
 800610a:	0670      	lsls	r0, r6, #25
 800610c:	d5fb      	bpl.n	8006106 <_printf_i+0x1ca>
 800610e:	8019      	strh	r1, [r3, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	4615      	mov	r5, r2
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	e7ba      	b.n	800608e <_printf_i+0x152>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	2100      	movs	r1, #0
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	602a      	str	r2, [r5, #0]
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	4628      	mov	r0, r5
 8006126:	f002 faed 	bl	8008704 <memchr>
 800612a:	b108      	cbz	r0, 8006130 <_printf_i+0x1f4>
 800612c:	1b40      	subs	r0, r0, r5
 800612e:	6060      	str	r0, [r4, #4]
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2300      	movs	r3, #0
 8006136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800613a:	e7a8      	b.n	800608e <_printf_i+0x152>
 800613c:	462a      	mov	r2, r5
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	47d0      	blx	sl
 8006146:	3001      	adds	r0, #1
 8006148:	d0ab      	beq.n	80060a2 <_printf_i+0x166>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	079b      	lsls	r3, r3, #30
 800614e:	d413      	bmi.n	8006178 <_printf_i+0x23c>
 8006150:	68e0      	ldr	r0, [r4, #12]
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	4298      	cmp	r0, r3
 8006156:	bfb8      	it	lt
 8006158:	4618      	movlt	r0, r3
 800615a:	e7a4      	b.n	80060a6 <_printf_i+0x16a>
 800615c:	2301      	movs	r3, #1
 800615e:	4632      	mov	r2, r6
 8006160:	4649      	mov	r1, r9
 8006162:	4640      	mov	r0, r8
 8006164:	47d0      	blx	sl
 8006166:	3001      	adds	r0, #1
 8006168:	d09b      	beq.n	80060a2 <_printf_i+0x166>
 800616a:	3501      	adds	r5, #1
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	9903      	ldr	r1, [sp, #12]
 8006170:	1a5b      	subs	r3, r3, r1
 8006172:	42ab      	cmp	r3, r5
 8006174:	dcf2      	bgt.n	800615c <_printf_i+0x220>
 8006176:	e7eb      	b.n	8006150 <_printf_i+0x214>
 8006178:	2500      	movs	r5, #0
 800617a:	f104 0619 	add.w	r6, r4, #25
 800617e:	e7f5      	b.n	800616c <_printf_i+0x230>
 8006180:	0800bb96 	.word	0x0800bb96
 8006184:	0800bba7 	.word	0x0800bba7

08006188 <_scanf_float>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b087      	sub	sp, #28
 800618e:	9303      	str	r3, [sp, #12]
 8006190:	688b      	ldr	r3, [r1, #8]
 8006192:	4617      	mov	r7, r2
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800619a:	bf85      	ittet	hi
 800619c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061a0:	195b      	addhi	r3, r3, r5
 80061a2:	2300      	movls	r3, #0
 80061a4:	9302      	strhi	r3, [sp, #8]
 80061a6:	bf88      	it	hi
 80061a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061ac:	468b      	mov	fp, r1
 80061ae:	f04f 0500 	mov.w	r5, #0
 80061b2:	bf8c      	ite	hi
 80061b4:	608b      	strhi	r3, [r1, #8]
 80061b6:	9302      	strls	r3, [sp, #8]
 80061b8:	680b      	ldr	r3, [r1, #0]
 80061ba:	4680      	mov	r8, r0
 80061bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061c0:	f84b 3b1c 	str.w	r3, [fp], #28
 80061c4:	460c      	mov	r4, r1
 80061c6:	465e      	mov	r6, fp
 80061c8:	46aa      	mov	sl, r5
 80061ca:	46a9      	mov	r9, r5
 80061cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061d0:	9501      	str	r5, [sp, #4]
 80061d2:	68a2      	ldr	r2, [r4, #8]
 80061d4:	b152      	cbz	r2, 80061ec <_scanf_float+0x64>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b4e      	cmp	r3, #78	; 0x4e
 80061dc:	d864      	bhi.n	80062a8 <_scanf_float+0x120>
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d83c      	bhi.n	800625c <_scanf_float+0xd4>
 80061e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061e6:	b2c8      	uxtb	r0, r1
 80061e8:	280e      	cmp	r0, #14
 80061ea:	d93a      	bls.n	8006262 <_scanf_float+0xda>
 80061ec:	f1b9 0f00 	cmp.w	r9, #0
 80061f0:	d003      	beq.n	80061fa <_scanf_float+0x72>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fe:	f1ba 0f01 	cmp.w	sl, #1
 8006202:	f200 8113 	bhi.w	800642c <_scanf_float+0x2a4>
 8006206:	455e      	cmp	r6, fp
 8006208:	f200 8105 	bhi.w	8006416 <_scanf_float+0x28e>
 800620c:	2501      	movs	r5, #1
 800620e:	4628      	mov	r0, r5
 8006210:	b007      	add	sp, #28
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800621a:	2a0d      	cmp	r2, #13
 800621c:	d8e6      	bhi.n	80061ec <_scanf_float+0x64>
 800621e:	a101      	add	r1, pc, #4	; (adr r1, 8006224 <_scanf_float+0x9c>)
 8006220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006224:	08006363 	.word	0x08006363
 8006228:	080061ed 	.word	0x080061ed
 800622c:	080061ed 	.word	0x080061ed
 8006230:	080061ed 	.word	0x080061ed
 8006234:	080063c3 	.word	0x080063c3
 8006238:	0800639b 	.word	0x0800639b
 800623c:	080061ed 	.word	0x080061ed
 8006240:	080061ed 	.word	0x080061ed
 8006244:	08006371 	.word	0x08006371
 8006248:	080061ed 	.word	0x080061ed
 800624c:	080061ed 	.word	0x080061ed
 8006250:	080061ed 	.word	0x080061ed
 8006254:	080061ed 	.word	0x080061ed
 8006258:	08006329 	.word	0x08006329
 800625c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006260:	e7db      	b.n	800621a <_scanf_float+0x92>
 8006262:	290e      	cmp	r1, #14
 8006264:	d8c2      	bhi.n	80061ec <_scanf_float+0x64>
 8006266:	a001      	add	r0, pc, #4	; (adr r0, 800626c <_scanf_float+0xe4>)
 8006268:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800626c:	0800631b 	.word	0x0800631b
 8006270:	080061ed 	.word	0x080061ed
 8006274:	0800631b 	.word	0x0800631b
 8006278:	080063af 	.word	0x080063af
 800627c:	080061ed 	.word	0x080061ed
 8006280:	080062c9 	.word	0x080062c9
 8006284:	08006305 	.word	0x08006305
 8006288:	08006305 	.word	0x08006305
 800628c:	08006305 	.word	0x08006305
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	08006305 	.word	0x08006305
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	2b6e      	cmp	r3, #110	; 0x6e
 80062aa:	d809      	bhi.n	80062c0 <_scanf_float+0x138>
 80062ac:	2b60      	cmp	r3, #96	; 0x60
 80062ae:	d8b2      	bhi.n	8006216 <_scanf_float+0x8e>
 80062b0:	2b54      	cmp	r3, #84	; 0x54
 80062b2:	d077      	beq.n	80063a4 <_scanf_float+0x21c>
 80062b4:	2b59      	cmp	r3, #89	; 0x59
 80062b6:	d199      	bne.n	80061ec <_scanf_float+0x64>
 80062b8:	2d07      	cmp	r5, #7
 80062ba:	d197      	bne.n	80061ec <_scanf_float+0x64>
 80062bc:	2508      	movs	r5, #8
 80062be:	e029      	b.n	8006314 <_scanf_float+0x18c>
 80062c0:	2b74      	cmp	r3, #116	; 0x74
 80062c2:	d06f      	beq.n	80063a4 <_scanf_float+0x21c>
 80062c4:	2b79      	cmp	r3, #121	; 0x79
 80062c6:	e7f6      	b.n	80062b6 <_scanf_float+0x12e>
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	05c8      	lsls	r0, r1, #23
 80062cc:	d51a      	bpl.n	8006304 <_scanf_float+0x17c>
 80062ce:	9b02      	ldr	r3, [sp, #8]
 80062d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062d4:	6021      	str	r1, [r4, #0]
 80062d6:	f109 0901 	add.w	r9, r9, #1
 80062da:	b11b      	cbz	r3, 80062e4 <_scanf_float+0x15c>
 80062dc:	3b01      	subs	r3, #1
 80062de:	3201      	adds	r2, #1
 80062e0:	9302      	str	r3, [sp, #8]
 80062e2:	60a2      	str	r2, [r4, #8]
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	3301      	adds	r3, #1
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	f340 8084 	ble.w	8006404 <_scanf_float+0x27c>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	3301      	adds	r3, #1
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	e766      	b.n	80061d2 <_scanf_float+0x4a>
 8006304:	eb1a 0f05 	cmn.w	sl, r5
 8006308:	f47f af70 	bne.w	80061ec <_scanf_float+0x64>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	f806 3b01 	strb.w	r3, [r6], #1
 8006318:	e7e4      	b.n	80062e4 <_scanf_float+0x15c>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	0610      	lsls	r0, r2, #24
 800631e:	f57f af65 	bpl.w	80061ec <_scanf_float+0x64>
 8006322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006326:	e7f4      	b.n	8006312 <_scanf_float+0x18a>
 8006328:	f1ba 0f00 	cmp.w	sl, #0
 800632c:	d10e      	bne.n	800634c <_scanf_float+0x1c4>
 800632e:	f1b9 0f00 	cmp.w	r9, #0
 8006332:	d10e      	bne.n	8006352 <_scanf_float+0x1ca>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800633a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800633e:	d108      	bne.n	8006352 <_scanf_float+0x1ca>
 8006340:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006344:	f04f 0a01 	mov.w	sl, #1
 8006348:	6022      	str	r2, [r4, #0]
 800634a:	e7e3      	b.n	8006314 <_scanf_float+0x18c>
 800634c:	f1ba 0f02 	cmp.w	sl, #2
 8006350:	d055      	beq.n	80063fe <_scanf_float+0x276>
 8006352:	2d01      	cmp	r5, #1
 8006354:	d002      	beq.n	800635c <_scanf_float+0x1d4>
 8006356:	2d04      	cmp	r5, #4
 8006358:	f47f af48 	bne.w	80061ec <_scanf_float+0x64>
 800635c:	3501      	adds	r5, #1
 800635e:	b2ed      	uxtb	r5, r5
 8006360:	e7d8      	b.n	8006314 <_scanf_float+0x18c>
 8006362:	f1ba 0f01 	cmp.w	sl, #1
 8006366:	f47f af41 	bne.w	80061ec <_scanf_float+0x64>
 800636a:	f04f 0a02 	mov.w	sl, #2
 800636e:	e7d1      	b.n	8006314 <_scanf_float+0x18c>
 8006370:	b97d      	cbnz	r5, 8006392 <_scanf_float+0x20a>
 8006372:	f1b9 0f00 	cmp.w	r9, #0
 8006376:	f47f af3c 	bne.w	80061f2 <_scanf_float+0x6a>
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006380:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006384:	f47f af39 	bne.w	80061fa <_scanf_float+0x72>
 8006388:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800638c:	2501      	movs	r5, #1
 800638e:	6022      	str	r2, [r4, #0]
 8006390:	e7c0      	b.n	8006314 <_scanf_float+0x18c>
 8006392:	2d03      	cmp	r5, #3
 8006394:	d0e2      	beq.n	800635c <_scanf_float+0x1d4>
 8006396:	2d05      	cmp	r5, #5
 8006398:	e7de      	b.n	8006358 <_scanf_float+0x1d0>
 800639a:	2d02      	cmp	r5, #2
 800639c:	f47f af26 	bne.w	80061ec <_scanf_float+0x64>
 80063a0:	2503      	movs	r5, #3
 80063a2:	e7b7      	b.n	8006314 <_scanf_float+0x18c>
 80063a4:	2d06      	cmp	r5, #6
 80063a6:	f47f af21 	bne.w	80061ec <_scanf_float+0x64>
 80063aa:	2507      	movs	r5, #7
 80063ac:	e7b2      	b.n	8006314 <_scanf_float+0x18c>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	0591      	lsls	r1, r2, #22
 80063b2:	f57f af1b 	bpl.w	80061ec <_scanf_float+0x64>
 80063b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063ba:	6022      	str	r2, [r4, #0]
 80063bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80063c0:	e7a8      	b.n	8006314 <_scanf_float+0x18c>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063cc:	d006      	beq.n	80063dc <_scanf_float+0x254>
 80063ce:	0550      	lsls	r0, r2, #21
 80063d0:	f57f af0c 	bpl.w	80061ec <_scanf_float+0x64>
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	f43f af0f 	beq.w	80061fa <_scanf_float+0x72>
 80063dc:	0591      	lsls	r1, r2, #22
 80063de:	bf58      	it	pl
 80063e0:	9901      	ldrpl	r1, [sp, #4]
 80063e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063e6:	bf58      	it	pl
 80063e8:	eba9 0101 	subpl.w	r1, r9, r1
 80063ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063f0:	f04f 0900 	mov.w	r9, #0
 80063f4:	bf58      	it	pl
 80063f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063fa:	6022      	str	r2, [r4, #0]
 80063fc:	e78a      	b.n	8006314 <_scanf_float+0x18c>
 80063fe:	f04f 0a03 	mov.w	sl, #3
 8006402:	e787      	b.n	8006314 <_scanf_float+0x18c>
 8006404:	4639      	mov	r1, r7
 8006406:	4640      	mov	r0, r8
 8006408:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800640c:	4798      	blx	r3
 800640e:	2800      	cmp	r0, #0
 8006410:	f43f aedf 	beq.w	80061d2 <_scanf_float+0x4a>
 8006414:	e6ea      	b.n	80061ec <_scanf_float+0x64>
 8006416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800641a:	463a      	mov	r2, r7
 800641c:	4640      	mov	r0, r8
 800641e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006422:	4798      	blx	r3
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	3b01      	subs	r3, #1
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	e6ec      	b.n	8006206 <_scanf_float+0x7e>
 800642c:	1e6b      	subs	r3, r5, #1
 800642e:	2b06      	cmp	r3, #6
 8006430:	d825      	bhi.n	800647e <_scanf_float+0x2f6>
 8006432:	2d02      	cmp	r5, #2
 8006434:	d836      	bhi.n	80064a4 <_scanf_float+0x31c>
 8006436:	455e      	cmp	r6, fp
 8006438:	f67f aee8 	bls.w	800620c <_scanf_float+0x84>
 800643c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006440:	463a      	mov	r2, r7
 8006442:	4640      	mov	r0, r8
 8006444:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006448:	4798      	blx	r3
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	3b01      	subs	r3, #1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	e7f1      	b.n	8006436 <_scanf_float+0x2ae>
 8006452:	9802      	ldr	r0, [sp, #8]
 8006454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006458:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800645c:	463a      	mov	r2, r7
 800645e:	9002      	str	r0, [sp, #8]
 8006460:	4640      	mov	r0, r8
 8006462:	4798      	blx	r3
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	3b01      	subs	r3, #1
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800646e:	fa5f fa8a 	uxtb.w	sl, sl
 8006472:	f1ba 0f02 	cmp.w	sl, #2
 8006476:	d1ec      	bne.n	8006452 <_scanf_float+0x2ca>
 8006478:	3d03      	subs	r5, #3
 800647a:	b2ed      	uxtb	r5, r5
 800647c:	1b76      	subs	r6, r6, r5
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	05da      	lsls	r2, r3, #23
 8006482:	d52f      	bpl.n	80064e4 <_scanf_float+0x35c>
 8006484:	055b      	lsls	r3, r3, #21
 8006486:	d510      	bpl.n	80064aa <_scanf_float+0x322>
 8006488:	455e      	cmp	r6, fp
 800648a:	f67f aebf 	bls.w	800620c <_scanf_float+0x84>
 800648e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006492:	463a      	mov	r2, r7
 8006494:	4640      	mov	r0, r8
 8006496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800649a:	4798      	blx	r3
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	3b01      	subs	r3, #1
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	e7f1      	b.n	8006488 <_scanf_float+0x300>
 80064a4:	46aa      	mov	sl, r5
 80064a6:	9602      	str	r6, [sp, #8]
 80064a8:	e7df      	b.n	800646a <_scanf_float+0x2e2>
 80064aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064ae:	6923      	ldr	r3, [r4, #16]
 80064b0:	2965      	cmp	r1, #101	; 0x65
 80064b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80064b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	d00c      	beq.n	80064d8 <_scanf_float+0x350>
 80064be:	2945      	cmp	r1, #69	; 0x45
 80064c0:	d00a      	beq.n	80064d8 <_scanf_float+0x350>
 80064c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064c6:	463a      	mov	r2, r7
 80064c8:	4640      	mov	r0, r8
 80064ca:	4798      	blx	r3
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	1eb5      	subs	r5, r6, #2
 80064d6:	6123      	str	r3, [r4, #16]
 80064d8:	463a      	mov	r2, r7
 80064da:	4640      	mov	r0, r8
 80064dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064e0:	4798      	blx	r3
 80064e2:	462e      	mov	r6, r5
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	f015 0510 	ands.w	r5, r5, #16
 80064ea:	d155      	bne.n	8006598 <_scanf_float+0x410>
 80064ec:	7035      	strb	r5, [r6, #0]
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f8:	d11b      	bne.n	8006532 <_scanf_float+0x3aa>
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	454b      	cmp	r3, r9
 80064fe:	eba3 0209 	sub.w	r2, r3, r9
 8006502:	d123      	bne.n	800654c <_scanf_float+0x3c4>
 8006504:	2200      	movs	r2, #0
 8006506:	4659      	mov	r1, fp
 8006508:	4640      	mov	r0, r8
 800650a:	f000 fe79 	bl	8007200 <_strtod_r>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	f012 0f02 	tst.w	r2, #2
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	d021      	beq.n	8006562 <_scanf_float+0x3da>
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	9903      	ldr	r1, [sp, #12]
 8006522:	600a      	str	r2, [r1, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	e9c3 6700 	strd	r6, r7, [r3]
 800652a:	68e3      	ldr	r3, [r4, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60e3      	str	r3, [r4, #12]
 8006530:	e66d      	b.n	800620e <_scanf_float+0x86>
 8006532:	9b04      	ldr	r3, [sp, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0e5      	beq.n	8006504 <_scanf_float+0x37c>
 8006538:	9905      	ldr	r1, [sp, #20]
 800653a:	230a      	movs	r3, #10
 800653c:	462a      	mov	r2, r5
 800653e:	4640      	mov	r0, r8
 8006540:	3101      	adds	r1, #1
 8006542:	f000 fedf 	bl	8007304 <_strtol_r>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	9e05      	ldr	r6, [sp, #20]
 800654a:	1ac2      	subs	r2, r0, r3
 800654c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006550:	429e      	cmp	r6, r3
 8006552:	bf28      	it	cs
 8006554:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006558:	4630      	mov	r0, r6
 800655a:	4910      	ldr	r1, [pc, #64]	; (800659c <_scanf_float+0x414>)
 800655c:	f000 f826 	bl	80065ac <siprintf>
 8006560:	e7d0      	b.n	8006504 <_scanf_float+0x37c>
 8006562:	f012 0f04 	tst.w	r2, #4
 8006566:	f103 0204 	add.w	r2, r3, #4
 800656a:	d1d9      	bne.n	8006520 <_scanf_float+0x398>
 800656c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006570:	f8cc 2000 	str.w	r2, [ip]
 8006574:	f8d3 8000 	ldr.w	r8, [r3]
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	f7fa fa46 	bl	8000a0c <__aeabi_dcmpun>
 8006580:	b128      	cbz	r0, 800658e <_scanf_float+0x406>
 8006582:	4807      	ldr	r0, [pc, #28]	; (80065a0 <_scanf_float+0x418>)
 8006584:	f000 f80e 	bl	80065a4 <nanf>
 8006588:	f8c8 0000 	str.w	r0, [r8]
 800658c:	e7cd      	b.n	800652a <_scanf_float+0x3a2>
 800658e:	4630      	mov	r0, r6
 8006590:	4639      	mov	r1, r7
 8006592:	f7fa fa99 	bl	8000ac8 <__aeabi_d2f>
 8006596:	e7f7      	b.n	8006588 <_scanf_float+0x400>
 8006598:	2500      	movs	r5, #0
 800659a:	e638      	b.n	800620e <_scanf_float+0x86>
 800659c:	0800bbb8 	.word	0x0800bbb8
 80065a0:	0800bfc0 	.word	0x0800bfc0

080065a4 <nanf>:
 80065a4:	4800      	ldr	r0, [pc, #0]	; (80065a8 <nanf+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	7fc00000 	.word	0x7fc00000

080065ac <siprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065b2:	b500      	push	{lr}
 80065b4:	b09c      	sub	sp, #112	; 0x70
 80065b6:	ab1d      	add	r3, sp, #116	; 0x74
 80065b8:	9002      	str	r0, [sp, #8]
 80065ba:	9006      	str	r0, [sp, #24]
 80065bc:	9107      	str	r1, [sp, #28]
 80065be:	9104      	str	r1, [sp, #16]
 80065c0:	4808      	ldr	r0, [pc, #32]	; (80065e4 <siprintf+0x38>)
 80065c2:	4909      	ldr	r1, [pc, #36]	; (80065e8 <siprintf+0x3c>)
 80065c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	a902      	add	r1, sp, #8
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	f002 feb8 	bl	8009344 <_svfiprintf_r>
 80065d4:	2200      	movs	r2, #0
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	b01c      	add	sp, #112	; 0x70
 80065dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e0:	b003      	add	sp, #12
 80065e2:	4770      	bx	lr
 80065e4:	2000000c 	.word	0x2000000c
 80065e8:	ffff0208 	.word	0xffff0208

080065ec <sulp>:
 80065ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f0:	460f      	mov	r7, r1
 80065f2:	4690      	mov	r8, r2
 80065f4:	f002 fc12 	bl	8008e1c <__ulp>
 80065f8:	4604      	mov	r4, r0
 80065fa:	460d      	mov	r5, r1
 80065fc:	f1b8 0f00 	cmp.w	r8, #0
 8006600:	d011      	beq.n	8006626 <sulp+0x3a>
 8006602:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006606:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800660a:	2b00      	cmp	r3, #0
 800660c:	dd0b      	ble.n	8006626 <sulp+0x3a>
 800660e:	2400      	movs	r4, #0
 8006610:	051b      	lsls	r3, r3, #20
 8006612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006616:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800661a:	4622      	mov	r2, r4
 800661c:	462b      	mov	r3, r5
 800661e:	f7f9 ff5b 	bl	80004d8 <__aeabi_dmul>
 8006622:	4604      	mov	r4, r0
 8006624:	460d      	mov	r5, r1
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006630 <_strtod_l>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	469b      	mov	fp, r3
 8006636:	2300      	movs	r3, #0
 8006638:	b09f      	sub	sp, #124	; 0x7c
 800663a:	931a      	str	r3, [sp, #104]	; 0x68
 800663c:	4b9e      	ldr	r3, [pc, #632]	; (80068b8 <_strtod_l+0x288>)
 800663e:	4682      	mov	sl, r0
 8006640:	681f      	ldr	r7, [r3, #0]
 8006642:	460e      	mov	r6, r1
 8006644:	4638      	mov	r0, r7
 8006646:	9215      	str	r2, [sp, #84]	; 0x54
 8006648:	f7f9 fd82 	bl	8000150 <strlen>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	4604      	mov	r4, r0
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	9619      	str	r6, [sp, #100]	; 0x64
 8006658:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	2a2b      	cmp	r2, #43	; 0x2b
 800665e:	d04c      	beq.n	80066fa <_strtod_l+0xca>
 8006660:	d83a      	bhi.n	80066d8 <_strtod_l+0xa8>
 8006662:	2a0d      	cmp	r2, #13
 8006664:	d833      	bhi.n	80066ce <_strtod_l+0x9e>
 8006666:	2a08      	cmp	r2, #8
 8006668:	d833      	bhi.n	80066d2 <_strtod_l+0xa2>
 800666a:	2a00      	cmp	r2, #0
 800666c:	d03d      	beq.n	80066ea <_strtod_l+0xba>
 800666e:	2300      	movs	r3, #0
 8006670:	930a      	str	r3, [sp, #40]	; 0x28
 8006672:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006674:	782b      	ldrb	r3, [r5, #0]
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	f040 80aa 	bne.w	80067d0 <_strtod_l+0x1a0>
 800667c:	786b      	ldrb	r3, [r5, #1]
 800667e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006682:	2b58      	cmp	r3, #88	; 0x58
 8006684:	d166      	bne.n	8006754 <_strtod_l+0x124>
 8006686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006688:	4650      	mov	r0, sl
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	ab1a      	add	r3, sp, #104	; 0x68
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4a8a      	ldr	r2, [pc, #552]	; (80068bc <_strtod_l+0x28c>)
 8006692:	f8cd b008 	str.w	fp, [sp, #8]
 8006696:	ab1b      	add	r3, sp, #108	; 0x6c
 8006698:	a919      	add	r1, sp, #100	; 0x64
 800669a:	f001 fd17 	bl	80080cc <__gethex>
 800669e:	f010 0607 	ands.w	r6, r0, #7
 80066a2:	4604      	mov	r4, r0
 80066a4:	d005      	beq.n	80066b2 <_strtod_l+0x82>
 80066a6:	2e06      	cmp	r6, #6
 80066a8:	d129      	bne.n	80066fe <_strtod_l+0xce>
 80066aa:	2300      	movs	r3, #0
 80066ac:	3501      	adds	r5, #1
 80066ae:	9519      	str	r5, [sp, #100]	; 0x64
 80066b0:	930a      	str	r3, [sp, #40]	; 0x28
 80066b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 858a 	bne.w	80071ce <_strtod_l+0xb9e>
 80066ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066bc:	b1d3      	cbz	r3, 80066f4 <_strtod_l+0xc4>
 80066be:	4642      	mov	r2, r8
 80066c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066c4:	4610      	mov	r0, r2
 80066c6:	4619      	mov	r1, r3
 80066c8:	b01f      	add	sp, #124	; 0x7c
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	2a20      	cmp	r2, #32
 80066d0:	d1cd      	bne.n	800666e <_strtod_l+0x3e>
 80066d2:	3301      	adds	r3, #1
 80066d4:	9319      	str	r3, [sp, #100]	; 0x64
 80066d6:	e7bf      	b.n	8006658 <_strtod_l+0x28>
 80066d8:	2a2d      	cmp	r2, #45	; 0x2d
 80066da:	d1c8      	bne.n	800666e <_strtod_l+0x3e>
 80066dc:	2201      	movs	r2, #1
 80066de:	920a      	str	r2, [sp, #40]	; 0x28
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	9219      	str	r2, [sp, #100]	; 0x64
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1c3      	bne.n	8006672 <_strtod_l+0x42>
 80066ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ec:	9619      	str	r6, [sp, #100]	; 0x64
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 856b 	bne.w	80071ca <_strtod_l+0xb9a>
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	e7e4      	b.n	80066c4 <_strtod_l+0x94>
 80066fa:	2200      	movs	r2, #0
 80066fc:	e7ef      	b.n	80066de <_strtod_l+0xae>
 80066fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006700:	b13a      	cbz	r2, 8006712 <_strtod_l+0xe2>
 8006702:	2135      	movs	r1, #53	; 0x35
 8006704:	a81c      	add	r0, sp, #112	; 0x70
 8006706:	f002 fc8d 	bl	8009024 <__copybits>
 800670a:	4650      	mov	r0, sl
 800670c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800670e:	f002 f855 	bl	80087bc <_Bfree>
 8006712:	3e01      	subs	r6, #1
 8006714:	2e04      	cmp	r6, #4
 8006716:	d806      	bhi.n	8006726 <_strtod_l+0xf6>
 8006718:	e8df f006 	tbb	[pc, r6]
 800671c:	1714030a 	.word	0x1714030a
 8006720:	0a          	.byte	0x0a
 8006721:	00          	.byte	0x00
 8006722:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006726:	0721      	lsls	r1, r4, #28
 8006728:	d5c3      	bpl.n	80066b2 <_strtod_l+0x82>
 800672a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800672e:	e7c0      	b.n	80066b2 <_strtod_l+0x82>
 8006730:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006732:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800673a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800673e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006742:	e7f0      	b.n	8006726 <_strtod_l+0xf6>
 8006744:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80068c0 <_strtod_l+0x290>
 8006748:	e7ed      	b.n	8006726 <_strtod_l+0xf6>
 800674a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800674e:	f04f 38ff 	mov.w	r8, #4294967295
 8006752:	e7e8      	b.n	8006726 <_strtod_l+0xf6>
 8006754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	9219      	str	r2, [sp, #100]	; 0x64
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b30      	cmp	r3, #48	; 0x30
 800675e:	d0f9      	beq.n	8006754 <_strtod_l+0x124>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0a6      	beq.n	80066b2 <_strtod_l+0x82>
 8006764:	2301      	movs	r3, #1
 8006766:	9307      	str	r3, [sp, #28]
 8006768:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800676a:	220a      	movs	r2, #10
 800676c:	9308      	str	r3, [sp, #32]
 800676e:	2300      	movs	r3, #0
 8006770:	469b      	mov	fp, r3
 8006772:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006776:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006778:	7805      	ldrb	r5, [r0, #0]
 800677a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800677e:	b2d9      	uxtb	r1, r3
 8006780:	2909      	cmp	r1, #9
 8006782:	d927      	bls.n	80067d4 <_strtod_l+0x1a4>
 8006784:	4622      	mov	r2, r4
 8006786:	4639      	mov	r1, r7
 8006788:	f002 fef2 	bl	8009570 <strncmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	d033      	beq.n	80067f8 <_strtod_l+0x1c8>
 8006790:	2000      	movs	r0, #0
 8006792:	462a      	mov	r2, r5
 8006794:	465c      	mov	r4, fp
 8006796:	4603      	mov	r3, r0
 8006798:	9004      	str	r0, [sp, #16]
 800679a:	2a65      	cmp	r2, #101	; 0x65
 800679c:	d001      	beq.n	80067a2 <_strtod_l+0x172>
 800679e:	2a45      	cmp	r2, #69	; 0x45
 80067a0:	d114      	bne.n	80067cc <_strtod_l+0x19c>
 80067a2:	b91c      	cbnz	r4, 80067ac <_strtod_l+0x17c>
 80067a4:	9a07      	ldr	r2, [sp, #28]
 80067a6:	4302      	orrs	r2, r0
 80067a8:	d09f      	beq.n	80066ea <_strtod_l+0xba>
 80067aa:	2400      	movs	r4, #0
 80067ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80067ae:	1c72      	adds	r2, r6, #1
 80067b0:	9219      	str	r2, [sp, #100]	; 0x64
 80067b2:	7872      	ldrb	r2, [r6, #1]
 80067b4:	2a2b      	cmp	r2, #43	; 0x2b
 80067b6:	d079      	beq.n	80068ac <_strtod_l+0x27c>
 80067b8:	2a2d      	cmp	r2, #45	; 0x2d
 80067ba:	f000 8083 	beq.w	80068c4 <_strtod_l+0x294>
 80067be:	2700      	movs	r7, #0
 80067c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80067c4:	2909      	cmp	r1, #9
 80067c6:	f240 8083 	bls.w	80068d0 <_strtod_l+0x2a0>
 80067ca:	9619      	str	r6, [sp, #100]	; 0x64
 80067cc:	2500      	movs	r5, #0
 80067ce:	e09f      	b.n	8006910 <_strtod_l+0x2e0>
 80067d0:	2300      	movs	r3, #0
 80067d2:	e7c8      	b.n	8006766 <_strtod_l+0x136>
 80067d4:	f1bb 0f08 	cmp.w	fp, #8
 80067d8:	bfd5      	itete	le
 80067da:	9906      	ldrle	r1, [sp, #24]
 80067dc:	9905      	ldrgt	r1, [sp, #20]
 80067de:	fb02 3301 	mlale	r3, r2, r1, r3
 80067e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80067e6:	f100 0001 	add.w	r0, r0, #1
 80067ea:	bfd4      	ite	le
 80067ec:	9306      	strle	r3, [sp, #24]
 80067ee:	9305      	strgt	r3, [sp, #20]
 80067f0:	f10b 0b01 	add.w	fp, fp, #1
 80067f4:	9019      	str	r0, [sp, #100]	; 0x64
 80067f6:	e7be      	b.n	8006776 <_strtod_l+0x146>
 80067f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067fa:	191a      	adds	r2, r3, r4
 80067fc:	9219      	str	r2, [sp, #100]	; 0x64
 80067fe:	5d1a      	ldrb	r2, [r3, r4]
 8006800:	f1bb 0f00 	cmp.w	fp, #0
 8006804:	d036      	beq.n	8006874 <_strtod_l+0x244>
 8006806:	465c      	mov	r4, fp
 8006808:	9004      	str	r0, [sp, #16]
 800680a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800680e:	2b09      	cmp	r3, #9
 8006810:	d912      	bls.n	8006838 <_strtod_l+0x208>
 8006812:	2301      	movs	r3, #1
 8006814:	e7c1      	b.n	800679a <_strtod_l+0x16a>
 8006816:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006818:	3001      	adds	r0, #1
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	9219      	str	r2, [sp, #100]	; 0x64
 800681e:	785a      	ldrb	r2, [r3, #1]
 8006820:	2a30      	cmp	r2, #48	; 0x30
 8006822:	d0f8      	beq.n	8006816 <_strtod_l+0x1e6>
 8006824:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006828:	2b08      	cmp	r3, #8
 800682a:	f200 84d5 	bhi.w	80071d8 <_strtod_l+0xba8>
 800682e:	9004      	str	r0, [sp, #16]
 8006830:	2000      	movs	r0, #0
 8006832:	4604      	mov	r4, r0
 8006834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	f100 0301 	add.w	r3, r0, #1
 800683e:	d013      	beq.n	8006868 <_strtod_l+0x238>
 8006840:	9904      	ldr	r1, [sp, #16]
 8006842:	1905      	adds	r5, r0, r4
 8006844:	4419      	add	r1, r3
 8006846:	9104      	str	r1, [sp, #16]
 8006848:	4623      	mov	r3, r4
 800684a:	210a      	movs	r1, #10
 800684c:	42ab      	cmp	r3, r5
 800684e:	d113      	bne.n	8006878 <_strtod_l+0x248>
 8006850:	1823      	adds	r3, r4, r0
 8006852:	2b08      	cmp	r3, #8
 8006854:	f104 0401 	add.w	r4, r4, #1
 8006858:	4404      	add	r4, r0
 800685a:	dc1b      	bgt.n	8006894 <_strtod_l+0x264>
 800685c:	230a      	movs	r3, #10
 800685e:	9906      	ldr	r1, [sp, #24]
 8006860:	fb03 2301 	mla	r3, r3, r1, r2
 8006864:	9306      	str	r3, [sp, #24]
 8006866:	2300      	movs	r3, #0
 8006868:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800686a:	4618      	mov	r0, r3
 800686c:	1c51      	adds	r1, r2, #1
 800686e:	9119      	str	r1, [sp, #100]	; 0x64
 8006870:	7852      	ldrb	r2, [r2, #1]
 8006872:	e7ca      	b.n	800680a <_strtod_l+0x1da>
 8006874:	4658      	mov	r0, fp
 8006876:	e7d3      	b.n	8006820 <_strtod_l+0x1f0>
 8006878:	2b08      	cmp	r3, #8
 800687a:	dc04      	bgt.n	8006886 <_strtod_l+0x256>
 800687c:	9f06      	ldr	r7, [sp, #24]
 800687e:	434f      	muls	r7, r1
 8006880:	9706      	str	r7, [sp, #24]
 8006882:	3301      	adds	r3, #1
 8006884:	e7e2      	b.n	800684c <_strtod_l+0x21c>
 8006886:	1c5f      	adds	r7, r3, #1
 8006888:	2f10      	cmp	r7, #16
 800688a:	bfde      	ittt	le
 800688c:	9f05      	ldrle	r7, [sp, #20]
 800688e:	434f      	mulle	r7, r1
 8006890:	9705      	strle	r7, [sp, #20]
 8006892:	e7f6      	b.n	8006882 <_strtod_l+0x252>
 8006894:	2c10      	cmp	r4, #16
 8006896:	bfdf      	itttt	le
 8006898:	230a      	movle	r3, #10
 800689a:	9905      	ldrle	r1, [sp, #20]
 800689c:	fb03 2301 	mlale	r3, r3, r1, r2
 80068a0:	9305      	strle	r3, [sp, #20]
 80068a2:	e7e0      	b.n	8006866 <_strtod_l+0x236>
 80068a4:	2300      	movs	r3, #0
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	2301      	movs	r3, #1
 80068aa:	e77b      	b.n	80067a4 <_strtod_l+0x174>
 80068ac:	2700      	movs	r7, #0
 80068ae:	1cb2      	adds	r2, r6, #2
 80068b0:	9219      	str	r2, [sp, #100]	; 0x64
 80068b2:	78b2      	ldrb	r2, [r6, #2]
 80068b4:	e784      	b.n	80067c0 <_strtod_l+0x190>
 80068b6:	bf00      	nop
 80068b8:	0800be08 	.word	0x0800be08
 80068bc:	0800bbc0 	.word	0x0800bbc0
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	2701      	movs	r7, #1
 80068c6:	e7f2      	b.n	80068ae <_strtod_l+0x27e>
 80068c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068ca:	1c51      	adds	r1, r2, #1
 80068cc:	9119      	str	r1, [sp, #100]	; 0x64
 80068ce:	7852      	ldrb	r2, [r2, #1]
 80068d0:	2a30      	cmp	r2, #48	; 0x30
 80068d2:	d0f9      	beq.n	80068c8 <_strtod_l+0x298>
 80068d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068d8:	2908      	cmp	r1, #8
 80068da:	f63f af77 	bhi.w	80067cc <_strtod_l+0x19c>
 80068de:	f04f 0e0a 	mov.w	lr, #10
 80068e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80068e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068e8:	9209      	str	r2, [sp, #36]	; 0x24
 80068ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068ec:	1c51      	adds	r1, r2, #1
 80068ee:	9119      	str	r1, [sp, #100]	; 0x64
 80068f0:	7852      	ldrb	r2, [r2, #1]
 80068f2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80068f6:	2d09      	cmp	r5, #9
 80068f8:	d935      	bls.n	8006966 <_strtod_l+0x336>
 80068fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80068fc:	1b49      	subs	r1, r1, r5
 80068fe:	2908      	cmp	r1, #8
 8006900:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006904:	dc02      	bgt.n	800690c <_strtod_l+0x2dc>
 8006906:	4565      	cmp	r5, ip
 8006908:	bfa8      	it	ge
 800690a:	4665      	movge	r5, ip
 800690c:	b107      	cbz	r7, 8006910 <_strtod_l+0x2e0>
 800690e:	426d      	negs	r5, r5
 8006910:	2c00      	cmp	r4, #0
 8006912:	d14c      	bne.n	80069ae <_strtod_l+0x37e>
 8006914:	9907      	ldr	r1, [sp, #28]
 8006916:	4301      	orrs	r1, r0
 8006918:	f47f aecb 	bne.w	80066b2 <_strtod_l+0x82>
 800691c:	2b00      	cmp	r3, #0
 800691e:	f47f aee4 	bne.w	80066ea <_strtod_l+0xba>
 8006922:	2a69      	cmp	r2, #105	; 0x69
 8006924:	d026      	beq.n	8006974 <_strtod_l+0x344>
 8006926:	dc23      	bgt.n	8006970 <_strtod_l+0x340>
 8006928:	2a49      	cmp	r2, #73	; 0x49
 800692a:	d023      	beq.n	8006974 <_strtod_l+0x344>
 800692c:	2a4e      	cmp	r2, #78	; 0x4e
 800692e:	f47f aedc 	bne.w	80066ea <_strtod_l+0xba>
 8006932:	499d      	ldr	r1, [pc, #628]	; (8006ba8 <_strtod_l+0x578>)
 8006934:	a819      	add	r0, sp, #100	; 0x64
 8006936:	f001 fe17 	bl	8008568 <__match>
 800693a:	2800      	cmp	r0, #0
 800693c:	f43f aed5 	beq.w	80066ea <_strtod_l+0xba>
 8006940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b28      	cmp	r3, #40	; 0x28
 8006946:	d12c      	bne.n	80069a2 <_strtod_l+0x372>
 8006948:	4998      	ldr	r1, [pc, #608]	; (8006bac <_strtod_l+0x57c>)
 800694a:	aa1c      	add	r2, sp, #112	; 0x70
 800694c:	a819      	add	r0, sp, #100	; 0x64
 800694e:	f001 fe1f 	bl	8008590 <__hexnan>
 8006952:	2805      	cmp	r0, #5
 8006954:	d125      	bne.n	80069a2 <_strtod_l+0x372>
 8006956:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006958:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800695c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006964:	e6a5      	b.n	80066b2 <_strtod_l+0x82>
 8006966:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800696a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800696e:	e7bc      	b.n	80068ea <_strtod_l+0x2ba>
 8006970:	2a6e      	cmp	r2, #110	; 0x6e
 8006972:	e7dc      	b.n	800692e <_strtod_l+0x2fe>
 8006974:	498e      	ldr	r1, [pc, #568]	; (8006bb0 <_strtod_l+0x580>)
 8006976:	a819      	add	r0, sp, #100	; 0x64
 8006978:	f001 fdf6 	bl	8008568 <__match>
 800697c:	2800      	cmp	r0, #0
 800697e:	f43f aeb4 	beq.w	80066ea <_strtod_l+0xba>
 8006982:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006984:	498b      	ldr	r1, [pc, #556]	; (8006bb4 <_strtod_l+0x584>)
 8006986:	3b01      	subs	r3, #1
 8006988:	a819      	add	r0, sp, #100	; 0x64
 800698a:	9319      	str	r3, [sp, #100]	; 0x64
 800698c:	f001 fdec 	bl	8008568 <__match>
 8006990:	b910      	cbnz	r0, 8006998 <_strtod_l+0x368>
 8006992:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006994:	3301      	adds	r3, #1
 8006996:	9319      	str	r3, [sp, #100]	; 0x64
 8006998:	f04f 0800 	mov.w	r8, #0
 800699c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006bb8 <_strtod_l+0x588>
 80069a0:	e687      	b.n	80066b2 <_strtod_l+0x82>
 80069a2:	4886      	ldr	r0, [pc, #536]	; (8006bbc <_strtod_l+0x58c>)
 80069a4:	f002 fdce 	bl	8009544 <nan>
 80069a8:	4680      	mov	r8, r0
 80069aa:	4689      	mov	r9, r1
 80069ac:	e681      	b.n	80066b2 <_strtod_l+0x82>
 80069ae:	9b04      	ldr	r3, [sp, #16]
 80069b0:	f1bb 0f00 	cmp.w	fp, #0
 80069b4:	bf08      	it	eq
 80069b6:	46a3      	moveq	fp, r4
 80069b8:	1aeb      	subs	r3, r5, r3
 80069ba:	2c10      	cmp	r4, #16
 80069bc:	9806      	ldr	r0, [sp, #24]
 80069be:	4626      	mov	r6, r4
 80069c0:	9307      	str	r3, [sp, #28]
 80069c2:	bfa8      	it	ge
 80069c4:	2610      	movge	r6, #16
 80069c6:	f7f9 fd0d 	bl	80003e4 <__aeabi_ui2d>
 80069ca:	2c09      	cmp	r4, #9
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	dd13      	ble.n	80069fa <_strtod_l+0x3ca>
 80069d2:	4b7b      	ldr	r3, [pc, #492]	; (8006bc0 <_strtod_l+0x590>)
 80069d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069dc:	f7f9 fd7c 	bl	80004d8 <__aeabi_dmul>
 80069e0:	4680      	mov	r8, r0
 80069e2:	9805      	ldr	r0, [sp, #20]
 80069e4:	4689      	mov	r9, r1
 80069e6:	f7f9 fcfd 	bl	80003e4 <__aeabi_ui2d>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4640      	mov	r0, r8
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7f9 fbbb 	bl	800016c <__adddf3>
 80069f6:	4680      	mov	r8, r0
 80069f8:	4689      	mov	r9, r1
 80069fa:	2c0f      	cmp	r4, #15
 80069fc:	dc36      	bgt.n	8006a6c <_strtod_l+0x43c>
 80069fe:	9b07      	ldr	r3, [sp, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f43f ae56 	beq.w	80066b2 <_strtod_l+0x82>
 8006a06:	dd22      	ble.n	8006a4e <_strtod_l+0x41e>
 8006a08:	2b16      	cmp	r3, #22
 8006a0a:	dc09      	bgt.n	8006a20 <_strtod_l+0x3f0>
 8006a0c:	496c      	ldr	r1, [pc, #432]	; (8006bc0 <_strtod_l+0x590>)
 8006a0e:	4642      	mov	r2, r8
 8006a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a14:	464b      	mov	r3, r9
 8006a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a1a:	f7f9 fd5d 	bl	80004d8 <__aeabi_dmul>
 8006a1e:	e7c3      	b.n	80069a8 <_strtod_l+0x378>
 8006a20:	9a07      	ldr	r2, [sp, #28]
 8006a22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006a26:	4293      	cmp	r3, r2
 8006a28:	db20      	blt.n	8006a6c <_strtod_l+0x43c>
 8006a2a:	4d65      	ldr	r5, [pc, #404]	; (8006bc0 <_strtod_l+0x590>)
 8006a2c:	f1c4 040f 	rsb	r4, r4, #15
 8006a30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006a34:	4642      	mov	r2, r8
 8006a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	f7f9 fd4c 	bl	80004d8 <__aeabi_dmul>
 8006a40:	9b07      	ldr	r3, [sp, #28]
 8006a42:	1b1c      	subs	r4, r3, r4
 8006a44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006a48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a4c:	e7e5      	b.n	8006a1a <_strtod_l+0x3ea>
 8006a4e:	9b07      	ldr	r3, [sp, #28]
 8006a50:	3316      	adds	r3, #22
 8006a52:	db0b      	blt.n	8006a6c <_strtod_l+0x43c>
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4640      	mov	r0, r8
 8006a58:	1b5d      	subs	r5, r3, r5
 8006a5a:	4b59      	ldr	r3, [pc, #356]	; (8006bc0 <_strtod_l+0x590>)
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a66:	f7f9 fe61 	bl	800072c <__aeabi_ddiv>
 8006a6a:	e79d      	b.n	80069a8 <_strtod_l+0x378>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	1ba6      	subs	r6, r4, r6
 8006a70:	441e      	add	r6, r3
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	dd74      	ble.n	8006b60 <_strtod_l+0x530>
 8006a76:	f016 030f 	ands.w	r3, r6, #15
 8006a7a:	d00a      	beq.n	8006a92 <_strtod_l+0x462>
 8006a7c:	4950      	ldr	r1, [pc, #320]	; (8006bc0 <_strtod_l+0x590>)
 8006a7e:	4642      	mov	r2, r8
 8006a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	f7f9 fd25 	bl	80004d8 <__aeabi_dmul>
 8006a8e:	4680      	mov	r8, r0
 8006a90:	4689      	mov	r9, r1
 8006a92:	f036 060f 	bics.w	r6, r6, #15
 8006a96:	d052      	beq.n	8006b3e <_strtod_l+0x50e>
 8006a98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006a9c:	dd27      	ble.n	8006aee <_strtod_l+0x4be>
 8006a9e:	f04f 0b00 	mov.w	fp, #0
 8006aa2:	f8cd b010 	str.w	fp, [sp, #16]
 8006aa6:	f8cd b020 	str.w	fp, [sp, #32]
 8006aaa:	f8cd b018 	str.w	fp, [sp, #24]
 8006aae:	2322      	movs	r3, #34	; 0x22
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006bb8 <_strtod_l+0x588>
 8006ab8:	f8ca 3000 	str.w	r3, [sl]
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f43f adf7 	beq.w	80066b2 <_strtod_l+0x82>
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ac8:	f001 fe78 	bl	80087bc <_Bfree>
 8006acc:	4650      	mov	r0, sl
 8006ace:	9906      	ldr	r1, [sp, #24]
 8006ad0:	f001 fe74 	bl	80087bc <_Bfree>
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	9904      	ldr	r1, [sp, #16]
 8006ad8:	f001 fe70 	bl	80087bc <_Bfree>
 8006adc:	4650      	mov	r0, sl
 8006ade:	9908      	ldr	r1, [sp, #32]
 8006ae0:	f001 fe6c 	bl	80087bc <_Bfree>
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	f001 fe68 	bl	80087bc <_Bfree>
 8006aec:	e5e1      	b.n	80066b2 <_strtod_l+0x82>
 8006aee:	4b35      	ldr	r3, [pc, #212]	; (8006bc4 <_strtod_l+0x594>)
 8006af0:	4640      	mov	r0, r8
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	2300      	movs	r3, #0
 8006af6:	4649      	mov	r1, r9
 8006af8:	461f      	mov	r7, r3
 8006afa:	1136      	asrs	r6, r6, #4
 8006afc:	2e01      	cmp	r6, #1
 8006afe:	dc21      	bgt.n	8006b44 <_strtod_l+0x514>
 8006b00:	b10b      	cbz	r3, 8006b06 <_strtod_l+0x4d6>
 8006b02:	4680      	mov	r8, r0
 8006b04:	4689      	mov	r9, r1
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <_strtod_l+0x594>)
 8006b08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006b0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b10:	4642      	mov	r2, r8
 8006b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b16:	464b      	mov	r3, r9
 8006b18:	f7f9 fcde 	bl	80004d8 <__aeabi_dmul>
 8006b1c:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <_strtod_l+0x588>)
 8006b1e:	460a      	mov	r2, r1
 8006b20:	400b      	ands	r3, r1
 8006b22:	4929      	ldr	r1, [pc, #164]	; (8006bc8 <_strtod_l+0x598>)
 8006b24:	4680      	mov	r8, r0
 8006b26:	428b      	cmp	r3, r1
 8006b28:	d8b9      	bhi.n	8006a9e <_strtod_l+0x46e>
 8006b2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	bf86      	itte	hi
 8006b32:	f04f 38ff 	movhi.w	r8, #4294967295
 8006b36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006bcc <_strtod_l+0x59c>
 8006b3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9305      	str	r3, [sp, #20]
 8006b42:	e07f      	b.n	8006c44 <_strtod_l+0x614>
 8006b44:	07f2      	lsls	r2, r6, #31
 8006b46:	d505      	bpl.n	8006b54 <_strtod_l+0x524>
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fcc3 	bl	80004d8 <__aeabi_dmul>
 8006b52:	2301      	movs	r3, #1
 8006b54:	9a05      	ldr	r2, [sp, #20]
 8006b56:	3701      	adds	r7, #1
 8006b58:	3208      	adds	r2, #8
 8006b5a:	1076      	asrs	r6, r6, #1
 8006b5c:	9205      	str	r2, [sp, #20]
 8006b5e:	e7cd      	b.n	8006afc <_strtod_l+0x4cc>
 8006b60:	d0ed      	beq.n	8006b3e <_strtod_l+0x50e>
 8006b62:	4276      	negs	r6, r6
 8006b64:	f016 020f 	ands.w	r2, r6, #15
 8006b68:	d00a      	beq.n	8006b80 <_strtod_l+0x550>
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <_strtod_l+0x590>)
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b72:	4649      	mov	r1, r9
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fdd8 	bl	800072c <__aeabi_ddiv>
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	4689      	mov	r9, r1
 8006b80:	1136      	asrs	r6, r6, #4
 8006b82:	d0dc      	beq.n	8006b3e <_strtod_l+0x50e>
 8006b84:	2e1f      	cmp	r6, #31
 8006b86:	dd23      	ble.n	8006bd0 <_strtod_l+0x5a0>
 8006b88:	f04f 0b00 	mov.w	fp, #0
 8006b8c:	f8cd b010 	str.w	fp, [sp, #16]
 8006b90:	f8cd b020 	str.w	fp, [sp, #32]
 8006b94:	f8cd b018 	str.w	fp, [sp, #24]
 8006b98:	2322      	movs	r3, #34	; 0x22
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	f04f 0900 	mov.w	r9, #0
 8006ba2:	f8ca 3000 	str.w	r3, [sl]
 8006ba6:	e789      	b.n	8006abc <_strtod_l+0x48c>
 8006ba8:	0800bb91 	.word	0x0800bb91
 8006bac:	0800bbd4 	.word	0x0800bbd4
 8006bb0:	0800bb89 	.word	0x0800bb89
 8006bb4:	0800bd14 	.word	0x0800bd14
 8006bb8:	7ff00000 	.word	0x7ff00000
 8006bbc:	0800bfc0 	.word	0x0800bfc0
 8006bc0:	0800bea0 	.word	0x0800bea0
 8006bc4:	0800be78 	.word	0x0800be78
 8006bc8:	7ca00000 	.word	0x7ca00000
 8006bcc:	7fefffff 	.word	0x7fefffff
 8006bd0:	f016 0310 	ands.w	r3, r6, #16
 8006bd4:	bf18      	it	ne
 8006bd6:	236a      	movne	r3, #106	; 0x6a
 8006bd8:	4640      	mov	r0, r8
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	4649      	mov	r1, r9
 8006bde:	2300      	movs	r3, #0
 8006be0:	4fb0      	ldr	r7, [pc, #704]	; (8006ea4 <_strtod_l+0x874>)
 8006be2:	07f2      	lsls	r2, r6, #31
 8006be4:	d504      	bpl.n	8006bf0 <_strtod_l+0x5c0>
 8006be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bea:	f7f9 fc75 	bl	80004d8 <__aeabi_dmul>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	1076      	asrs	r6, r6, #1
 8006bf2:	f107 0708 	add.w	r7, r7, #8
 8006bf6:	d1f4      	bne.n	8006be2 <_strtod_l+0x5b2>
 8006bf8:	b10b      	cbz	r3, 8006bfe <_strtod_l+0x5ce>
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	4689      	mov	r9, r1
 8006bfe:	9b05      	ldr	r3, [sp, #20]
 8006c00:	b1c3      	cbz	r3, 8006c34 <_strtod_l+0x604>
 8006c02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006c06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	dd11      	ble.n	8006c34 <_strtod_l+0x604>
 8006c10:	2b1f      	cmp	r3, #31
 8006c12:	f340 8127 	ble.w	8006e64 <_strtod_l+0x834>
 8006c16:	2b34      	cmp	r3, #52	; 0x34
 8006c18:	bfd8      	it	le
 8006c1a:	f04f 33ff 	movle.w	r3, #4294967295
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	bfcf      	iteee	gt
 8006c24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006c28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006c2c:	fa03 f202 	lslle.w	r2, r3, r2
 8006c30:	ea02 0901 	andle.w	r9, r2, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	2300      	movs	r3, #0
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1a1      	bne.n	8006b88 <_strtod_l+0x558>
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	465a      	mov	r2, fp
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	9908      	ldr	r1, [sp, #32]
 8006c50:	f001 fe1c 	bl	800888c <__s2b>
 8006c54:	9008      	str	r0, [sp, #32]
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f af21 	beq.w	8006a9e <_strtod_l+0x46e>
 8006c5c:	9b04      	ldr	r3, [sp, #16]
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	1b5d      	subs	r5, r3, r5
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	f8cd b010 	str.w	fp, [sp, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfb4      	ite	lt
 8006c6e:	462b      	movlt	r3, r5
 8006c70:	2300      	movge	r3, #0
 8006c72:	930e      	str	r3, [sp, #56]	; 0x38
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c7a:	9314      	str	r3, [sp, #80]	; 0x50
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	4650      	mov	r0, sl
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	f001 fd5b 	bl	800873c <_Balloc>
 8006c86:	9006      	str	r0, [sp, #24]
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f43f af10 	beq.w	8006aae <_strtod_l+0x47e>
 8006c8e:	9b08      	ldr	r3, [sp, #32]
 8006c90:	300c      	adds	r0, #12
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	f103 010c 	add.w	r1, r3, #12
 8006c98:	3202      	adds	r2, #2
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	f001 fd40 	bl	8008720 <memcpy>
 8006ca0:	ab1c      	add	r3, sp, #112	; 0x70
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	4650      	mov	r0, sl
 8006cae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006cb2:	f002 f92d 	bl	8008f10 <__d2b>
 8006cb6:	901a      	str	r0, [sp, #104]	; 0x68
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f43f aef8 	beq.w	8006aae <_strtod_l+0x47e>
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	f001 fe7b 	bl	80089bc <__i2b>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	9004      	str	r0, [sp, #16]
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f43f aeef 	beq.w	8006aae <_strtod_l+0x47e>
 8006cd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006cd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	bfab      	itete	ge
 8006cd8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006cda:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006cdc:	18ee      	addge	r6, r5, r3
 8006cde:	1b5c      	sublt	r4, r3, r5
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	bfa8      	it	ge
 8006ce4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006ce6:	eba5 0503 	sub.w	r5, r5, r3
 8006cea:	4415      	add	r5, r2
 8006cec:	4b6e      	ldr	r3, [pc, #440]	; (8006ea8 <_strtod_l+0x878>)
 8006cee:	f105 35ff 	add.w	r5, r5, #4294967295
 8006cf2:	bfb8      	it	lt
 8006cf4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006cf6:	429d      	cmp	r5, r3
 8006cf8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006cfc:	f280 80c4 	bge.w	8006e88 <_strtod_l+0x858>
 8006d00:	1b5b      	subs	r3, r3, r5
 8006d02:	2b1f      	cmp	r3, #31
 8006d04:	f04f 0701 	mov.w	r7, #1
 8006d08:	eba2 0203 	sub.w	r2, r2, r3
 8006d0c:	f300 80b1 	bgt.w	8006e72 <_strtod_l+0x842>
 8006d10:	2500      	movs	r5, #0
 8006d12:	fa07 f303 	lsl.w	r3, r7, r3
 8006d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d18:	18b7      	adds	r7, r6, r2
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	42be      	cmp	r6, r7
 8006d1e:	4414      	add	r4, r2
 8006d20:	441c      	add	r4, r3
 8006d22:	4633      	mov	r3, r6
 8006d24:	bfa8      	it	ge
 8006d26:	463b      	movge	r3, r7
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	bfa8      	it	ge
 8006d2c:	4623      	movge	r3, r4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfc2      	ittt	gt
 8006d32:	1aff      	subgt	r7, r7, r3
 8006d34:	1ae4      	subgt	r4, r4, r3
 8006d36:	1af6      	subgt	r6, r6, r3
 8006d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd17      	ble.n	8006d6e <_strtod_l+0x73e>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4650      	mov	r0, sl
 8006d42:	9904      	ldr	r1, [sp, #16]
 8006d44:	f001 fef8 	bl	8008b38 <__pow5mult>
 8006d48:	9004      	str	r0, [sp, #16]
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aeaf 	beq.w	8006aae <_strtod_l+0x47e>
 8006d50:	4601      	mov	r1, r0
 8006d52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d54:	4650      	mov	r0, sl
 8006d56:	f001 fe47 	bl	80089e8 <__multiply>
 8006d5a:	9009      	str	r0, [sp, #36]	; 0x24
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f aea6 	beq.w	8006aae <_strtod_l+0x47e>
 8006d62:	4650      	mov	r0, sl
 8006d64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d66:	f001 fd29 	bl	80087bc <_Bfree>
 8006d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	f300 808e 	bgt.w	8006e90 <_strtod_l+0x860>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd08      	ble.n	8006d8c <_strtod_l+0x75c>
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d7e:	9906      	ldr	r1, [sp, #24]
 8006d80:	f001 feda 	bl	8008b38 <__pow5mult>
 8006d84:	9006      	str	r0, [sp, #24]
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f ae91 	beq.w	8006aae <_strtod_l+0x47e>
 8006d8c:	2c00      	cmp	r4, #0
 8006d8e:	dd08      	ble.n	8006da2 <_strtod_l+0x772>
 8006d90:	4622      	mov	r2, r4
 8006d92:	4650      	mov	r0, sl
 8006d94:	9906      	ldr	r1, [sp, #24]
 8006d96:	f001 ff29 	bl	8008bec <__lshift>
 8006d9a:	9006      	str	r0, [sp, #24]
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f43f ae86 	beq.w	8006aae <_strtod_l+0x47e>
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	dd08      	ble.n	8006db8 <_strtod_l+0x788>
 8006da6:	4632      	mov	r2, r6
 8006da8:	4650      	mov	r0, sl
 8006daa:	9904      	ldr	r1, [sp, #16]
 8006dac:	f001 ff1e 	bl	8008bec <__lshift>
 8006db0:	9004      	str	r0, [sp, #16]
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43f ae7b 	beq.w	8006aae <_strtod_l+0x47e>
 8006db8:	4650      	mov	r0, sl
 8006dba:	9a06      	ldr	r2, [sp, #24]
 8006dbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006dbe:	f001 ffa1 	bl	8008d04 <__mdiff>
 8006dc2:	4683      	mov	fp, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f43f ae72 	beq.w	8006aae <_strtod_l+0x47e>
 8006dca:	2400      	movs	r4, #0
 8006dcc:	68c3      	ldr	r3, [r0, #12]
 8006dce:	9904      	ldr	r1, [sp, #16]
 8006dd0:	60c4      	str	r4, [r0, #12]
 8006dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd4:	f001 ff7a 	bl	8008ccc <__mcmp>
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	da6b      	bge.n	8006eb4 <_strtod_l+0x884>
 8006ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dde:	ea53 0308 	orrs.w	r3, r3, r8
 8006de2:	f040 8091 	bne.w	8006f08 <_strtod_l+0x8d8>
 8006de6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 808c 	bne.w	8006f08 <_strtod_l+0x8d8>
 8006df0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	051b      	lsls	r3, r3, #20
 8006df8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006dfc:	f240 8084 	bls.w	8006f08 <_strtod_l+0x8d8>
 8006e00:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e04:	b91b      	cbnz	r3, 8006e0e <_strtod_l+0x7de>
 8006e06:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	dd7c      	ble.n	8006f08 <_strtod_l+0x8d8>
 8006e0e:	4659      	mov	r1, fp
 8006e10:	2201      	movs	r2, #1
 8006e12:	4650      	mov	r0, sl
 8006e14:	f001 feea 	bl	8008bec <__lshift>
 8006e18:	9904      	ldr	r1, [sp, #16]
 8006e1a:	4683      	mov	fp, r0
 8006e1c:	f001 ff56 	bl	8008ccc <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	dd71      	ble.n	8006f08 <_strtod_l+0x8d8>
 8006e24:	9905      	ldr	r1, [sp, #20]
 8006e26:	464b      	mov	r3, r9
 8006e28:	4a20      	ldr	r2, [pc, #128]	; (8006eac <_strtod_l+0x87c>)
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	f000 808c 	beq.w	8006f48 <_strtod_l+0x918>
 8006e30:	ea02 0109 	and.w	r1, r2, r9
 8006e34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e38:	f300 8086 	bgt.w	8006f48 <_strtod_l+0x918>
 8006e3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e40:	f77f aeaa 	ble.w	8006b98 <_strtod_l+0x568>
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <_strtod_l+0x880>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fb44 	bl	80004d8 <__aeabi_dmul>
 8006e50:	460b      	mov	r3, r1
 8006e52:	4303      	orrs	r3, r0
 8006e54:	bf08      	it	eq
 8006e56:	2322      	moveq	r3, #34	; 0x22
 8006e58:	4680      	mov	r8, r0
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	bf08      	it	eq
 8006e5e:	f8ca 3000 	streq.w	r3, [sl]
 8006e62:	e62f      	b.n	8006ac4 <_strtod_l+0x494>
 8006e64:	f04f 32ff 	mov.w	r2, #4294967295
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	ea03 0808 	and.w	r8, r3, r8
 8006e70:	e6e0      	b.n	8006c34 <_strtod_l+0x604>
 8006e72:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006e76:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006e7a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006e7e:	35e2      	adds	r5, #226	; 0xe2
 8006e80:	fa07 f505 	lsl.w	r5, r7, r5
 8006e84:	970f      	str	r7, [sp, #60]	; 0x3c
 8006e86:	e747      	b.n	8006d18 <_strtod_l+0x6e8>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e8e:	e743      	b.n	8006d18 <_strtod_l+0x6e8>
 8006e90:	463a      	mov	r2, r7
 8006e92:	4650      	mov	r0, sl
 8006e94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e96:	f001 fea9 	bl	8008bec <__lshift>
 8006e9a:	901a      	str	r0, [sp, #104]	; 0x68
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f47f af69 	bne.w	8006d74 <_strtod_l+0x744>
 8006ea2:	e604      	b.n	8006aae <_strtod_l+0x47e>
 8006ea4:	0800bbe8 	.word	0x0800bbe8
 8006ea8:	fffffc02 	.word	0xfffffc02
 8006eac:	7ff00000 	.word	0x7ff00000
 8006eb0:	39500000 	.word	0x39500000
 8006eb4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006eb8:	d165      	bne.n	8006f86 <_strtod_l+0x956>
 8006eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ec0:	b35a      	cbz	r2, 8006f1a <_strtod_l+0x8ea>
 8006ec2:	4a99      	ldr	r2, [pc, #612]	; (8007128 <_strtod_l+0xaf8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d12b      	bne.n	8006f20 <_strtod_l+0x8f0>
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	b303      	cbz	r3, 8006f10 <_strtod_l+0x8e0>
 8006ece:	464a      	mov	r2, r9
 8006ed0:	4b96      	ldr	r3, [pc, #600]	; (800712c <_strtod_l+0xafc>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	d81b      	bhi.n	8006f16 <_strtod_l+0x8e6>
 8006ede:	0d1b      	lsrs	r3, r3, #20
 8006ee0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	4299      	cmp	r1, r3
 8006eea:	d119      	bne.n	8006f20 <_strtod_l+0x8f0>
 8006eec:	4b90      	ldr	r3, [pc, #576]	; (8007130 <_strtod_l+0xb00>)
 8006eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d102      	bne.n	8006efa <_strtod_l+0x8ca>
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	f43f adda 	beq.w	8006aae <_strtod_l+0x47e>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	4b8b      	ldr	r3, [pc, #556]	; (800712c <_strtod_l+0xafc>)
 8006f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f02:	401a      	ands	r2, r3
 8006f04:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006f08:	9b05      	ldr	r3, [sp, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d19a      	bne.n	8006e44 <_strtod_l+0x814>
 8006f0e:	e5d9      	b.n	8006ac4 <_strtod_l+0x494>
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	e7e8      	b.n	8006ee8 <_strtod_l+0x8b8>
 8006f16:	4613      	mov	r3, r2
 8006f18:	e7e6      	b.n	8006ee8 <_strtod_l+0x8b8>
 8006f1a:	ea53 0308 	orrs.w	r3, r3, r8
 8006f1e:	d081      	beq.n	8006e24 <_strtod_l+0x7f4>
 8006f20:	b1e5      	cbz	r5, 8006f5c <_strtod_l+0x92c>
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	421d      	tst	r5, r3
 8006f26:	d0ef      	beq.n	8006f08 <_strtod_l+0x8d8>
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	9a05      	ldr	r2, [sp, #20]
 8006f30:	b1c3      	cbz	r3, 8006f64 <_strtod_l+0x934>
 8006f32:	f7ff fb5b 	bl	80065ec <sulp>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f3e:	f7f9 f915 	bl	800016c <__adddf3>
 8006f42:	4680      	mov	r8, r0
 8006f44:	4689      	mov	r9, r1
 8006f46:	e7df      	b.n	8006f08 <_strtod_l+0x8d8>
 8006f48:	4013      	ands	r3, r2
 8006f4a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f4e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006f52:	f04f 38ff 	mov.w	r8, #4294967295
 8006f56:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006f5a:	e7d5      	b.n	8006f08 <_strtod_l+0x8d8>
 8006f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f5e:	ea13 0f08 	tst.w	r3, r8
 8006f62:	e7e0      	b.n	8006f26 <_strtod_l+0x8f6>
 8006f64:	f7ff fb42 	bl	80065ec <sulp>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f70:	f7f9 f8fa 	bl	8000168 <__aeabi_dsub>
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	4680      	mov	r8, r0
 8006f7a:	4689      	mov	r9, r1
 8006f7c:	f7f9 fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d0c1      	beq.n	8006f08 <_strtod_l+0x8d8>
 8006f84:	e608      	b.n	8006b98 <_strtod_l+0x568>
 8006f86:	4658      	mov	r0, fp
 8006f88:	9904      	ldr	r1, [sp, #16]
 8006f8a:	f002 f81d 	bl	8008fc8 <__ratio>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f7f9 fd1a 	bl	80009d0 <__aeabi_dcmple>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d070      	beq.n	8007082 <_strtod_l+0xa52>
 8006fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d042      	beq.n	800702c <_strtod_l+0x9fc>
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	4f62      	ldr	r7, [pc, #392]	; (8007134 <_strtod_l+0xb04>)
 8006faa:	4d62      	ldr	r5, [pc, #392]	; (8007134 <_strtod_l+0xb04>)
 8006fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fb2:	0d1b      	lsrs	r3, r3, #20
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fba:	4b5f      	ldr	r3, [pc, #380]	; (8007138 <_strtod_l+0xb08>)
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	f040 80c3 	bne.w	8007148 <_strtod_l+0xb18>
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f001 ff26 	bl	8008e1c <__ulp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	f7f9 fa7e 	bl	80004d8 <__aeabi_dmul>
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	f7f9 f8c4 	bl	800016c <__adddf3>
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4951      	ldr	r1, [pc, #324]	; (800712c <_strtod_l+0xafc>)
 8006fe8:	4a54      	ldr	r2, [pc, #336]	; (800713c <_strtod_l+0xb0c>)
 8006fea:	4019      	ands	r1, r3
 8006fec:	4291      	cmp	r1, r2
 8006fee:	4680      	mov	r8, r0
 8006ff0:	d95d      	bls.n	80070ae <_strtod_l+0xa7e>
 8006ff2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ff4:	4b4e      	ldr	r3, [pc, #312]	; (8007130 <_strtod_l+0xb00>)
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d103      	bne.n	8007002 <_strtod_l+0x9d2>
 8006ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f43f ad56 	beq.w	8006aae <_strtod_l+0x47e>
 8007002:	f04f 38ff 	mov.w	r8, #4294967295
 8007006:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007130 <_strtod_l+0xb00>
 800700a:	4650      	mov	r0, sl
 800700c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800700e:	f001 fbd5 	bl	80087bc <_Bfree>
 8007012:	4650      	mov	r0, sl
 8007014:	9906      	ldr	r1, [sp, #24]
 8007016:	f001 fbd1 	bl	80087bc <_Bfree>
 800701a:	4650      	mov	r0, sl
 800701c:	9904      	ldr	r1, [sp, #16]
 800701e:	f001 fbcd 	bl	80087bc <_Bfree>
 8007022:	4659      	mov	r1, fp
 8007024:	4650      	mov	r0, sl
 8007026:	f001 fbc9 	bl	80087bc <_Bfree>
 800702a:	e627      	b.n	8006c7c <_strtod_l+0x64c>
 800702c:	f1b8 0f00 	cmp.w	r8, #0
 8007030:	d119      	bne.n	8007066 <_strtod_l+0xa36>
 8007032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007038:	b9e3      	cbnz	r3, 8007074 <_strtod_l+0xa44>
 800703a:	2200      	movs	r2, #0
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	4b3c      	ldr	r3, [pc, #240]	; (8007134 <_strtod_l+0xb04>)
 8007042:	f7f9 fcbb 	bl	80009bc <__aeabi_dcmplt>
 8007046:	b9c8      	cbnz	r0, 800707c <_strtod_l+0xa4c>
 8007048:	2200      	movs	r2, #0
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	4b3c      	ldr	r3, [pc, #240]	; (8007140 <_strtod_l+0xb10>)
 8007050:	f7f9 fa42 	bl	80004d8 <__aeabi_dmul>
 8007054:	4604      	mov	r4, r0
 8007056:	460d      	mov	r5, r1
 8007058:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800705c:	9416      	str	r4, [sp, #88]	; 0x58
 800705e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007060:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007064:	e7a2      	b.n	8006fac <_strtod_l+0x97c>
 8007066:	f1b8 0f01 	cmp.w	r8, #1
 800706a:	d103      	bne.n	8007074 <_strtod_l+0xa44>
 800706c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706e:	2b00      	cmp	r3, #0
 8007070:	f43f ad92 	beq.w	8006b98 <_strtod_l+0x568>
 8007074:	2600      	movs	r6, #0
 8007076:	2400      	movs	r4, #0
 8007078:	4f32      	ldr	r7, [pc, #200]	; (8007144 <_strtod_l+0xb14>)
 800707a:	e796      	b.n	8006faa <_strtod_l+0x97a>
 800707c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800707e:	4d30      	ldr	r5, [pc, #192]	; (8007140 <_strtod_l+0xb10>)
 8007080:	e7ea      	b.n	8007058 <_strtod_l+0xa28>
 8007082:	4b2f      	ldr	r3, [pc, #188]	; (8007140 <_strtod_l+0xb10>)
 8007084:	2200      	movs	r2, #0
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 fa25 	bl	80004d8 <__aeabi_dmul>
 800708e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	b933      	cbnz	r3, 80070a4 <_strtod_l+0xa74>
 8007096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800709a:	9010      	str	r0, [sp, #64]	; 0x40
 800709c:	9311      	str	r3, [sp, #68]	; 0x44
 800709e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80070a2:	e783      	b.n	8006fac <_strtod_l+0x97c>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80070ac:	e7f7      	b.n	800709e <_strtod_l+0xa6e>
 80070ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1a8      	bne.n	800700a <_strtod_l+0x9da>
 80070b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1a1      	bne.n	800700a <_strtod_l+0x9da>
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7fa f847 	bl	800115c <__aeabi_d2lz>
 80070ce:	f7f9 f9d5 	bl	800047c <__aeabi_l2d>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 f845 	bl	8000168 <__aeabi_dsub>
 80070de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070e4:	ea43 0308 	orr.w	r3, r3, r8
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4604      	mov	r4, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	d066      	beq.n	80071be <_strtod_l+0xb8e>
 80070f0:	a309      	add	r3, pc, #36	; (adr r3, 8007118 <_strtod_l+0xae8>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 fc61 	bl	80009bc <__aeabi_dcmplt>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f47f ace2 	bne.w	8006ac4 <_strtod_l+0x494>
 8007100:	a307      	add	r3, pc, #28	; (adr r3, 8007120 <_strtod_l+0xaf0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	4620      	mov	r0, r4
 8007108:	4629      	mov	r1, r5
 800710a:	f7f9 fc75 	bl	80009f8 <__aeabi_dcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f af7b 	beq.w	800700a <_strtod_l+0x9da>
 8007114:	e4d6      	b.n	8006ac4 <_strtod_l+0x494>
 8007116:	bf00      	nop
 8007118:	94a03595 	.word	0x94a03595
 800711c:	3fdfffff 	.word	0x3fdfffff
 8007120:	35afe535 	.word	0x35afe535
 8007124:	3fe00000 	.word	0x3fe00000
 8007128:	000fffff 	.word	0x000fffff
 800712c:	7ff00000 	.word	0x7ff00000
 8007130:	7fefffff 	.word	0x7fefffff
 8007134:	3ff00000 	.word	0x3ff00000
 8007138:	7fe00000 	.word	0x7fe00000
 800713c:	7c9fffff 	.word	0x7c9fffff
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	bff00000 	.word	0xbff00000
 8007148:	9b05      	ldr	r3, [sp, #20]
 800714a:	b313      	cbz	r3, 8007192 <_strtod_l+0xb62>
 800714c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800714e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007152:	d81e      	bhi.n	8007192 <_strtod_l+0xb62>
 8007154:	a326      	add	r3, pc, #152	; (adr r3, 80071f0 <_strtod_l+0xbc0>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 fc37 	bl	80009d0 <__aeabi_dcmple>
 8007162:	b190      	cbz	r0, 800718a <_strtod_l+0xb5a>
 8007164:	4629      	mov	r1, r5
 8007166:	4620      	mov	r0, r4
 8007168:	f7f9 fc8e 	bl	8000a88 <__aeabi_d2uiz>
 800716c:	2801      	cmp	r0, #1
 800716e:	bf38      	it	cc
 8007170:	2001      	movcc	r0, #1
 8007172:	f7f9 f937 	bl	80003e4 <__aeabi_ui2d>
 8007176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	b9d3      	cbnz	r3, 80071b4 <_strtod_l+0xb84>
 800717e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007182:	9012      	str	r0, [sp, #72]	; 0x48
 8007184:	9313      	str	r3, [sp, #76]	; 0x4c
 8007186:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800718a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800718c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007190:	1a9f      	subs	r7, r3, r2
 8007192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007196:	f001 fe41 	bl	8008e1c <__ulp>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 f999 	bl	80004d8 <__aeabi_dmul>
 80071a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071aa:	f7f8 ffdf 	bl	800016c <__adddf3>
 80071ae:	4680      	mov	r8, r0
 80071b0:	4689      	mov	r9, r1
 80071b2:	e77e      	b.n	80070b2 <_strtod_l+0xa82>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80071bc:	e7e3      	b.n	8007186 <_strtod_l+0xb56>
 80071be:	a30e      	add	r3, pc, #56	; (adr r3, 80071f8 <_strtod_l+0xbc8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 fbfa 	bl	80009bc <__aeabi_dcmplt>
 80071c8:	e7a1      	b.n	800710e <_strtod_l+0xade>
 80071ca:	2300      	movs	r3, #0
 80071cc:	930a      	str	r3, [sp, #40]	; 0x28
 80071ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	f7ff ba71 	b.w	80066ba <_strtod_l+0x8a>
 80071d8:	2a65      	cmp	r2, #101	; 0x65
 80071da:	f43f ab63 	beq.w	80068a4 <_strtod_l+0x274>
 80071de:	2a45      	cmp	r2, #69	; 0x45
 80071e0:	f43f ab60 	beq.w	80068a4 <_strtod_l+0x274>
 80071e4:	2301      	movs	r3, #1
 80071e6:	f7ff bb95 	b.w	8006914 <_strtod_l+0x2e4>
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w
 80071f0:	ffc00000 	.word	0xffc00000
 80071f4:	41dfffff 	.word	0x41dfffff
 80071f8:	94a03595 	.word	0x94a03595
 80071fc:	3fcfffff 	.word	0x3fcfffff

08007200 <_strtod_r>:
 8007200:	4b01      	ldr	r3, [pc, #4]	; (8007208 <_strtod_r+0x8>)
 8007202:	f7ff ba15 	b.w	8006630 <_strtod_l>
 8007206:	bf00      	nop
 8007208:	20000074 	.word	0x20000074

0800720c <_strtol_l.constprop.0>:
 800720c:	2b01      	cmp	r3, #1
 800720e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007212:	4680      	mov	r8, r0
 8007214:	d001      	beq.n	800721a <_strtol_l.constprop.0+0xe>
 8007216:	2b24      	cmp	r3, #36	; 0x24
 8007218:	d906      	bls.n	8007228 <_strtol_l.constprop.0+0x1c>
 800721a:	f7fe fb23 	bl	8005864 <__errno>
 800721e:	2316      	movs	r3, #22
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	2000      	movs	r0, #0
 8007224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007228:	460d      	mov	r5, r1
 800722a:	4f35      	ldr	r7, [pc, #212]	; (8007300 <_strtol_l.constprop.0+0xf4>)
 800722c:	4628      	mov	r0, r5
 800722e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007232:	5de6      	ldrb	r6, [r4, r7]
 8007234:	f016 0608 	ands.w	r6, r6, #8
 8007238:	d1f8      	bne.n	800722c <_strtol_l.constprop.0+0x20>
 800723a:	2c2d      	cmp	r4, #45	; 0x2d
 800723c:	d12f      	bne.n	800729e <_strtol_l.constprop.0+0x92>
 800723e:	2601      	movs	r6, #1
 8007240:	782c      	ldrb	r4, [r5, #0]
 8007242:	1c85      	adds	r5, r0, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d057      	beq.n	80072f8 <_strtol_l.constprop.0+0xec>
 8007248:	2b10      	cmp	r3, #16
 800724a:	d109      	bne.n	8007260 <_strtol_l.constprop.0+0x54>
 800724c:	2c30      	cmp	r4, #48	; 0x30
 800724e:	d107      	bne.n	8007260 <_strtol_l.constprop.0+0x54>
 8007250:	7828      	ldrb	r0, [r5, #0]
 8007252:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007256:	2858      	cmp	r0, #88	; 0x58
 8007258:	d149      	bne.n	80072ee <_strtol_l.constprop.0+0xe2>
 800725a:	2310      	movs	r3, #16
 800725c:	786c      	ldrb	r4, [r5, #1]
 800725e:	3502      	adds	r5, #2
 8007260:	2700      	movs	r7, #0
 8007262:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007266:	f10e 3eff 	add.w	lr, lr, #4294967295
 800726a:	fbbe f9f3 	udiv	r9, lr, r3
 800726e:	4638      	mov	r0, r7
 8007270:	fb03 ea19 	mls	sl, r3, r9, lr
 8007274:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007278:	f1bc 0f09 	cmp.w	ip, #9
 800727c:	d814      	bhi.n	80072a8 <_strtol_l.constprop.0+0x9c>
 800727e:	4664      	mov	r4, ip
 8007280:	42a3      	cmp	r3, r4
 8007282:	dd22      	ble.n	80072ca <_strtol_l.constprop.0+0xbe>
 8007284:	2f00      	cmp	r7, #0
 8007286:	db1d      	blt.n	80072c4 <_strtol_l.constprop.0+0xb8>
 8007288:	4581      	cmp	r9, r0
 800728a:	d31b      	bcc.n	80072c4 <_strtol_l.constprop.0+0xb8>
 800728c:	d101      	bne.n	8007292 <_strtol_l.constprop.0+0x86>
 800728e:	45a2      	cmp	sl, r4
 8007290:	db18      	blt.n	80072c4 <_strtol_l.constprop.0+0xb8>
 8007292:	2701      	movs	r7, #1
 8007294:	fb00 4003 	mla	r0, r0, r3, r4
 8007298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800729c:	e7ea      	b.n	8007274 <_strtol_l.constprop.0+0x68>
 800729e:	2c2b      	cmp	r4, #43	; 0x2b
 80072a0:	bf04      	itt	eq
 80072a2:	782c      	ldrbeq	r4, [r5, #0]
 80072a4:	1c85      	addeq	r5, r0, #2
 80072a6:	e7cd      	b.n	8007244 <_strtol_l.constprop.0+0x38>
 80072a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80072ac:	f1bc 0f19 	cmp.w	ip, #25
 80072b0:	d801      	bhi.n	80072b6 <_strtol_l.constprop.0+0xaa>
 80072b2:	3c37      	subs	r4, #55	; 0x37
 80072b4:	e7e4      	b.n	8007280 <_strtol_l.constprop.0+0x74>
 80072b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80072ba:	f1bc 0f19 	cmp.w	ip, #25
 80072be:	d804      	bhi.n	80072ca <_strtol_l.constprop.0+0xbe>
 80072c0:	3c57      	subs	r4, #87	; 0x57
 80072c2:	e7dd      	b.n	8007280 <_strtol_l.constprop.0+0x74>
 80072c4:	f04f 37ff 	mov.w	r7, #4294967295
 80072c8:	e7e6      	b.n	8007298 <_strtol_l.constprop.0+0x8c>
 80072ca:	2f00      	cmp	r7, #0
 80072cc:	da07      	bge.n	80072de <_strtol_l.constprop.0+0xd2>
 80072ce:	2322      	movs	r3, #34	; 0x22
 80072d0:	4670      	mov	r0, lr
 80072d2:	f8c8 3000 	str.w	r3, [r8]
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d0a4      	beq.n	8007224 <_strtol_l.constprop.0+0x18>
 80072da:	1e69      	subs	r1, r5, #1
 80072dc:	e005      	b.n	80072ea <_strtol_l.constprop.0+0xde>
 80072de:	b106      	cbz	r6, 80072e2 <_strtol_l.constprop.0+0xd6>
 80072e0:	4240      	negs	r0, r0
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d09e      	beq.n	8007224 <_strtol_l.constprop.0+0x18>
 80072e6:	2f00      	cmp	r7, #0
 80072e8:	d1f7      	bne.n	80072da <_strtol_l.constprop.0+0xce>
 80072ea:	6011      	str	r1, [r2, #0]
 80072ec:	e79a      	b.n	8007224 <_strtol_l.constprop.0+0x18>
 80072ee:	2430      	movs	r4, #48	; 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1b5      	bne.n	8007260 <_strtol_l.constprop.0+0x54>
 80072f4:	2308      	movs	r3, #8
 80072f6:	e7b3      	b.n	8007260 <_strtol_l.constprop.0+0x54>
 80072f8:	2c30      	cmp	r4, #48	; 0x30
 80072fa:	d0a9      	beq.n	8007250 <_strtol_l.constprop.0+0x44>
 80072fc:	230a      	movs	r3, #10
 80072fe:	e7af      	b.n	8007260 <_strtol_l.constprop.0+0x54>
 8007300:	0800bc11 	.word	0x0800bc11

08007304 <_strtol_r>:
 8007304:	f7ff bf82 	b.w	800720c <_strtol_l.constprop.0>

08007308 <quorem>:
 8007308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	6903      	ldr	r3, [r0, #16]
 800730e:	690c      	ldr	r4, [r1, #16]
 8007310:	4607      	mov	r7, r0
 8007312:	42a3      	cmp	r3, r4
 8007314:	f2c0 8082 	blt.w	800741c <quorem+0x114>
 8007318:	3c01      	subs	r4, #1
 800731a:	f100 0514 	add.w	r5, r0, #20
 800731e:	f101 0814 	add.w	r8, r1, #20
 8007322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800732c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007330:	3301      	adds	r3, #1
 8007332:	429a      	cmp	r2, r3
 8007334:	fbb2 f6f3 	udiv	r6, r2, r3
 8007338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800733c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007340:	d331      	bcc.n	80073a6 <quorem+0x9e>
 8007342:	f04f 0e00 	mov.w	lr, #0
 8007346:	4640      	mov	r0, r8
 8007348:	46ac      	mov	ip, r5
 800734a:	46f2      	mov	sl, lr
 800734c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007350:	b293      	uxth	r3, r2
 8007352:	fb06 e303 	mla	r3, r6, r3, lr
 8007356:	0c12      	lsrs	r2, r2, #16
 8007358:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800735c:	b29b      	uxth	r3, r3
 800735e:	fb06 e202 	mla	r2, r6, r2, lr
 8007362:	ebaa 0303 	sub.w	r3, sl, r3
 8007366:	f8dc a000 	ldr.w	sl, [ip]
 800736a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800736e:	fa1f fa8a 	uxth.w	sl, sl
 8007372:	4453      	add	r3, sl
 8007374:	f8dc a000 	ldr.w	sl, [ip]
 8007378:	b292      	uxth	r2, r2
 800737a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800737e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007388:	4581      	cmp	r9, r0
 800738a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800738e:	f84c 3b04 	str.w	r3, [ip], #4
 8007392:	d2db      	bcs.n	800734c <quorem+0x44>
 8007394:	f855 300b 	ldr.w	r3, [r5, fp]
 8007398:	b92b      	cbnz	r3, 80073a6 <quorem+0x9e>
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	3b04      	subs	r3, #4
 800739e:	429d      	cmp	r5, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	d32f      	bcc.n	8007404 <quorem+0xfc>
 80073a4:	613c      	str	r4, [r7, #16]
 80073a6:	4638      	mov	r0, r7
 80073a8:	f001 fc90 	bl	8008ccc <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	db25      	blt.n	80073fc <quorem+0xf4>
 80073b0:	4628      	mov	r0, r5
 80073b2:	f04f 0c00 	mov.w	ip, #0
 80073b6:	3601      	adds	r6, #1
 80073b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80073bc:	f8d0 e000 	ldr.w	lr, [r0]
 80073c0:	b28b      	uxth	r3, r1
 80073c2:	ebac 0303 	sub.w	r3, ip, r3
 80073c6:	fa1f f28e 	uxth.w	r2, lr
 80073ca:	4413      	add	r3, r2
 80073cc:	0c0a      	lsrs	r2, r1, #16
 80073ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073dc:	45c1      	cmp	r9, r8
 80073de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073e2:	f840 3b04 	str.w	r3, [r0], #4
 80073e6:	d2e7      	bcs.n	80073b8 <quorem+0xb0>
 80073e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f0:	b922      	cbnz	r2, 80073fc <quorem+0xf4>
 80073f2:	3b04      	subs	r3, #4
 80073f4:	429d      	cmp	r5, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	d30a      	bcc.n	8007410 <quorem+0x108>
 80073fa:	613c      	str	r4, [r7, #16]
 80073fc:	4630      	mov	r0, r6
 80073fe:	b003      	add	sp, #12
 8007400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	3b04      	subs	r3, #4
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1cb      	bne.n	80073a4 <quorem+0x9c>
 800740c:	3c01      	subs	r4, #1
 800740e:	e7c6      	b.n	800739e <quorem+0x96>
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	3b04      	subs	r3, #4
 8007414:	2a00      	cmp	r2, #0
 8007416:	d1f0      	bne.n	80073fa <quorem+0xf2>
 8007418:	3c01      	subs	r4, #1
 800741a:	e7eb      	b.n	80073f4 <quorem+0xec>
 800741c:	2000      	movs	r0, #0
 800741e:	e7ee      	b.n	80073fe <quorem+0xf6>

08007420 <_dtoa_r>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	4616      	mov	r6, r2
 8007426:	461f      	mov	r7, r3
 8007428:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800742a:	b099      	sub	sp, #100	; 0x64
 800742c:	4605      	mov	r5, r0
 800742e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007432:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007436:	b974      	cbnz	r4, 8007456 <_dtoa_r+0x36>
 8007438:	2010      	movs	r0, #16
 800743a:	f001 f949 	bl	80086d0 <malloc>
 800743e:	4602      	mov	r2, r0
 8007440:	6268      	str	r0, [r5, #36]	; 0x24
 8007442:	b920      	cbnz	r0, 800744e <_dtoa_r+0x2e>
 8007444:	21ea      	movs	r1, #234	; 0xea
 8007446:	4ba8      	ldr	r3, [pc, #672]	; (80076e8 <_dtoa_r+0x2c8>)
 8007448:	48a8      	ldr	r0, [pc, #672]	; (80076ec <_dtoa_r+0x2cc>)
 800744a:	f002 f8b3 	bl	80095b4 <__assert_func>
 800744e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007452:	6004      	str	r4, [r0, #0]
 8007454:	60c4      	str	r4, [r0, #12]
 8007456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007458:	6819      	ldr	r1, [r3, #0]
 800745a:	b151      	cbz	r1, 8007472 <_dtoa_r+0x52>
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	2301      	movs	r3, #1
 8007460:	4093      	lsls	r3, r2
 8007462:	604a      	str	r2, [r1, #4]
 8007464:	608b      	str	r3, [r1, #8]
 8007466:	4628      	mov	r0, r5
 8007468:	f001 f9a8 	bl	80087bc <_Bfree>
 800746c:	2200      	movs	r2, #0
 800746e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	1e3b      	subs	r3, r7, #0
 8007474:	bfaf      	iteee	ge
 8007476:	2300      	movge	r3, #0
 8007478:	2201      	movlt	r2, #1
 800747a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800747e:	9305      	strlt	r3, [sp, #20]
 8007480:	bfa8      	it	ge
 8007482:	f8c8 3000 	strge.w	r3, [r8]
 8007486:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800748a:	4b99      	ldr	r3, [pc, #612]	; (80076f0 <_dtoa_r+0x2d0>)
 800748c:	bfb8      	it	lt
 800748e:	f8c8 2000 	strlt.w	r2, [r8]
 8007492:	ea33 0309 	bics.w	r3, r3, r9
 8007496:	d119      	bne.n	80074cc <_dtoa_r+0xac>
 8007498:	f242 730f 	movw	r3, #9999	; 0x270f
 800749c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074a4:	4333      	orrs	r3, r6
 80074a6:	f000 857f 	beq.w	8007fa8 <_dtoa_r+0xb88>
 80074aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ac:	b953      	cbnz	r3, 80074c4 <_dtoa_r+0xa4>
 80074ae:	4b91      	ldr	r3, [pc, #580]	; (80076f4 <_dtoa_r+0x2d4>)
 80074b0:	e022      	b.n	80074f8 <_dtoa_r+0xd8>
 80074b2:	4b91      	ldr	r3, [pc, #580]	; (80076f8 <_dtoa_r+0x2d8>)
 80074b4:	9303      	str	r3, [sp, #12]
 80074b6:	3308      	adds	r3, #8
 80074b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	9803      	ldr	r0, [sp, #12]
 80074be:	b019      	add	sp, #100	; 0x64
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4b8b      	ldr	r3, [pc, #556]	; (80076f4 <_dtoa_r+0x2d4>)
 80074c6:	9303      	str	r3, [sp, #12]
 80074c8:	3303      	adds	r3, #3
 80074ca:	e7f5      	b.n	80074b8 <_dtoa_r+0x98>
 80074cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80074d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074d8:	2200      	movs	r2, #0
 80074da:	2300      	movs	r3, #0
 80074dc:	f7f9 fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80074e0:	4680      	mov	r8, r0
 80074e2:	b158      	cbz	r0, 80074fc <_dtoa_r+0xdc>
 80074e4:	2301      	movs	r3, #1
 80074e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8558 	beq.w	8007fa2 <_dtoa_r+0xb82>
 80074f2:	4882      	ldr	r0, [pc, #520]	; (80076fc <_dtoa_r+0x2dc>)
 80074f4:	6018      	str	r0, [r3, #0]
 80074f6:	1e43      	subs	r3, r0, #1
 80074f8:	9303      	str	r3, [sp, #12]
 80074fa:	e7df      	b.n	80074bc <_dtoa_r+0x9c>
 80074fc:	ab16      	add	r3, sp, #88	; 0x58
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	ab17      	add	r3, sp, #92	; 0x5c
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4628      	mov	r0, r5
 8007506:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800750a:	f001 fd01 	bl	8008f10 <__d2b>
 800750e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007512:	4683      	mov	fp, r0
 8007514:	2c00      	cmp	r4, #0
 8007516:	d07f      	beq.n	8007618 <_dtoa_r+0x1f8>
 8007518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800751c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800751e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007526:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800752a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800752e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007532:	2200      	movs	r2, #0
 8007534:	4b72      	ldr	r3, [pc, #456]	; (8007700 <_dtoa_r+0x2e0>)
 8007536:	f7f8 fe17 	bl	8000168 <__aeabi_dsub>
 800753a:	a365      	add	r3, pc, #404	; (adr r3, 80076d0 <_dtoa_r+0x2b0>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f7f8 ffca 	bl	80004d8 <__aeabi_dmul>
 8007544:	a364      	add	r3, pc, #400	; (adr r3, 80076d8 <_dtoa_r+0x2b8>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f8 fe0f 	bl	800016c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	4620      	mov	r0, r4
 8007552:	460f      	mov	r7, r1
 8007554:	f7f8 ff56 	bl	8000404 <__aeabi_i2d>
 8007558:	a361      	add	r3, pc, #388	; (adr r3, 80076e0 <_dtoa_r+0x2c0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 ffbb 	bl	80004d8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f8 fdff 	bl	800016c <__adddf3>
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	f7f9 fa61 	bl	8000a38 <__aeabi_d2iz>
 8007576:	2200      	movs	r2, #0
 8007578:	4682      	mov	sl, r0
 800757a:	2300      	movs	r3, #0
 800757c:	4630      	mov	r0, r6
 800757e:	4639      	mov	r1, r7
 8007580:	f7f9 fa1c 	bl	80009bc <__aeabi_dcmplt>
 8007584:	b148      	cbz	r0, 800759a <_dtoa_r+0x17a>
 8007586:	4650      	mov	r0, sl
 8007588:	f7f8 ff3c 	bl	8000404 <__aeabi_i2d>
 800758c:	4632      	mov	r2, r6
 800758e:	463b      	mov	r3, r7
 8007590:	f7f9 fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007594:	b908      	cbnz	r0, 800759a <_dtoa_r+0x17a>
 8007596:	f10a 3aff 	add.w	sl, sl, #4294967295
 800759a:	f1ba 0f16 	cmp.w	sl, #22
 800759e:	d858      	bhi.n	8007652 <_dtoa_r+0x232>
 80075a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075a4:	4b57      	ldr	r3, [pc, #348]	; (8007704 <_dtoa_r+0x2e4>)
 80075a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f9 fa05 	bl	80009bc <__aeabi_dcmplt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d04f      	beq.n	8007656 <_dtoa_r+0x236>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80075be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075c0:	1b1c      	subs	r4, r3, r4
 80075c2:	1e63      	subs	r3, r4, #1
 80075c4:	9309      	str	r3, [sp, #36]	; 0x24
 80075c6:	bf49      	itett	mi
 80075c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80075cc:	2300      	movpl	r3, #0
 80075ce:	9306      	strmi	r3, [sp, #24]
 80075d0:	2300      	movmi	r3, #0
 80075d2:	bf54      	ite	pl
 80075d4:	9306      	strpl	r3, [sp, #24]
 80075d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80075d8:	f1ba 0f00 	cmp.w	sl, #0
 80075dc:	db3d      	blt.n	800765a <_dtoa_r+0x23a>
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80075e4:	4453      	add	r3, sl
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
 80075e8:	2300      	movs	r3, #0
 80075ea:	930a      	str	r3, [sp, #40]	; 0x28
 80075ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	f200 808c 	bhi.w	800770c <_dtoa_r+0x2ec>
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	bfc4      	itt	gt
 80075f8:	3b04      	subgt	r3, #4
 80075fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80075fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075fe:	bfc8      	it	gt
 8007600:	2400      	movgt	r4, #0
 8007602:	f1a3 0302 	sub.w	r3, r3, #2
 8007606:	bfd8      	it	le
 8007608:	2401      	movle	r4, #1
 800760a:	2b03      	cmp	r3, #3
 800760c:	f200 808a 	bhi.w	8007724 <_dtoa_r+0x304>
 8007610:	e8df f003 	tbb	[pc, r3]
 8007614:	5b4d4f2d 	.word	0x5b4d4f2d
 8007618:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800761c:	441c      	add	r4, r3
 800761e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007622:	2b20      	cmp	r3, #32
 8007624:	bfc3      	ittte	gt
 8007626:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800762a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800762e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007632:	f1c3 0320 	rsble	r3, r3, #32
 8007636:	bfc6      	itte	gt
 8007638:	fa26 f000 	lsrgt.w	r0, r6, r0
 800763c:	4318      	orrgt	r0, r3
 800763e:	fa06 f003 	lslle.w	r0, r6, r3
 8007642:	f7f8 fecf 	bl	80003e4 <__aeabi_ui2d>
 8007646:	2301      	movs	r3, #1
 8007648:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800764c:	3c01      	subs	r4, #1
 800764e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007650:	e76f      	b.n	8007532 <_dtoa_r+0x112>
 8007652:	2301      	movs	r3, #1
 8007654:	e7b2      	b.n	80075bc <_dtoa_r+0x19c>
 8007656:	900f      	str	r0, [sp, #60]	; 0x3c
 8007658:	e7b1      	b.n	80075be <_dtoa_r+0x19e>
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	eba3 030a 	sub.w	r3, r3, sl
 8007660:	9306      	str	r3, [sp, #24]
 8007662:	f1ca 0300 	rsb	r3, sl, #0
 8007666:	930a      	str	r3, [sp, #40]	; 0x28
 8007668:	2300      	movs	r3, #0
 800766a:	930e      	str	r3, [sp, #56]	; 0x38
 800766c:	e7be      	b.n	80075ec <_dtoa_r+0x1cc>
 800766e:	2300      	movs	r3, #0
 8007670:	930b      	str	r3, [sp, #44]	; 0x2c
 8007672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007674:	2b00      	cmp	r3, #0
 8007676:	dc58      	bgt.n	800772a <_dtoa_r+0x30a>
 8007678:	f04f 0901 	mov.w	r9, #1
 800767c:	464b      	mov	r3, r9
 800767e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007682:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007686:	2200      	movs	r2, #0
 8007688:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800768a:	6042      	str	r2, [r0, #4]
 800768c:	2204      	movs	r2, #4
 800768e:	f102 0614 	add.w	r6, r2, #20
 8007692:	429e      	cmp	r6, r3
 8007694:	6841      	ldr	r1, [r0, #4]
 8007696:	d94e      	bls.n	8007736 <_dtoa_r+0x316>
 8007698:	4628      	mov	r0, r5
 800769a:	f001 f84f 	bl	800873c <_Balloc>
 800769e:	9003      	str	r0, [sp, #12]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d14c      	bne.n	800773e <_dtoa_r+0x31e>
 80076a4:	4602      	mov	r2, r0
 80076a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076aa:	4b17      	ldr	r3, [pc, #92]	; (8007708 <_dtoa_r+0x2e8>)
 80076ac:	e6cc      	b.n	8007448 <_dtoa_r+0x28>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7de      	b.n	8007670 <_dtoa_r+0x250>
 80076b2:	2300      	movs	r3, #0
 80076b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076b8:	eb0a 0903 	add.w	r9, sl, r3
 80076bc:	f109 0301 	add.w	r3, r9, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	9308      	str	r3, [sp, #32]
 80076c4:	bfb8      	it	lt
 80076c6:	2301      	movlt	r3, #1
 80076c8:	e7dd      	b.n	8007686 <_dtoa_r+0x266>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7f2      	b.n	80076b4 <_dtoa_r+0x294>
 80076ce:	bf00      	nop
 80076d0:	636f4361 	.word	0x636f4361
 80076d4:	3fd287a7 	.word	0x3fd287a7
 80076d8:	8b60c8b3 	.word	0x8b60c8b3
 80076dc:	3fc68a28 	.word	0x3fc68a28
 80076e0:	509f79fb 	.word	0x509f79fb
 80076e4:	3fd34413 	.word	0x3fd34413
 80076e8:	0800bd1e 	.word	0x0800bd1e
 80076ec:	0800bd35 	.word	0x0800bd35
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	0800bd1a 	.word	0x0800bd1a
 80076f8:	0800bd11 	.word	0x0800bd11
 80076fc:	0800bb95 	.word	0x0800bb95
 8007700:	3ff80000 	.word	0x3ff80000
 8007704:	0800bea0 	.word	0x0800bea0
 8007708:	0800bd90 	.word	0x0800bd90
 800770c:	2401      	movs	r4, #1
 800770e:	2300      	movs	r3, #0
 8007710:	940b      	str	r4, [sp, #44]	; 0x2c
 8007712:	9322      	str	r3, [sp, #136]	; 0x88
 8007714:	f04f 39ff 	mov.w	r9, #4294967295
 8007718:	2200      	movs	r2, #0
 800771a:	2312      	movs	r3, #18
 800771c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007720:	9223      	str	r2, [sp, #140]	; 0x8c
 8007722:	e7b0      	b.n	8007686 <_dtoa_r+0x266>
 8007724:	2301      	movs	r3, #1
 8007726:	930b      	str	r3, [sp, #44]	; 0x2c
 8007728:	e7f4      	b.n	8007714 <_dtoa_r+0x2f4>
 800772a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800772e:	464b      	mov	r3, r9
 8007730:	f8cd 9020 	str.w	r9, [sp, #32]
 8007734:	e7a7      	b.n	8007686 <_dtoa_r+0x266>
 8007736:	3101      	adds	r1, #1
 8007738:	6041      	str	r1, [r0, #4]
 800773a:	0052      	lsls	r2, r2, #1
 800773c:	e7a7      	b.n	800768e <_dtoa_r+0x26e>
 800773e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007740:	9a03      	ldr	r2, [sp, #12]
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	9b08      	ldr	r3, [sp, #32]
 8007746:	2b0e      	cmp	r3, #14
 8007748:	f200 80a8 	bhi.w	800789c <_dtoa_r+0x47c>
 800774c:	2c00      	cmp	r4, #0
 800774e:	f000 80a5 	beq.w	800789c <_dtoa_r+0x47c>
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	dd34      	ble.n	80077c2 <_dtoa_r+0x3a2>
 8007758:	4a9a      	ldr	r2, [pc, #616]	; (80079c4 <_dtoa_r+0x5a4>)
 800775a:	f00a 030f 	and.w	r3, sl, #15
 800775e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007762:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800776a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800776e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007772:	d016      	beq.n	80077a2 <_dtoa_r+0x382>
 8007774:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007778:	4b93      	ldr	r3, [pc, #588]	; (80079c8 <_dtoa_r+0x5a8>)
 800777a:	2703      	movs	r7, #3
 800777c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007780:	f7f8 ffd4 	bl	800072c <__aeabi_ddiv>
 8007784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007788:	f004 040f 	and.w	r4, r4, #15
 800778c:	4e8e      	ldr	r6, [pc, #568]	; (80079c8 <_dtoa_r+0x5a8>)
 800778e:	b954      	cbnz	r4, 80077a6 <_dtoa_r+0x386>
 8007790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007798:	f7f8 ffc8 	bl	800072c <__aeabi_ddiv>
 800779c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a0:	e029      	b.n	80077f6 <_dtoa_r+0x3d6>
 80077a2:	2702      	movs	r7, #2
 80077a4:	e7f2      	b.n	800778c <_dtoa_r+0x36c>
 80077a6:	07e1      	lsls	r1, r4, #31
 80077a8:	d508      	bpl.n	80077bc <_dtoa_r+0x39c>
 80077aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077b2:	f7f8 fe91 	bl	80004d8 <__aeabi_dmul>
 80077b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077ba:	3701      	adds	r7, #1
 80077bc:	1064      	asrs	r4, r4, #1
 80077be:	3608      	adds	r6, #8
 80077c0:	e7e5      	b.n	800778e <_dtoa_r+0x36e>
 80077c2:	f000 80a5 	beq.w	8007910 <_dtoa_r+0x4f0>
 80077c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077ca:	f1ca 0400 	rsb	r4, sl, #0
 80077ce:	4b7d      	ldr	r3, [pc, #500]	; (80079c4 <_dtoa_r+0x5a4>)
 80077d0:	f004 020f 	and.w	r2, r4, #15
 80077d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f7f8 fe7c 	bl	80004d8 <__aeabi_dmul>
 80077e0:	2702      	movs	r7, #2
 80077e2:	2300      	movs	r3, #0
 80077e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e8:	4e77      	ldr	r6, [pc, #476]	; (80079c8 <_dtoa_r+0x5a8>)
 80077ea:	1124      	asrs	r4, r4, #4
 80077ec:	2c00      	cmp	r4, #0
 80077ee:	f040 8084 	bne.w	80078fa <_dtoa_r+0x4da>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d2      	bne.n	800779c <_dtoa_r+0x37c>
 80077f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 808b 	beq.w	8007914 <_dtoa_r+0x4f4>
 80077fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007802:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007806:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800780a:	2200      	movs	r2, #0
 800780c:	4b6f      	ldr	r3, [pc, #444]	; (80079cc <_dtoa_r+0x5ac>)
 800780e:	f7f9 f8d5 	bl	80009bc <__aeabi_dcmplt>
 8007812:	2800      	cmp	r0, #0
 8007814:	d07e      	beq.n	8007914 <_dtoa_r+0x4f4>
 8007816:	9b08      	ldr	r3, [sp, #32]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d07b      	beq.n	8007914 <_dtoa_r+0x4f4>
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	dd38      	ble.n	8007894 <_dtoa_r+0x474>
 8007822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007826:	2200      	movs	r2, #0
 8007828:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <_dtoa_r+0x5b0>)
 800782a:	f7f8 fe55 	bl	80004d8 <__aeabi_dmul>
 800782e:	464c      	mov	r4, r9
 8007830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007834:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007838:	3701      	adds	r7, #1
 800783a:	4638      	mov	r0, r7
 800783c:	f7f8 fde2 	bl	8000404 <__aeabi_i2d>
 8007840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	2200      	movs	r2, #0
 800784a:	4b62      	ldr	r3, [pc, #392]	; (80079d4 <_dtoa_r+0x5b4>)
 800784c:	f7f8 fc8e 	bl	800016c <__adddf3>
 8007850:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007854:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007858:	9611      	str	r6, [sp, #68]	; 0x44
 800785a:	2c00      	cmp	r4, #0
 800785c:	d15d      	bne.n	800791a <_dtoa_r+0x4fa>
 800785e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007862:	2200      	movs	r2, #0
 8007864:	4b5c      	ldr	r3, [pc, #368]	; (80079d8 <_dtoa_r+0x5b8>)
 8007866:	f7f8 fc7f 	bl	8000168 <__aeabi_dsub>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007872:	4633      	mov	r3, r6
 8007874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007876:	f7f9 f8bf 	bl	80009f8 <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f040 829c 	bne.w	8007db8 <_dtoa_r+0x998>
 8007880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007886:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800788a:	f7f9 f897 	bl	80009bc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	f040 8290 	bne.w	8007db4 <_dtoa_r+0x994>
 8007894:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007898:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800789c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f2c0 8152 	blt.w	8007b48 <_dtoa_r+0x728>
 80078a4:	f1ba 0f0e 	cmp.w	sl, #14
 80078a8:	f300 814e 	bgt.w	8007b48 <_dtoa_r+0x728>
 80078ac:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <_dtoa_r+0x5a4>)
 80078ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80078ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f280 80db 	bge.w	8007a78 <_dtoa_r+0x658>
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f300 80d7 	bgt.w	8007a78 <_dtoa_r+0x658>
 80078ca:	f040 8272 	bne.w	8007db2 <_dtoa_r+0x992>
 80078ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d2:	2200      	movs	r2, #0
 80078d4:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <_dtoa_r+0x5b8>)
 80078d6:	f7f8 fdff 	bl	80004d8 <__aeabi_dmul>
 80078da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078de:	f7f9 f881 	bl	80009e4 <__aeabi_dcmpge>
 80078e2:	9c08      	ldr	r4, [sp, #32]
 80078e4:	4626      	mov	r6, r4
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f040 8248 	bne.w	8007d7c <_dtoa_r+0x95c>
 80078ec:	2331      	movs	r3, #49	; 0x31
 80078ee:	9f03      	ldr	r7, [sp, #12]
 80078f0:	f10a 0a01 	add.w	sl, sl, #1
 80078f4:	f807 3b01 	strb.w	r3, [r7], #1
 80078f8:	e244      	b.n	8007d84 <_dtoa_r+0x964>
 80078fa:	07e2      	lsls	r2, r4, #31
 80078fc:	d505      	bpl.n	800790a <_dtoa_r+0x4ea>
 80078fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007902:	f7f8 fde9 	bl	80004d8 <__aeabi_dmul>
 8007906:	2301      	movs	r3, #1
 8007908:	3701      	adds	r7, #1
 800790a:	1064      	asrs	r4, r4, #1
 800790c:	3608      	adds	r6, #8
 800790e:	e76d      	b.n	80077ec <_dtoa_r+0x3cc>
 8007910:	2702      	movs	r7, #2
 8007912:	e770      	b.n	80077f6 <_dtoa_r+0x3d6>
 8007914:	46d0      	mov	r8, sl
 8007916:	9c08      	ldr	r4, [sp, #32]
 8007918:	e78f      	b.n	800783a <_dtoa_r+0x41a>
 800791a:	9903      	ldr	r1, [sp, #12]
 800791c:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <_dtoa_r+0x5a4>)
 800791e:	4421      	add	r1, r4
 8007920:	9112      	str	r1, [sp, #72]	; 0x48
 8007922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007924:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007928:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800792c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007930:	2900      	cmp	r1, #0
 8007932:	d055      	beq.n	80079e0 <_dtoa_r+0x5c0>
 8007934:	2000      	movs	r0, #0
 8007936:	4929      	ldr	r1, [pc, #164]	; (80079dc <_dtoa_r+0x5bc>)
 8007938:	f7f8 fef8 	bl	800072c <__aeabi_ddiv>
 800793c:	463b      	mov	r3, r7
 800793e:	4632      	mov	r2, r6
 8007940:	f7f8 fc12 	bl	8000168 <__aeabi_dsub>
 8007944:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007948:	9f03      	ldr	r7, [sp, #12]
 800794a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800794e:	f7f9 f873 	bl	8000a38 <__aeabi_d2iz>
 8007952:	4604      	mov	r4, r0
 8007954:	f7f8 fd56 	bl	8000404 <__aeabi_i2d>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007960:	f7f8 fc02 	bl	8000168 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	3430      	adds	r4, #48	; 0x30
 800796a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800796e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007972:	f807 4b01 	strb.w	r4, [r7], #1
 8007976:	f7f9 f821 	bl	80009bc <__aeabi_dcmplt>
 800797a:	2800      	cmp	r0, #0
 800797c:	d174      	bne.n	8007a68 <_dtoa_r+0x648>
 800797e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007982:	2000      	movs	r0, #0
 8007984:	4911      	ldr	r1, [pc, #68]	; (80079cc <_dtoa_r+0x5ac>)
 8007986:	f7f8 fbef 	bl	8000168 <__aeabi_dsub>
 800798a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800798e:	f7f9 f815 	bl	80009bc <__aeabi_dcmplt>
 8007992:	2800      	cmp	r0, #0
 8007994:	f040 80b7 	bne.w	8007b06 <_dtoa_r+0x6e6>
 8007998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800799a:	429f      	cmp	r7, r3
 800799c:	f43f af7a 	beq.w	8007894 <_dtoa_r+0x474>
 80079a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079a4:	2200      	movs	r2, #0
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <_dtoa_r+0x5b0>)
 80079a8:	f7f8 fd96 	bl	80004d8 <__aeabi_dmul>
 80079ac:	2200      	movs	r2, #0
 80079ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <_dtoa_r+0x5b0>)
 80079b8:	f7f8 fd8e 	bl	80004d8 <__aeabi_dmul>
 80079bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079c0:	e7c3      	b.n	800794a <_dtoa_r+0x52a>
 80079c2:	bf00      	nop
 80079c4:	0800bea0 	.word	0x0800bea0
 80079c8:	0800be78 	.word	0x0800be78
 80079cc:	3ff00000 	.word	0x3ff00000
 80079d0:	40240000 	.word	0x40240000
 80079d4:	401c0000 	.word	0x401c0000
 80079d8:	40140000 	.word	0x40140000
 80079dc:	3fe00000 	.word	0x3fe00000
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f8 fd78 	bl	80004d8 <__aeabi_dmul>
 80079e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ee:	9c03      	ldr	r4, [sp, #12]
 80079f0:	9314      	str	r3, [sp, #80]	; 0x50
 80079f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f6:	f7f9 f81f 	bl	8000a38 <__aeabi_d2iz>
 80079fa:	9015      	str	r0, [sp, #84]	; 0x54
 80079fc:	f7f8 fd02 	bl	8000404 <__aeabi_i2d>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a08:	f7f8 fbae 	bl	8000168 <__aeabi_dsub>
 8007a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a0e:	4606      	mov	r6, r0
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	f804 3b01 	strb.w	r3, [r4], #1
 8007a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a18:	460f      	mov	r7, r1
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	d124      	bne.n	8007a6c <_dtoa_r+0x64c>
 8007a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a26:	4bb0      	ldr	r3, [pc, #704]	; (8007ce8 <_dtoa_r+0x8c8>)
 8007a28:	f7f8 fba0 	bl	800016c <__adddf3>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 ffe0 	bl	80009f8 <__aeabi_dcmpgt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d163      	bne.n	8007b04 <_dtoa_r+0x6e4>
 8007a3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a40:	2000      	movs	r0, #0
 8007a42:	49a9      	ldr	r1, [pc, #676]	; (8007ce8 <_dtoa_r+0x8c8>)
 8007a44:	f7f8 fb90 	bl	8000168 <__aeabi_dsub>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 ffb4 	bl	80009bc <__aeabi_dcmplt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f43f af1d 	beq.w	8007894 <_dtoa_r+0x474>
 8007a5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a5c:	1e7b      	subs	r3, r7, #1
 8007a5e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d0f8      	beq.n	8007a5a <_dtoa_r+0x63a>
 8007a68:	46c2      	mov	sl, r8
 8007a6a:	e03b      	b.n	8007ae4 <_dtoa_r+0x6c4>
 8007a6c:	4b9f      	ldr	r3, [pc, #636]	; (8007cec <_dtoa_r+0x8cc>)
 8007a6e:	f7f8 fd33 	bl	80004d8 <__aeabi_dmul>
 8007a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a76:	e7bc      	b.n	80079f2 <_dtoa_r+0x5d2>
 8007a78:	9f03      	ldr	r7, [sp, #12]
 8007a7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fe51 	bl	800072c <__aeabi_ddiv>
 8007a8a:	f7f8 ffd5 	bl	8000a38 <__aeabi_d2iz>
 8007a8e:	4604      	mov	r4, r0
 8007a90:	f7f8 fcb8 	bl	8000404 <__aeabi_i2d>
 8007a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a98:	f7f8 fd1e 	bl	80004d8 <__aeabi_dmul>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fb60 	bl	8000168 <__aeabi_dsub>
 8007aa8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007aac:	f807 6b01 	strb.w	r6, [r7], #1
 8007ab0:	9e03      	ldr	r6, [sp, #12]
 8007ab2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ab6:	1bbe      	subs	r6, r7, r6
 8007ab8:	45b4      	cmp	ip, r6
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	d136      	bne.n	8007b2e <_dtoa_r+0x70e>
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac8:	4680      	mov	r8, r0
 8007aca:	4689      	mov	r9, r1
 8007acc:	f7f8 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8007ad0:	bb58      	cbnz	r0, 8007b2a <_dtoa_r+0x70a>
 8007ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8007ade:	b108      	cbz	r0, 8007ae4 <_dtoa_r+0x6c4>
 8007ae0:	07e1      	lsls	r1, r4, #31
 8007ae2:	d422      	bmi.n	8007b2a <_dtoa_r+0x70a>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	f000 fe68 	bl	80087bc <_Bfree>
 8007aec:	2300      	movs	r3, #0
 8007aee:	703b      	strb	r3, [r7, #0]
 8007af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007af2:	f10a 0001 	add.w	r0, sl, #1
 8007af6:	6018      	str	r0, [r3, #0]
 8007af8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f43f acde 	beq.w	80074bc <_dtoa_r+0x9c>
 8007b00:	601f      	str	r7, [r3, #0]
 8007b02:	e4db      	b.n	80074bc <_dtoa_r+0x9c>
 8007b04:	4627      	mov	r7, r4
 8007b06:	463b      	mov	r3, r7
 8007b08:	461f      	mov	r7, r3
 8007b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b0e:	2a39      	cmp	r2, #57	; 0x39
 8007b10:	d107      	bne.n	8007b22 <_dtoa_r+0x702>
 8007b12:	9a03      	ldr	r2, [sp, #12]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d1f7      	bne.n	8007b08 <_dtoa_r+0x6e8>
 8007b18:	2230      	movs	r2, #48	; 0x30
 8007b1a:	9903      	ldr	r1, [sp, #12]
 8007b1c:	f108 0801 	add.w	r8, r8, #1
 8007b20:	700a      	strb	r2, [r1, #0]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	3201      	adds	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e79e      	b.n	8007a68 <_dtoa_r+0x648>
 8007b2a:	46d0      	mov	r8, sl
 8007b2c:	e7eb      	b.n	8007b06 <_dtoa_r+0x6e6>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b6e      	ldr	r3, [pc, #440]	; (8007cec <_dtoa_r+0x8cc>)
 8007b32:	f7f8 fcd1 	bl	80004d8 <__aeabi_dmul>
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	f7f8 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d09b      	beq.n	8007a7e <_dtoa_r+0x65e>
 8007b46:	e7cd      	b.n	8007ae4 <_dtoa_r+0x6c4>
 8007b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	f000 80d0 	beq.w	8007cf0 <_dtoa_r+0x8d0>
 8007b50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b52:	2a01      	cmp	r2, #1
 8007b54:	f300 80ae 	bgt.w	8007cb4 <_dtoa_r+0x894>
 8007b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	f000 80a6 	beq.w	8007cac <_dtoa_r+0x88c>
 8007b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b66:	9f06      	ldr	r7, [sp, #24]
 8007b68:	9a06      	ldr	r2, [sp, #24]
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	441a      	add	r2, r3
 8007b6e:	9206      	str	r2, [sp, #24]
 8007b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b72:	4628      	mov	r0, r5
 8007b74:	441a      	add	r2, r3
 8007b76:	9209      	str	r2, [sp, #36]	; 0x24
 8007b78:	f000 ff20 	bl	80089bc <__i2b>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	dd0c      	ble.n	8007b9c <_dtoa_r+0x77c>
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dd09      	ble.n	8007b9c <_dtoa_r+0x77c>
 8007b88:	42bb      	cmp	r3, r7
 8007b8a:	bfa8      	it	ge
 8007b8c:	463b      	movge	r3, r7
 8007b8e:	9a06      	ldr	r2, [sp, #24]
 8007b90:	1aff      	subs	r7, r7, r3
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	9206      	str	r2, [sp, #24]
 8007b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9e:	b1f3      	cbz	r3, 8007bde <_dtoa_r+0x7be>
 8007ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80a8 	beq.w	8007cf8 <_dtoa_r+0x8d8>
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	dd10      	ble.n	8007bce <_dtoa_r+0x7ae>
 8007bac:	4631      	mov	r1, r6
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 ffc1 	bl	8008b38 <__pow5mult>
 8007bb6:	465a      	mov	r2, fp
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4606      	mov	r6, r0
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 ff13 	bl	80089e8 <__multiply>
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4659      	mov	r1, fp
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 fdf8 	bl	80087bc <_Bfree>
 8007bcc:	46c3      	mov	fp, r8
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	1b1a      	subs	r2, r3, r4
 8007bd2:	d004      	beq.n	8007bde <_dtoa_r+0x7be>
 8007bd4:	4659      	mov	r1, fp
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 ffae 	bl	8008b38 <__pow5mult>
 8007bdc:	4683      	mov	fp, r0
 8007bde:	2101      	movs	r1, #1
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 feeb 	bl	80089bc <__i2b>
 8007be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be8:	4604      	mov	r4, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f340 8086 	ble.w	8007cfc <_dtoa_r+0x8dc>
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 ff9f 	bl	8008b38 <__pow5mult>
 8007bfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	dd7f      	ble.n	8007d02 <_dtoa_r+0x8e2>
 8007c02:	f04f 0800 	mov.w	r8, #0
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c0c:	6918      	ldr	r0, [r3, #16]
 8007c0e:	f000 fe87 	bl	8008920 <__hi0bits>
 8007c12:	f1c0 0020 	rsb	r0, r0, #32
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	4418      	add	r0, r3
 8007c1a:	f010 001f 	ands.w	r0, r0, #31
 8007c1e:	f000 8092 	beq.w	8007d46 <_dtoa_r+0x926>
 8007c22:	f1c0 0320 	rsb	r3, r0, #32
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	f340 808a 	ble.w	8007d40 <_dtoa_r+0x920>
 8007c2c:	f1c0 001c 	rsb	r0, r0, #28
 8007c30:	9b06      	ldr	r3, [sp, #24]
 8007c32:	4407      	add	r7, r0
 8007c34:	4403      	add	r3, r0
 8007c36:	9306      	str	r3, [sp, #24]
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	4403      	add	r3, r0
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dd05      	ble.n	8007c50 <_dtoa_r+0x830>
 8007c44:	4659      	mov	r1, fp
 8007c46:	461a      	mov	r2, r3
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 ffcf 	bl	8008bec <__lshift>
 8007c4e:	4683      	mov	fp, r0
 8007c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd05      	ble.n	8007c62 <_dtoa_r+0x842>
 8007c56:	4621      	mov	r1, r4
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 ffc6 	bl	8008bec <__lshift>
 8007c60:	4604      	mov	r4, r0
 8007c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d070      	beq.n	8007d4a <_dtoa_r+0x92a>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4658      	mov	r0, fp
 8007c6c:	f001 f82e 	bl	8008ccc <__mcmp>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	da6a      	bge.n	8007d4a <_dtoa_r+0x92a>
 8007c74:	2300      	movs	r3, #0
 8007c76:	4659      	mov	r1, fp
 8007c78:	220a      	movs	r2, #10
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f000 fdc0 	bl	8008800 <__multadd>
 8007c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c82:	4683      	mov	fp, r0
 8007c84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8194 	beq.w	8007fb6 <_dtoa_r+0xb96>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	2300      	movs	r3, #0
 8007c92:	220a      	movs	r2, #10
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 fdb3 	bl	8008800 <__multadd>
 8007c9a:	f1b9 0f00 	cmp.w	r9, #0
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	f300 8093 	bgt.w	8007dca <_dtoa_r+0x9aa>
 8007ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	dc57      	bgt.n	8007d5a <_dtoa_r+0x93a>
 8007caa:	e08e      	b.n	8007dca <_dtoa_r+0x9aa>
 8007cac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cb2:	e757      	b.n	8007b64 <_dtoa_r+0x744>
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	1e5c      	subs	r4, r3, #1
 8007cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	bfb7      	itett	lt
 8007cbe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cc0:	1b1c      	subge	r4, r3, r4
 8007cc2:	1ae2      	sublt	r2, r4, r3
 8007cc4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007cc6:	bfbe      	ittt	lt
 8007cc8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007cca:	189b      	addlt	r3, r3, r2
 8007ccc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cce:	9b08      	ldr	r3, [sp, #32]
 8007cd0:	bfb8      	it	lt
 8007cd2:	2400      	movlt	r4, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfbb      	ittet	lt
 8007cd8:	9b06      	ldrlt	r3, [sp, #24]
 8007cda:	9a08      	ldrlt	r2, [sp, #32]
 8007cdc:	9f06      	ldrge	r7, [sp, #24]
 8007cde:	1a9f      	sublt	r7, r3, r2
 8007ce0:	bfac      	ite	ge
 8007ce2:	9b08      	ldrge	r3, [sp, #32]
 8007ce4:	2300      	movlt	r3, #0
 8007ce6:	e73f      	b.n	8007b68 <_dtoa_r+0x748>
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	40240000 	.word	0x40240000
 8007cf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cf2:	9f06      	ldr	r7, [sp, #24]
 8007cf4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cf6:	e742      	b.n	8007b7e <_dtoa_r+0x75e>
 8007cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfa:	e76b      	b.n	8007bd4 <_dtoa_r+0x7b4>
 8007cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	dc19      	bgt.n	8007d36 <_dtoa_r+0x916>
 8007d02:	9b04      	ldr	r3, [sp, #16]
 8007d04:	b9bb      	cbnz	r3, 8007d36 <_dtoa_r+0x916>
 8007d06:	9b05      	ldr	r3, [sp, #20]
 8007d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d0c:	b99b      	cbnz	r3, 8007d36 <_dtoa_r+0x916>
 8007d0e:	9b05      	ldr	r3, [sp, #20]
 8007d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	0d1b      	lsrs	r3, r3, #20
 8007d16:	051b      	lsls	r3, r3, #20
 8007d18:	b183      	cbz	r3, 8007d3c <_dtoa_r+0x91c>
 8007d1a:	f04f 0801 	mov.w	r8, #1
 8007d1e:	9b06      	ldr	r3, [sp, #24]
 8007d20:	3301      	adds	r3, #1
 8007d22:	9306      	str	r3, [sp, #24]
 8007d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d26:	3301      	adds	r3, #1
 8007d28:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f47f af6a 	bne.w	8007c06 <_dtoa_r+0x7e6>
 8007d32:	2001      	movs	r0, #1
 8007d34:	e76f      	b.n	8007c16 <_dtoa_r+0x7f6>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	e7f6      	b.n	8007d2a <_dtoa_r+0x90a>
 8007d3c:	4698      	mov	r8, r3
 8007d3e:	e7f4      	b.n	8007d2a <_dtoa_r+0x90a>
 8007d40:	f43f af7d 	beq.w	8007c3e <_dtoa_r+0x81e>
 8007d44:	4618      	mov	r0, r3
 8007d46:	301c      	adds	r0, #28
 8007d48:	e772      	b.n	8007c30 <_dtoa_r+0x810>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc36      	bgt.n	8007dbe <_dtoa_r+0x99e>
 8007d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	dd33      	ble.n	8007dbe <_dtoa_r+0x99e>
 8007d56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d5a:	f1b9 0f00 	cmp.w	r9, #0
 8007d5e:	d10d      	bne.n	8007d7c <_dtoa_r+0x95c>
 8007d60:	4621      	mov	r1, r4
 8007d62:	464b      	mov	r3, r9
 8007d64:	2205      	movs	r2, #5
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fd4a 	bl	8008800 <__multadd>
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4658      	mov	r0, fp
 8007d72:	f000 ffab 	bl	8008ccc <__mcmp>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f73f adb8 	bgt.w	80078ec <_dtoa_r+0x4cc>
 8007d7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d7e:	9f03      	ldr	r7, [sp, #12]
 8007d80:	ea6f 0a03 	mvn.w	sl, r3
 8007d84:	f04f 0800 	mov.w	r8, #0
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 fd16 	bl	80087bc <_Bfree>
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	f43f aea7 	beq.w	8007ae4 <_dtoa_r+0x6c4>
 8007d96:	f1b8 0f00 	cmp.w	r8, #0
 8007d9a:	d005      	beq.n	8007da8 <_dtoa_r+0x988>
 8007d9c:	45b0      	cmp	r8, r6
 8007d9e:	d003      	beq.n	8007da8 <_dtoa_r+0x988>
 8007da0:	4641      	mov	r1, r8
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fd0a 	bl	80087bc <_Bfree>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4628      	mov	r0, r5
 8007dac:	f000 fd06 	bl	80087bc <_Bfree>
 8007db0:	e698      	b.n	8007ae4 <_dtoa_r+0x6c4>
 8007db2:	2400      	movs	r4, #0
 8007db4:	4626      	mov	r6, r4
 8007db6:	e7e1      	b.n	8007d7c <_dtoa_r+0x95c>
 8007db8:	46c2      	mov	sl, r8
 8007dba:	4626      	mov	r6, r4
 8007dbc:	e596      	b.n	80078ec <_dtoa_r+0x4cc>
 8007dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80fd 	beq.w	8007fc4 <_dtoa_r+0xba4>
 8007dca:	2f00      	cmp	r7, #0
 8007dcc:	dd05      	ble.n	8007dda <_dtoa_r+0x9ba>
 8007dce:	4631      	mov	r1, r6
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 ff0a 	bl	8008bec <__lshift>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	f1b8 0f00 	cmp.w	r8, #0
 8007dde:	d05c      	beq.n	8007e9a <_dtoa_r+0xa7a>
 8007de0:	4628      	mov	r0, r5
 8007de2:	6871      	ldr	r1, [r6, #4]
 8007de4:	f000 fcaa 	bl	800873c <_Balloc>
 8007de8:	4607      	mov	r7, r0
 8007dea:	b928      	cbnz	r0, 8007df8 <_dtoa_r+0x9d8>
 8007dec:	4602      	mov	r2, r0
 8007dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007df2:	4b7f      	ldr	r3, [pc, #508]	; (8007ff0 <_dtoa_r+0xbd0>)
 8007df4:	f7ff bb28 	b.w	8007448 <_dtoa_r+0x28>
 8007df8:	6932      	ldr	r2, [r6, #16]
 8007dfa:	f106 010c 	add.w	r1, r6, #12
 8007dfe:	3202      	adds	r2, #2
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	300c      	adds	r0, #12
 8007e04:	f000 fc8c 	bl	8008720 <memcpy>
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 feed 	bl	8008bec <__lshift>
 8007e12:	46b0      	mov	r8, r6
 8007e14:	4606      	mov	r6, r0
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	9308      	str	r3, [sp, #32]
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	444b      	add	r3, r9
 8007e20:	930a      	str	r3, [sp, #40]	; 0x28
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	4658      	mov	r0, fp
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	f7ff fa68 	bl	8007308 <quorem>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	3330      	adds	r3, #48	; 0x30
 8007e3e:	9006      	str	r0, [sp, #24]
 8007e40:	4658      	mov	r0, fp
 8007e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e44:	f000 ff42 	bl	8008ccc <__mcmp>
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f000 ff58 	bl	8008d04 <__mdiff>
 8007e54:	68c2      	ldr	r2, [r0, #12]
 8007e56:	4607      	mov	r7, r0
 8007e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5a:	bb02      	cbnz	r2, 8007e9e <_dtoa_r+0xa7e>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4658      	mov	r0, fp
 8007e60:	f000 ff34 	bl	8008ccc <__mcmp>
 8007e64:	4602      	mov	r2, r0
 8007e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007e70:	f000 fca4 	bl	80087bc <_Bfree>
 8007e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e78:	9f08      	ldr	r7, [sp, #32]
 8007e7a:	ea43 0102 	orr.w	r1, r3, r2
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	430b      	orrs	r3, r1
 8007e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e84:	d10d      	bne.n	8007ea2 <_dtoa_r+0xa82>
 8007e86:	2b39      	cmp	r3, #57	; 0x39
 8007e88:	d029      	beq.n	8007ede <_dtoa_r+0xabe>
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	dd01      	ble.n	8007e94 <_dtoa_r+0xa74>
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	3331      	adds	r3, #49	; 0x31
 8007e94:	9a04      	ldr	r2, [sp, #16]
 8007e96:	7013      	strb	r3, [r2, #0]
 8007e98:	e776      	b.n	8007d88 <_dtoa_r+0x968>
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	e7b9      	b.n	8007e12 <_dtoa_r+0x9f2>
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	e7e2      	b.n	8007e68 <_dtoa_r+0xa48>
 8007ea2:	f1b9 0f00 	cmp.w	r9, #0
 8007ea6:	db06      	blt.n	8007eb6 <_dtoa_r+0xa96>
 8007ea8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007eaa:	ea41 0909 	orr.w	r9, r1, r9
 8007eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb0:	ea59 0101 	orrs.w	r1, r9, r1
 8007eb4:	d120      	bne.n	8007ef8 <_dtoa_r+0xad8>
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	ddec      	ble.n	8007e94 <_dtoa_r+0xa74>
 8007eba:	4659      	mov	r1, fp
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	9308      	str	r3, [sp, #32]
 8007ec2:	f000 fe93 	bl	8008bec <__lshift>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4683      	mov	fp, r0
 8007eca:	f000 feff 	bl	8008ccc <__mcmp>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	dc02      	bgt.n	8007eda <_dtoa_r+0xaba>
 8007ed4:	d1de      	bne.n	8007e94 <_dtoa_r+0xa74>
 8007ed6:	07da      	lsls	r2, r3, #31
 8007ed8:	d5dc      	bpl.n	8007e94 <_dtoa_r+0xa74>
 8007eda:	2b39      	cmp	r3, #57	; 0x39
 8007edc:	d1d8      	bne.n	8007e90 <_dtoa_r+0xa70>
 8007ede:	2339      	movs	r3, #57	; 0x39
 8007ee0:	9a04      	ldr	r2, [sp, #16]
 8007ee2:	7013      	strb	r3, [r2, #0]
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2a39      	cmp	r2, #57	; 0x39
 8007ef0:	d050      	beq.n	8007f94 <_dtoa_r+0xb74>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e747      	b.n	8007d88 <_dtoa_r+0x968>
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	dd03      	ble.n	8007f04 <_dtoa_r+0xae4>
 8007efc:	2b39      	cmp	r3, #57	; 0x39
 8007efe:	d0ee      	beq.n	8007ede <_dtoa_r+0xabe>
 8007f00:	3301      	adds	r3, #1
 8007f02:	e7c7      	b.n	8007e94 <_dtoa_r+0xa74>
 8007f04:	9a08      	ldr	r2, [sp, #32]
 8007f06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f0c:	428a      	cmp	r2, r1
 8007f0e:	d02a      	beq.n	8007f66 <_dtoa_r+0xb46>
 8007f10:	4659      	mov	r1, fp
 8007f12:	2300      	movs	r3, #0
 8007f14:	220a      	movs	r2, #10
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 fc72 	bl	8008800 <__multadd>
 8007f1c:	45b0      	cmp	r8, r6
 8007f1e:	4683      	mov	fp, r0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	f04f 020a 	mov.w	r2, #10
 8007f28:	4641      	mov	r1, r8
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	d107      	bne.n	8007f3e <_dtoa_r+0xb1e>
 8007f2e:	f000 fc67 	bl	8008800 <__multadd>
 8007f32:	4680      	mov	r8, r0
 8007f34:	4606      	mov	r6, r0
 8007f36:	9b08      	ldr	r3, [sp, #32]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	9308      	str	r3, [sp, #32]
 8007f3c:	e775      	b.n	8007e2a <_dtoa_r+0xa0a>
 8007f3e:	f000 fc5f 	bl	8008800 <__multadd>
 8007f42:	4631      	mov	r1, r6
 8007f44:	4680      	mov	r8, r0
 8007f46:	2300      	movs	r3, #0
 8007f48:	220a      	movs	r2, #10
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 fc58 	bl	8008800 <__multadd>
 8007f50:	4606      	mov	r6, r0
 8007f52:	e7f0      	b.n	8007f36 <_dtoa_r+0xb16>
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	bfcc      	ite	gt
 8007f5a:	464f      	movgt	r7, r9
 8007f5c:	2701      	movle	r7, #1
 8007f5e:	f04f 0800 	mov.w	r8, #0
 8007f62:	9a03      	ldr	r2, [sp, #12]
 8007f64:	4417      	add	r7, r2
 8007f66:	4659      	mov	r1, fp
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	9308      	str	r3, [sp, #32]
 8007f6e:	f000 fe3d 	bl	8008bec <__lshift>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4683      	mov	fp, r0
 8007f76:	f000 fea9 	bl	8008ccc <__mcmp>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	dcb2      	bgt.n	8007ee4 <_dtoa_r+0xac4>
 8007f7e:	d102      	bne.n	8007f86 <_dtoa_r+0xb66>
 8007f80:	9b08      	ldr	r3, [sp, #32]
 8007f82:	07db      	lsls	r3, r3, #31
 8007f84:	d4ae      	bmi.n	8007ee4 <_dtoa_r+0xac4>
 8007f86:	463b      	mov	r3, r7
 8007f88:	461f      	mov	r7, r3
 8007f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8e:	2a30      	cmp	r2, #48	; 0x30
 8007f90:	d0fa      	beq.n	8007f88 <_dtoa_r+0xb68>
 8007f92:	e6f9      	b.n	8007d88 <_dtoa_r+0x968>
 8007f94:	9a03      	ldr	r2, [sp, #12]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d1a5      	bne.n	8007ee6 <_dtoa_r+0xac6>
 8007f9a:	2331      	movs	r3, #49	; 0x31
 8007f9c:	f10a 0a01 	add.w	sl, sl, #1
 8007fa0:	e779      	b.n	8007e96 <_dtoa_r+0xa76>
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <_dtoa_r+0xbd4>)
 8007fa4:	f7ff baa8 	b.w	80074f8 <_dtoa_r+0xd8>
 8007fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f47f aa81 	bne.w	80074b2 <_dtoa_r+0x92>
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <_dtoa_r+0xbd8>)
 8007fb2:	f7ff baa1 	b.w	80074f8 <_dtoa_r+0xd8>
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	dc03      	bgt.n	8007fc4 <_dtoa_r+0xba4>
 8007fbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	f73f aecb 	bgt.w	8007d5a <_dtoa_r+0x93a>
 8007fc4:	9f03      	ldr	r7, [sp, #12]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4658      	mov	r0, fp
 8007fca:	f7ff f99d 	bl	8007308 <quorem>
 8007fce:	9a03      	ldr	r2, [sp, #12]
 8007fd0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007fd4:	f807 3b01 	strb.w	r3, [r7], #1
 8007fd8:	1aba      	subs	r2, r7, r2
 8007fda:	4591      	cmp	r9, r2
 8007fdc:	ddba      	ble.n	8007f54 <_dtoa_r+0xb34>
 8007fde:	4659      	mov	r1, fp
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	220a      	movs	r2, #10
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f000 fc0b 	bl	8008800 <__multadd>
 8007fea:	4683      	mov	fp, r0
 8007fec:	e7eb      	b.n	8007fc6 <_dtoa_r+0xba6>
 8007fee:	bf00      	nop
 8007ff0:	0800bd90 	.word	0x0800bd90
 8007ff4:	0800bb94 	.word	0x0800bb94
 8007ff8:	0800bd11 	.word	0x0800bd11

08007ffc <rshift>:
 8007ffc:	6903      	ldr	r3, [r0, #16]
 8007ffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008002:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008006:	f100 0414 	add.w	r4, r0, #20
 800800a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800800e:	dd46      	ble.n	800809e <rshift+0xa2>
 8008010:	f011 011f 	ands.w	r1, r1, #31
 8008014:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008018:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800801c:	d10c      	bne.n	8008038 <rshift+0x3c>
 800801e:	4629      	mov	r1, r5
 8008020:	f100 0710 	add.w	r7, r0, #16
 8008024:	42b1      	cmp	r1, r6
 8008026:	d335      	bcc.n	8008094 <rshift+0x98>
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	1eea      	subs	r2, r5, #3
 800802e:	4296      	cmp	r6, r2
 8008030:	bf38      	it	cc
 8008032:	2300      	movcc	r3, #0
 8008034:	4423      	add	r3, r4
 8008036:	e015      	b.n	8008064 <rshift+0x68>
 8008038:	46a1      	mov	r9, r4
 800803a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800803e:	f1c1 0820 	rsb	r8, r1, #32
 8008042:	40cf      	lsrs	r7, r1
 8008044:	f105 0e04 	add.w	lr, r5, #4
 8008048:	4576      	cmp	r6, lr
 800804a:	46f4      	mov	ip, lr
 800804c:	d816      	bhi.n	800807c <rshift+0x80>
 800804e:	1a9a      	subs	r2, r3, r2
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	3a04      	subs	r2, #4
 8008054:	3501      	adds	r5, #1
 8008056:	42ae      	cmp	r6, r5
 8008058:	bf38      	it	cc
 800805a:	2200      	movcc	r2, #0
 800805c:	18a3      	adds	r3, r4, r2
 800805e:	50a7      	str	r7, [r4, r2]
 8008060:	b107      	cbz	r7, 8008064 <rshift+0x68>
 8008062:	3304      	adds	r3, #4
 8008064:	42a3      	cmp	r3, r4
 8008066:	eba3 0204 	sub.w	r2, r3, r4
 800806a:	bf08      	it	eq
 800806c:	2300      	moveq	r3, #0
 800806e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008072:	6102      	str	r2, [r0, #16]
 8008074:	bf08      	it	eq
 8008076:	6143      	streq	r3, [r0, #20]
 8008078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800807c:	f8dc c000 	ldr.w	ip, [ip]
 8008080:	fa0c fc08 	lsl.w	ip, ip, r8
 8008084:	ea4c 0707 	orr.w	r7, ip, r7
 8008088:	f849 7b04 	str.w	r7, [r9], #4
 800808c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008090:	40cf      	lsrs	r7, r1
 8008092:	e7d9      	b.n	8008048 <rshift+0x4c>
 8008094:	f851 cb04 	ldr.w	ip, [r1], #4
 8008098:	f847 cf04 	str.w	ip, [r7, #4]!
 800809c:	e7c2      	b.n	8008024 <rshift+0x28>
 800809e:	4623      	mov	r3, r4
 80080a0:	e7e0      	b.n	8008064 <rshift+0x68>

080080a2 <__hexdig_fun>:
 80080a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d802      	bhi.n	80080b0 <__hexdig_fun+0xe>
 80080aa:	3820      	subs	r0, #32
 80080ac:	b2c0      	uxtb	r0, r0
 80080ae:	4770      	bx	lr
 80080b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d801      	bhi.n	80080bc <__hexdig_fun+0x1a>
 80080b8:	3847      	subs	r0, #71	; 0x47
 80080ba:	e7f7      	b.n	80080ac <__hexdig_fun+0xa>
 80080bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080c0:	2b05      	cmp	r3, #5
 80080c2:	d801      	bhi.n	80080c8 <__hexdig_fun+0x26>
 80080c4:	3827      	subs	r0, #39	; 0x27
 80080c6:	e7f1      	b.n	80080ac <__hexdig_fun+0xa>
 80080c8:	2000      	movs	r0, #0
 80080ca:	4770      	bx	lr

080080cc <__gethex>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	b08b      	sub	sp, #44	; 0x2c
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	4bb2      	ldr	r3, [pc, #712]	; (80083a0 <__gethex+0x2d4>)
 80080d6:	9002      	str	r0, [sp, #8]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	468b      	mov	fp, r1
 80080dc:	4618      	mov	r0, r3
 80080de:	4690      	mov	r8, r2
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	f7f8 f835 	bl	8000150 <strlen>
 80080e6:	4682      	mov	sl, r0
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	f8db 2000 	ldr.w	r2, [fp]
 80080ee:	4403      	add	r3, r0
 80080f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80080f4:	9306      	str	r3, [sp, #24]
 80080f6:	1c93      	adds	r3, r2, #2
 80080f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80080fc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008100:	32fe      	adds	r2, #254	; 0xfe
 8008102:	18d1      	adds	r1, r2, r3
 8008104:	461f      	mov	r7, r3
 8008106:	f813 0b01 	ldrb.w	r0, [r3], #1
 800810a:	9101      	str	r1, [sp, #4]
 800810c:	2830      	cmp	r0, #48	; 0x30
 800810e:	d0f8      	beq.n	8008102 <__gethex+0x36>
 8008110:	f7ff ffc7 	bl	80080a2 <__hexdig_fun>
 8008114:	4604      	mov	r4, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	d13a      	bne.n	8008190 <__gethex+0xc4>
 800811a:	4652      	mov	r2, sl
 800811c:	4638      	mov	r0, r7
 800811e:	9903      	ldr	r1, [sp, #12]
 8008120:	f001 fa26 	bl	8009570 <strncmp>
 8008124:	4605      	mov	r5, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	d166      	bne.n	80081f8 <__gethex+0x12c>
 800812a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800812e:	eb07 060a 	add.w	r6, r7, sl
 8008132:	f7ff ffb6 	bl	80080a2 <__hexdig_fun>
 8008136:	2800      	cmp	r0, #0
 8008138:	d060      	beq.n	80081fc <__gethex+0x130>
 800813a:	4633      	mov	r3, r6
 800813c:	7818      	ldrb	r0, [r3, #0]
 800813e:	461f      	mov	r7, r3
 8008140:	2830      	cmp	r0, #48	; 0x30
 8008142:	f103 0301 	add.w	r3, r3, #1
 8008146:	d0f9      	beq.n	800813c <__gethex+0x70>
 8008148:	f7ff ffab 	bl	80080a2 <__hexdig_fun>
 800814c:	2301      	movs	r3, #1
 800814e:	fab0 f480 	clz	r4, r0
 8008152:	4635      	mov	r5, r6
 8008154:	0964      	lsrs	r4, r4, #5
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	463a      	mov	r2, r7
 800815a:	4616      	mov	r6, r2
 800815c:	7830      	ldrb	r0, [r6, #0]
 800815e:	3201      	adds	r2, #1
 8008160:	f7ff ff9f 	bl	80080a2 <__hexdig_fun>
 8008164:	2800      	cmp	r0, #0
 8008166:	d1f8      	bne.n	800815a <__gethex+0x8e>
 8008168:	4652      	mov	r2, sl
 800816a:	4630      	mov	r0, r6
 800816c:	9903      	ldr	r1, [sp, #12]
 800816e:	f001 f9ff 	bl	8009570 <strncmp>
 8008172:	b980      	cbnz	r0, 8008196 <__gethex+0xca>
 8008174:	b94d      	cbnz	r5, 800818a <__gethex+0xbe>
 8008176:	eb06 050a 	add.w	r5, r6, sl
 800817a:	462a      	mov	r2, r5
 800817c:	4616      	mov	r6, r2
 800817e:	7830      	ldrb	r0, [r6, #0]
 8008180:	3201      	adds	r2, #1
 8008182:	f7ff ff8e 	bl	80080a2 <__hexdig_fun>
 8008186:	2800      	cmp	r0, #0
 8008188:	d1f8      	bne.n	800817c <__gethex+0xb0>
 800818a:	1bad      	subs	r5, r5, r6
 800818c:	00ad      	lsls	r5, r5, #2
 800818e:	e004      	b.n	800819a <__gethex+0xce>
 8008190:	2400      	movs	r4, #0
 8008192:	4625      	mov	r5, r4
 8008194:	e7e0      	b.n	8008158 <__gethex+0x8c>
 8008196:	2d00      	cmp	r5, #0
 8008198:	d1f7      	bne.n	800818a <__gethex+0xbe>
 800819a:	7833      	ldrb	r3, [r6, #0]
 800819c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081a0:	2b50      	cmp	r3, #80	; 0x50
 80081a2:	d139      	bne.n	8008218 <__gethex+0x14c>
 80081a4:	7873      	ldrb	r3, [r6, #1]
 80081a6:	2b2b      	cmp	r3, #43	; 0x2b
 80081a8:	d02a      	beq.n	8008200 <__gethex+0x134>
 80081aa:	2b2d      	cmp	r3, #45	; 0x2d
 80081ac:	d02c      	beq.n	8008208 <__gethex+0x13c>
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	1c71      	adds	r1, r6, #1
 80081b4:	7808      	ldrb	r0, [r1, #0]
 80081b6:	f7ff ff74 	bl	80080a2 <__hexdig_fun>
 80081ba:	1e43      	subs	r3, r0, #1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b18      	cmp	r3, #24
 80081c0:	d82a      	bhi.n	8008218 <__gethex+0x14c>
 80081c2:	f1a0 0210 	sub.w	r2, r0, #16
 80081c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081ca:	f7ff ff6a 	bl	80080a2 <__hexdig_fun>
 80081ce:	1e43      	subs	r3, r0, #1
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b18      	cmp	r3, #24
 80081d4:	d91b      	bls.n	800820e <__gethex+0x142>
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	d000      	beq.n	80081de <__gethex+0x112>
 80081dc:	4252      	negs	r2, r2
 80081de:	4415      	add	r5, r2
 80081e0:	f8cb 1000 	str.w	r1, [fp]
 80081e4:	b1d4      	cbz	r4, 800821c <__gethex+0x150>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf14      	ite	ne
 80081ec:	2700      	movne	r7, #0
 80081ee:	2706      	moveq	r7, #6
 80081f0:	4638      	mov	r0, r7
 80081f2:	b00b      	add	sp, #44	; 0x2c
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	463e      	mov	r6, r7
 80081fa:	4625      	mov	r5, r4
 80081fc:	2401      	movs	r4, #1
 80081fe:	e7cc      	b.n	800819a <__gethex+0xce>
 8008200:	f04f 0900 	mov.w	r9, #0
 8008204:	1cb1      	adds	r1, r6, #2
 8008206:	e7d5      	b.n	80081b4 <__gethex+0xe8>
 8008208:	f04f 0901 	mov.w	r9, #1
 800820c:	e7fa      	b.n	8008204 <__gethex+0x138>
 800820e:	230a      	movs	r3, #10
 8008210:	fb03 0202 	mla	r2, r3, r2, r0
 8008214:	3a10      	subs	r2, #16
 8008216:	e7d6      	b.n	80081c6 <__gethex+0xfa>
 8008218:	4631      	mov	r1, r6
 800821a:	e7e1      	b.n	80081e0 <__gethex+0x114>
 800821c:	4621      	mov	r1, r4
 800821e:	1bf3      	subs	r3, r6, r7
 8008220:	3b01      	subs	r3, #1
 8008222:	2b07      	cmp	r3, #7
 8008224:	dc0a      	bgt.n	800823c <__gethex+0x170>
 8008226:	9802      	ldr	r0, [sp, #8]
 8008228:	f000 fa88 	bl	800873c <_Balloc>
 800822c:	4604      	mov	r4, r0
 800822e:	b940      	cbnz	r0, 8008242 <__gethex+0x176>
 8008230:	4602      	mov	r2, r0
 8008232:	21de      	movs	r1, #222	; 0xde
 8008234:	4b5b      	ldr	r3, [pc, #364]	; (80083a4 <__gethex+0x2d8>)
 8008236:	485c      	ldr	r0, [pc, #368]	; (80083a8 <__gethex+0x2dc>)
 8008238:	f001 f9bc 	bl	80095b4 <__assert_func>
 800823c:	3101      	adds	r1, #1
 800823e:	105b      	asrs	r3, r3, #1
 8008240:	e7ef      	b.n	8008222 <__gethex+0x156>
 8008242:	f04f 0b00 	mov.w	fp, #0
 8008246:	f100 0914 	add.w	r9, r0, #20
 800824a:	f1ca 0301 	rsb	r3, sl, #1
 800824e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008252:	f8cd b004 	str.w	fp, [sp, #4]
 8008256:	9308      	str	r3, [sp, #32]
 8008258:	42b7      	cmp	r7, r6
 800825a:	d33f      	bcc.n	80082dc <__gethex+0x210>
 800825c:	9f04      	ldr	r7, [sp, #16]
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	f847 3b04 	str.w	r3, [r7], #4
 8008264:	eba7 0709 	sub.w	r7, r7, r9
 8008268:	10bf      	asrs	r7, r7, #2
 800826a:	6127      	str	r7, [r4, #16]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fb57 	bl	8008920 <__hi0bits>
 8008272:	017f      	lsls	r7, r7, #5
 8008274:	f8d8 6000 	ldr.w	r6, [r8]
 8008278:	1a3f      	subs	r7, r7, r0
 800827a:	42b7      	cmp	r7, r6
 800827c:	dd62      	ble.n	8008344 <__gethex+0x278>
 800827e:	1bbf      	subs	r7, r7, r6
 8008280:	4639      	mov	r1, r7
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fef1 	bl	800906a <__any_on>
 8008288:	4682      	mov	sl, r0
 800828a:	b1a8      	cbz	r0, 80082b8 <__gethex+0x1ec>
 800828c:	f04f 0a01 	mov.w	sl, #1
 8008290:	1e7b      	subs	r3, r7, #1
 8008292:	1159      	asrs	r1, r3, #5
 8008294:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008298:	f003 021f 	and.w	r2, r3, #31
 800829c:	fa0a f202 	lsl.w	r2, sl, r2
 80082a0:	420a      	tst	r2, r1
 80082a2:	d009      	beq.n	80082b8 <__gethex+0x1ec>
 80082a4:	4553      	cmp	r3, sl
 80082a6:	dd05      	ble.n	80082b4 <__gethex+0x1e8>
 80082a8:	4620      	mov	r0, r4
 80082aa:	1eb9      	subs	r1, r7, #2
 80082ac:	f000 fedd 	bl	800906a <__any_on>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d144      	bne.n	800833e <__gethex+0x272>
 80082b4:	f04f 0a02 	mov.w	sl, #2
 80082b8:	4639      	mov	r1, r7
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7ff fe9e 	bl	8007ffc <rshift>
 80082c0:	443d      	add	r5, r7
 80082c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082c6:	42ab      	cmp	r3, r5
 80082c8:	da4a      	bge.n	8008360 <__gethex+0x294>
 80082ca:	4621      	mov	r1, r4
 80082cc:	9802      	ldr	r0, [sp, #8]
 80082ce:	f000 fa75 	bl	80087bc <_Bfree>
 80082d2:	2300      	movs	r3, #0
 80082d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082d6:	27a3      	movs	r7, #163	; 0xa3
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e789      	b.n	80081f0 <__gethex+0x124>
 80082dc:	1e73      	subs	r3, r6, #1
 80082de:	9a06      	ldr	r2, [sp, #24]
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d019      	beq.n	800831e <__gethex+0x252>
 80082ea:	f1bb 0f20 	cmp.w	fp, #32
 80082ee:	d107      	bne.n	8008300 <__gethex+0x234>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	9a01      	ldr	r2, [sp, #4]
 80082f4:	f843 2b04 	str.w	r2, [r3], #4
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	2300      	movs	r3, #0
 80082fc:	469b      	mov	fp, r3
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008304:	f7ff fecd 	bl	80080a2 <__hexdig_fun>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f000 000f 	and.w	r0, r0, #15
 800830e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008312:	4303      	orrs	r3, r0
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	f10b 0b04 	add.w	fp, fp, #4
 800831a:	9b07      	ldr	r3, [sp, #28]
 800831c:	e00d      	b.n	800833a <__gethex+0x26e>
 800831e:	9a08      	ldr	r2, [sp, #32]
 8008320:	1e73      	subs	r3, r6, #1
 8008322:	4413      	add	r3, r2
 8008324:	42bb      	cmp	r3, r7
 8008326:	d3e0      	bcc.n	80082ea <__gethex+0x21e>
 8008328:	4618      	mov	r0, r3
 800832a:	4652      	mov	r2, sl
 800832c:	9903      	ldr	r1, [sp, #12]
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	f001 f91e 	bl	8009570 <strncmp>
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	2800      	cmp	r0, #0
 8008338:	d1d7      	bne.n	80082ea <__gethex+0x21e>
 800833a:	461e      	mov	r6, r3
 800833c:	e78c      	b.n	8008258 <__gethex+0x18c>
 800833e:	f04f 0a03 	mov.w	sl, #3
 8008342:	e7b9      	b.n	80082b8 <__gethex+0x1ec>
 8008344:	da09      	bge.n	800835a <__gethex+0x28e>
 8008346:	1bf7      	subs	r7, r6, r7
 8008348:	4621      	mov	r1, r4
 800834a:	463a      	mov	r2, r7
 800834c:	9802      	ldr	r0, [sp, #8]
 800834e:	f000 fc4d 	bl	8008bec <__lshift>
 8008352:	4604      	mov	r4, r0
 8008354:	1bed      	subs	r5, r5, r7
 8008356:	f100 0914 	add.w	r9, r0, #20
 800835a:	f04f 0a00 	mov.w	sl, #0
 800835e:	e7b0      	b.n	80082c2 <__gethex+0x1f6>
 8008360:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008364:	42a8      	cmp	r0, r5
 8008366:	dd72      	ble.n	800844e <__gethex+0x382>
 8008368:	1b45      	subs	r5, r0, r5
 800836a:	42ae      	cmp	r6, r5
 800836c:	dc35      	bgt.n	80083da <__gethex+0x30e>
 800836e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d029      	beq.n	80083ca <__gethex+0x2fe>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d02b      	beq.n	80083d2 <__gethex+0x306>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d11c      	bne.n	80083b8 <__gethex+0x2ec>
 800837e:	42ae      	cmp	r6, r5
 8008380:	d11a      	bne.n	80083b8 <__gethex+0x2ec>
 8008382:	2e01      	cmp	r6, #1
 8008384:	d112      	bne.n	80083ac <__gethex+0x2e0>
 8008386:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800838a:	9a05      	ldr	r2, [sp, #20]
 800838c:	2762      	movs	r7, #98	; 0x62
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	2301      	movs	r3, #1
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	f8c9 3000 	str.w	r3, [r9]
 8008398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800839a:	601c      	str	r4, [r3, #0]
 800839c:	e728      	b.n	80081f0 <__gethex+0x124>
 800839e:	bf00      	nop
 80083a0:	0800be08 	.word	0x0800be08
 80083a4:	0800bd90 	.word	0x0800bd90
 80083a8:	0800bda1 	.word	0x0800bda1
 80083ac:	4620      	mov	r0, r4
 80083ae:	1e71      	subs	r1, r6, #1
 80083b0:	f000 fe5b 	bl	800906a <__any_on>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1e6      	bne.n	8008386 <__gethex+0x2ba>
 80083b8:	4621      	mov	r1, r4
 80083ba:	9802      	ldr	r0, [sp, #8]
 80083bc:	f000 f9fe 	bl	80087bc <_Bfree>
 80083c0:	2300      	movs	r3, #0
 80083c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083c4:	2750      	movs	r7, #80	; 0x50
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	e712      	b.n	80081f0 <__gethex+0x124>
 80083ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f3      	bne.n	80083b8 <__gethex+0x2ec>
 80083d0:	e7d9      	b.n	8008386 <__gethex+0x2ba>
 80083d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1d6      	bne.n	8008386 <__gethex+0x2ba>
 80083d8:	e7ee      	b.n	80083b8 <__gethex+0x2ec>
 80083da:	1e6f      	subs	r7, r5, #1
 80083dc:	f1ba 0f00 	cmp.w	sl, #0
 80083e0:	d132      	bne.n	8008448 <__gethex+0x37c>
 80083e2:	b127      	cbz	r7, 80083ee <__gethex+0x322>
 80083e4:	4639      	mov	r1, r7
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fe3f 	bl	800906a <__any_on>
 80083ec:	4682      	mov	sl, r0
 80083ee:	2101      	movs	r1, #1
 80083f0:	117b      	asrs	r3, r7, #5
 80083f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80083f6:	f007 071f 	and.w	r7, r7, #31
 80083fa:	fa01 f707 	lsl.w	r7, r1, r7
 80083fe:	421f      	tst	r7, r3
 8008400:	f04f 0702 	mov.w	r7, #2
 8008404:	4629      	mov	r1, r5
 8008406:	4620      	mov	r0, r4
 8008408:	bf18      	it	ne
 800840a:	f04a 0a02 	orrne.w	sl, sl, #2
 800840e:	1b76      	subs	r6, r6, r5
 8008410:	f7ff fdf4 	bl	8007ffc <rshift>
 8008414:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	d048      	beq.n	80084b0 <__gethex+0x3e4>
 800841e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d015      	beq.n	8008452 <__gethex+0x386>
 8008426:	2b03      	cmp	r3, #3
 8008428:	d017      	beq.n	800845a <__gethex+0x38e>
 800842a:	2b01      	cmp	r3, #1
 800842c:	d109      	bne.n	8008442 <__gethex+0x376>
 800842e:	f01a 0f02 	tst.w	sl, #2
 8008432:	d006      	beq.n	8008442 <__gethex+0x376>
 8008434:	f8d9 0000 	ldr.w	r0, [r9]
 8008438:	ea4a 0a00 	orr.w	sl, sl, r0
 800843c:	f01a 0f01 	tst.w	sl, #1
 8008440:	d10e      	bne.n	8008460 <__gethex+0x394>
 8008442:	f047 0710 	orr.w	r7, r7, #16
 8008446:	e033      	b.n	80084b0 <__gethex+0x3e4>
 8008448:	f04f 0a01 	mov.w	sl, #1
 800844c:	e7cf      	b.n	80083ee <__gethex+0x322>
 800844e:	2701      	movs	r7, #1
 8008450:	e7e2      	b.n	8008418 <__gethex+0x34c>
 8008452:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008454:	f1c3 0301 	rsb	r3, r3, #1
 8008458:	9315      	str	r3, [sp, #84]	; 0x54
 800845a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <__gethex+0x376>
 8008460:	f04f 0c00 	mov.w	ip, #0
 8008464:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008468:	f104 0314 	add.w	r3, r4, #20
 800846c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008470:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008474:	4618      	mov	r0, r3
 8008476:	f853 2b04 	ldr.w	r2, [r3], #4
 800847a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800847e:	d01c      	beq.n	80084ba <__gethex+0x3ee>
 8008480:	3201      	adds	r2, #1
 8008482:	6002      	str	r2, [r0, #0]
 8008484:	2f02      	cmp	r7, #2
 8008486:	f104 0314 	add.w	r3, r4, #20
 800848a:	d13d      	bne.n	8008508 <__gethex+0x43c>
 800848c:	f8d8 2000 	ldr.w	r2, [r8]
 8008490:	3a01      	subs	r2, #1
 8008492:	42b2      	cmp	r2, r6
 8008494:	d10a      	bne.n	80084ac <__gethex+0x3e0>
 8008496:	2201      	movs	r2, #1
 8008498:	1171      	asrs	r1, r6, #5
 800849a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800849e:	f006 061f 	and.w	r6, r6, #31
 80084a2:	fa02 f606 	lsl.w	r6, r2, r6
 80084a6:	421e      	tst	r6, r3
 80084a8:	bf18      	it	ne
 80084aa:	4617      	movne	r7, r2
 80084ac:	f047 0720 	orr.w	r7, r7, #32
 80084b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084b2:	601c      	str	r4, [r3, #0]
 80084b4:	9b05      	ldr	r3, [sp, #20]
 80084b6:	601d      	str	r5, [r3, #0]
 80084b8:	e69a      	b.n	80081f0 <__gethex+0x124>
 80084ba:	4299      	cmp	r1, r3
 80084bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80084c0:	d8d8      	bhi.n	8008474 <__gethex+0x3a8>
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	459b      	cmp	fp, r3
 80084c6:	db17      	blt.n	80084f8 <__gethex+0x42c>
 80084c8:	6861      	ldr	r1, [r4, #4]
 80084ca:	9802      	ldr	r0, [sp, #8]
 80084cc:	3101      	adds	r1, #1
 80084ce:	f000 f935 	bl	800873c <_Balloc>
 80084d2:	4681      	mov	r9, r0
 80084d4:	b918      	cbnz	r0, 80084de <__gethex+0x412>
 80084d6:	4602      	mov	r2, r0
 80084d8:	2184      	movs	r1, #132	; 0x84
 80084da:	4b19      	ldr	r3, [pc, #100]	; (8008540 <__gethex+0x474>)
 80084dc:	e6ab      	b.n	8008236 <__gethex+0x16a>
 80084de:	6922      	ldr	r2, [r4, #16]
 80084e0:	f104 010c 	add.w	r1, r4, #12
 80084e4:	3202      	adds	r2, #2
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	300c      	adds	r0, #12
 80084ea:	f000 f919 	bl	8008720 <memcpy>
 80084ee:	4621      	mov	r1, r4
 80084f0:	9802      	ldr	r0, [sp, #8]
 80084f2:	f000 f963 	bl	80087bc <_Bfree>
 80084f6:	464c      	mov	r4, r9
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	6122      	str	r2, [r4, #16]
 80084fe:	2201      	movs	r2, #1
 8008500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008504:	615a      	str	r2, [r3, #20]
 8008506:	e7bd      	b.n	8008484 <__gethex+0x3b8>
 8008508:	6922      	ldr	r2, [r4, #16]
 800850a:	455a      	cmp	r2, fp
 800850c:	dd0b      	ble.n	8008526 <__gethex+0x45a>
 800850e:	2101      	movs	r1, #1
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff fd73 	bl	8007ffc <rshift>
 8008516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800851a:	3501      	adds	r5, #1
 800851c:	42ab      	cmp	r3, r5
 800851e:	f6ff aed4 	blt.w	80082ca <__gethex+0x1fe>
 8008522:	2701      	movs	r7, #1
 8008524:	e7c2      	b.n	80084ac <__gethex+0x3e0>
 8008526:	f016 061f 	ands.w	r6, r6, #31
 800852a:	d0fa      	beq.n	8008522 <__gethex+0x456>
 800852c:	4453      	add	r3, sl
 800852e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008532:	f000 f9f5 	bl	8008920 <__hi0bits>
 8008536:	f1c6 0620 	rsb	r6, r6, #32
 800853a:	42b0      	cmp	r0, r6
 800853c:	dbe7      	blt.n	800850e <__gethex+0x442>
 800853e:	e7f0      	b.n	8008522 <__gethex+0x456>
 8008540:	0800bd90 	.word	0x0800bd90

08008544 <L_shift>:
 8008544:	f1c2 0208 	rsb	r2, r2, #8
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	b570      	push	{r4, r5, r6, lr}
 800854c:	f1c2 0620 	rsb	r6, r2, #32
 8008550:	6843      	ldr	r3, [r0, #4]
 8008552:	6804      	ldr	r4, [r0, #0]
 8008554:	fa03 f506 	lsl.w	r5, r3, r6
 8008558:	432c      	orrs	r4, r5
 800855a:	40d3      	lsrs	r3, r2
 800855c:	6004      	str	r4, [r0, #0]
 800855e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008562:	4288      	cmp	r0, r1
 8008564:	d3f4      	bcc.n	8008550 <L_shift+0xc>
 8008566:	bd70      	pop	{r4, r5, r6, pc}

08008568 <__match>:
 8008568:	b530      	push	{r4, r5, lr}
 800856a:	6803      	ldr	r3, [r0, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008572:	b914      	cbnz	r4, 800857a <__match+0x12>
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	2001      	movs	r0, #1
 8008578:	bd30      	pop	{r4, r5, pc}
 800857a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008582:	2d19      	cmp	r5, #25
 8008584:	bf98      	it	ls
 8008586:	3220      	addls	r2, #32
 8008588:	42a2      	cmp	r2, r4
 800858a:	d0f0      	beq.n	800856e <__match+0x6>
 800858c:	2000      	movs	r0, #0
 800858e:	e7f3      	b.n	8008578 <__match+0x10>

08008590 <__hexnan>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	2500      	movs	r5, #0
 8008596:	680b      	ldr	r3, [r1, #0]
 8008598:	4682      	mov	sl, r0
 800859a:	115e      	asrs	r6, r3, #5
 800859c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085a0:	f013 031f 	ands.w	r3, r3, #31
 80085a4:	bf18      	it	ne
 80085a6:	3604      	addne	r6, #4
 80085a8:	1f37      	subs	r7, r6, #4
 80085aa:	46b9      	mov	r9, r7
 80085ac:	463c      	mov	r4, r7
 80085ae:	46ab      	mov	fp, r5
 80085b0:	b087      	sub	sp, #28
 80085b2:	4690      	mov	r8, r2
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80085bc:	9502      	str	r5, [sp, #8]
 80085be:	7851      	ldrb	r1, [r2, #1]
 80085c0:	1c53      	adds	r3, r2, #1
 80085c2:	9303      	str	r3, [sp, #12]
 80085c4:	b341      	cbz	r1, 8008618 <__hexnan+0x88>
 80085c6:	4608      	mov	r0, r1
 80085c8:	9205      	str	r2, [sp, #20]
 80085ca:	9104      	str	r1, [sp, #16]
 80085cc:	f7ff fd69 	bl	80080a2 <__hexdig_fun>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d14f      	bne.n	8008674 <__hexnan+0xe4>
 80085d4:	9904      	ldr	r1, [sp, #16]
 80085d6:	9a05      	ldr	r2, [sp, #20]
 80085d8:	2920      	cmp	r1, #32
 80085da:	d818      	bhi.n	800860e <__hexnan+0x7e>
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	459b      	cmp	fp, r3
 80085e0:	dd13      	ble.n	800860a <__hexnan+0x7a>
 80085e2:	454c      	cmp	r4, r9
 80085e4:	d206      	bcs.n	80085f4 <__hexnan+0x64>
 80085e6:	2d07      	cmp	r5, #7
 80085e8:	dc04      	bgt.n	80085f4 <__hexnan+0x64>
 80085ea:	462a      	mov	r2, r5
 80085ec:	4649      	mov	r1, r9
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff ffa8 	bl	8008544 <L_shift>
 80085f4:	4544      	cmp	r4, r8
 80085f6:	d950      	bls.n	800869a <__hexnan+0x10a>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f1a4 0904 	sub.w	r9, r4, #4
 80085fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008602:	461d      	mov	r5, r3
 8008604:	464c      	mov	r4, r9
 8008606:	f8cd b008 	str.w	fp, [sp, #8]
 800860a:	9a03      	ldr	r2, [sp, #12]
 800860c:	e7d7      	b.n	80085be <__hexnan+0x2e>
 800860e:	2929      	cmp	r1, #41	; 0x29
 8008610:	d156      	bne.n	80086c0 <__hexnan+0x130>
 8008612:	3202      	adds	r2, #2
 8008614:	f8ca 2000 	str.w	r2, [sl]
 8008618:	f1bb 0f00 	cmp.w	fp, #0
 800861c:	d050      	beq.n	80086c0 <__hexnan+0x130>
 800861e:	454c      	cmp	r4, r9
 8008620:	d206      	bcs.n	8008630 <__hexnan+0xa0>
 8008622:	2d07      	cmp	r5, #7
 8008624:	dc04      	bgt.n	8008630 <__hexnan+0xa0>
 8008626:	462a      	mov	r2, r5
 8008628:	4649      	mov	r1, r9
 800862a:	4620      	mov	r0, r4
 800862c:	f7ff ff8a 	bl	8008544 <L_shift>
 8008630:	4544      	cmp	r4, r8
 8008632:	d934      	bls.n	800869e <__hexnan+0x10e>
 8008634:	4623      	mov	r3, r4
 8008636:	f1a8 0204 	sub.w	r2, r8, #4
 800863a:	f853 1b04 	ldr.w	r1, [r3], #4
 800863e:	429f      	cmp	r7, r3
 8008640:	f842 1f04 	str.w	r1, [r2, #4]!
 8008644:	d2f9      	bcs.n	800863a <__hexnan+0xaa>
 8008646:	1b3b      	subs	r3, r7, r4
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	3304      	adds	r3, #4
 800864e:	3401      	adds	r4, #1
 8008650:	3e03      	subs	r6, #3
 8008652:	42b4      	cmp	r4, r6
 8008654:	bf88      	it	hi
 8008656:	2304      	movhi	r3, #4
 8008658:	2200      	movs	r2, #0
 800865a:	4443      	add	r3, r8
 800865c:	f843 2b04 	str.w	r2, [r3], #4
 8008660:	429f      	cmp	r7, r3
 8008662:	d2fb      	bcs.n	800865c <__hexnan+0xcc>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	b91b      	cbnz	r3, 8008670 <__hexnan+0xe0>
 8008668:	4547      	cmp	r7, r8
 800866a:	d127      	bne.n	80086bc <__hexnan+0x12c>
 800866c:	2301      	movs	r3, #1
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	2005      	movs	r0, #5
 8008672:	e026      	b.n	80086c2 <__hexnan+0x132>
 8008674:	3501      	adds	r5, #1
 8008676:	2d08      	cmp	r5, #8
 8008678:	f10b 0b01 	add.w	fp, fp, #1
 800867c:	dd06      	ble.n	800868c <__hexnan+0xfc>
 800867e:	4544      	cmp	r4, r8
 8008680:	d9c3      	bls.n	800860a <__hexnan+0x7a>
 8008682:	2300      	movs	r3, #0
 8008684:	2501      	movs	r5, #1
 8008686:	f844 3c04 	str.w	r3, [r4, #-4]
 800868a:	3c04      	subs	r4, #4
 800868c:	6822      	ldr	r2, [r4, #0]
 800868e:	f000 000f 	and.w	r0, r0, #15
 8008692:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	e7b7      	b.n	800860a <__hexnan+0x7a>
 800869a:	2508      	movs	r5, #8
 800869c:	e7b5      	b.n	800860a <__hexnan+0x7a>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0df      	beq.n	8008664 <__hexnan+0xd4>
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	f1c3 0320 	rsb	r3, r3, #32
 80086ac:	fa22 f303 	lsr.w	r3, r2, r3
 80086b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086b4:	401a      	ands	r2, r3
 80086b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80086ba:	e7d3      	b.n	8008664 <__hexnan+0xd4>
 80086bc:	3f04      	subs	r7, #4
 80086be:	e7d1      	b.n	8008664 <__hexnan+0xd4>
 80086c0:	2004      	movs	r0, #4
 80086c2:	b007      	add	sp, #28
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086c8 <_localeconv_r>:
 80086c8:	4800      	ldr	r0, [pc, #0]	; (80086cc <_localeconv_r+0x4>)
 80086ca:	4770      	bx	lr
 80086cc:	20000164 	.word	0x20000164

080086d0 <malloc>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	; (80086dc <malloc+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f000 bd65 	b.w	80091a4 <_malloc_r>
 80086da:	bf00      	nop
 80086dc:	2000000c 	.word	0x2000000c

080086e0 <__ascii_mbtowc>:
 80086e0:	b082      	sub	sp, #8
 80086e2:	b901      	cbnz	r1, 80086e6 <__ascii_mbtowc+0x6>
 80086e4:	a901      	add	r1, sp, #4
 80086e6:	b142      	cbz	r2, 80086fa <__ascii_mbtowc+0x1a>
 80086e8:	b14b      	cbz	r3, 80086fe <__ascii_mbtowc+0x1e>
 80086ea:	7813      	ldrb	r3, [r2, #0]
 80086ec:	600b      	str	r3, [r1, #0]
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	1e10      	subs	r0, r2, #0
 80086f2:	bf18      	it	ne
 80086f4:	2001      	movne	r0, #1
 80086f6:	b002      	add	sp, #8
 80086f8:	4770      	bx	lr
 80086fa:	4610      	mov	r0, r2
 80086fc:	e7fb      	b.n	80086f6 <__ascii_mbtowc+0x16>
 80086fe:	f06f 0001 	mvn.w	r0, #1
 8008702:	e7f8      	b.n	80086f6 <__ascii_mbtowc+0x16>

08008704 <memchr>:
 8008704:	4603      	mov	r3, r0
 8008706:	b510      	push	{r4, lr}
 8008708:	b2c9      	uxtb	r1, r1
 800870a:	4402      	add	r2, r0
 800870c:	4293      	cmp	r3, r2
 800870e:	4618      	mov	r0, r3
 8008710:	d101      	bne.n	8008716 <memchr+0x12>
 8008712:	2000      	movs	r0, #0
 8008714:	e003      	b.n	800871e <memchr+0x1a>
 8008716:	7804      	ldrb	r4, [r0, #0]
 8008718:	3301      	adds	r3, #1
 800871a:	428c      	cmp	r4, r1
 800871c:	d1f6      	bne.n	800870c <memchr+0x8>
 800871e:	bd10      	pop	{r4, pc}

08008720 <memcpy>:
 8008720:	440a      	add	r2, r1
 8008722:	4291      	cmp	r1, r2
 8008724:	f100 33ff 	add.w	r3, r0, #4294967295
 8008728:	d100      	bne.n	800872c <memcpy+0xc>
 800872a:	4770      	bx	lr
 800872c:	b510      	push	{r4, lr}
 800872e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008732:	4291      	cmp	r1, r2
 8008734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008738:	d1f9      	bne.n	800872e <memcpy+0xe>
 800873a:	bd10      	pop	{r4, pc}

0800873c <_Balloc>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	b976      	cbnz	r6, 8008764 <_Balloc+0x28>
 8008746:	2010      	movs	r0, #16
 8008748:	f7ff ffc2 	bl	80086d0 <malloc>
 800874c:	4602      	mov	r2, r0
 800874e:	6260      	str	r0, [r4, #36]	; 0x24
 8008750:	b920      	cbnz	r0, 800875c <_Balloc+0x20>
 8008752:	2166      	movs	r1, #102	; 0x66
 8008754:	4b17      	ldr	r3, [pc, #92]	; (80087b4 <_Balloc+0x78>)
 8008756:	4818      	ldr	r0, [pc, #96]	; (80087b8 <_Balloc+0x7c>)
 8008758:	f000 ff2c 	bl	80095b4 <__assert_func>
 800875c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008760:	6006      	str	r6, [r0, #0]
 8008762:	60c6      	str	r6, [r0, #12]
 8008764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008766:	68f3      	ldr	r3, [r6, #12]
 8008768:	b183      	cbz	r3, 800878c <_Balloc+0x50>
 800876a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008772:	b9b8      	cbnz	r0, 80087a4 <_Balloc+0x68>
 8008774:	2101      	movs	r1, #1
 8008776:	fa01 f605 	lsl.w	r6, r1, r5
 800877a:	1d72      	adds	r2, r6, #5
 800877c:	4620      	mov	r0, r4
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	f000 fc94 	bl	80090ac <_calloc_r>
 8008784:	b160      	cbz	r0, 80087a0 <_Balloc+0x64>
 8008786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800878a:	e00e      	b.n	80087aa <_Balloc+0x6e>
 800878c:	2221      	movs	r2, #33	; 0x21
 800878e:	2104      	movs	r1, #4
 8008790:	4620      	mov	r0, r4
 8008792:	f000 fc8b 	bl	80090ac <_calloc_r>
 8008796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008798:	60f0      	str	r0, [r6, #12]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e4      	bne.n	800876a <_Balloc+0x2e>
 80087a0:	2000      	movs	r0, #0
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	6802      	ldr	r2, [r0, #0]
 80087a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087aa:	2300      	movs	r3, #0
 80087ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087b0:	e7f7      	b.n	80087a2 <_Balloc+0x66>
 80087b2:	bf00      	nop
 80087b4:	0800bd1e 	.word	0x0800bd1e
 80087b8:	0800be1c 	.word	0x0800be1c

080087bc <_Bfree>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c0:	4605      	mov	r5, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	b976      	cbnz	r6, 80087e4 <_Bfree+0x28>
 80087c6:	2010      	movs	r0, #16
 80087c8:	f7ff ff82 	bl	80086d0 <malloc>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6268      	str	r0, [r5, #36]	; 0x24
 80087d0:	b920      	cbnz	r0, 80087dc <_Bfree+0x20>
 80087d2:	218a      	movs	r1, #138	; 0x8a
 80087d4:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <_Bfree+0x3c>)
 80087d6:	4809      	ldr	r0, [pc, #36]	; (80087fc <_Bfree+0x40>)
 80087d8:	f000 feec 	bl	80095b4 <__assert_func>
 80087dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e0:	6006      	str	r6, [r0, #0]
 80087e2:	60c6      	str	r6, [r0, #12]
 80087e4:	b13c      	cbz	r4, 80087f6 <_Bfree+0x3a>
 80087e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087f0:	6021      	str	r1, [r4, #0]
 80087f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	0800bd1e 	.word	0x0800bd1e
 80087fc:	0800be1c 	.word	0x0800be1c

08008800 <__multadd>:
 8008800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008804:	4607      	mov	r7, r0
 8008806:	460c      	mov	r4, r1
 8008808:	461e      	mov	r6, r3
 800880a:	2000      	movs	r0, #0
 800880c:	690d      	ldr	r5, [r1, #16]
 800880e:	f101 0c14 	add.w	ip, r1, #20
 8008812:	f8dc 3000 	ldr.w	r3, [ip]
 8008816:	3001      	adds	r0, #1
 8008818:	b299      	uxth	r1, r3
 800881a:	fb02 6101 	mla	r1, r2, r1, r6
 800881e:	0c1e      	lsrs	r6, r3, #16
 8008820:	0c0b      	lsrs	r3, r1, #16
 8008822:	fb02 3306 	mla	r3, r2, r6, r3
 8008826:	b289      	uxth	r1, r1
 8008828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800882c:	4285      	cmp	r5, r0
 800882e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008832:	f84c 1b04 	str.w	r1, [ip], #4
 8008836:	dcec      	bgt.n	8008812 <__multadd+0x12>
 8008838:	b30e      	cbz	r6, 800887e <__multadd+0x7e>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	42ab      	cmp	r3, r5
 800883e:	dc19      	bgt.n	8008874 <__multadd+0x74>
 8008840:	6861      	ldr	r1, [r4, #4]
 8008842:	4638      	mov	r0, r7
 8008844:	3101      	adds	r1, #1
 8008846:	f7ff ff79 	bl	800873c <_Balloc>
 800884a:	4680      	mov	r8, r0
 800884c:	b928      	cbnz	r0, 800885a <__multadd+0x5a>
 800884e:	4602      	mov	r2, r0
 8008850:	21b5      	movs	r1, #181	; 0xb5
 8008852:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <__multadd+0x84>)
 8008854:	480c      	ldr	r0, [pc, #48]	; (8008888 <__multadd+0x88>)
 8008856:	f000 fead 	bl	80095b4 <__assert_func>
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	f104 010c 	add.w	r1, r4, #12
 8008860:	3202      	adds	r2, #2
 8008862:	0092      	lsls	r2, r2, #2
 8008864:	300c      	adds	r0, #12
 8008866:	f7ff ff5b 	bl	8008720 <memcpy>
 800886a:	4621      	mov	r1, r4
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff ffa5 	bl	80087bc <_Bfree>
 8008872:	4644      	mov	r4, r8
 8008874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008878:	3501      	adds	r5, #1
 800887a:	615e      	str	r6, [r3, #20]
 800887c:	6125      	str	r5, [r4, #16]
 800887e:	4620      	mov	r0, r4
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	0800bd90 	.word	0x0800bd90
 8008888:	0800be1c 	.word	0x0800be1c

0800888c <__s2b>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	4615      	mov	r5, r2
 8008892:	2209      	movs	r2, #9
 8008894:	461f      	mov	r7, r3
 8008896:	3308      	adds	r3, #8
 8008898:	460c      	mov	r4, r1
 800889a:	fb93 f3f2 	sdiv	r3, r3, r2
 800889e:	4606      	mov	r6, r0
 80088a0:	2201      	movs	r2, #1
 80088a2:	2100      	movs	r1, #0
 80088a4:	429a      	cmp	r2, r3
 80088a6:	db09      	blt.n	80088bc <__s2b+0x30>
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff ff47 	bl	800873c <_Balloc>
 80088ae:	b940      	cbnz	r0, 80088c2 <__s2b+0x36>
 80088b0:	4602      	mov	r2, r0
 80088b2:	21ce      	movs	r1, #206	; 0xce
 80088b4:	4b18      	ldr	r3, [pc, #96]	; (8008918 <__s2b+0x8c>)
 80088b6:	4819      	ldr	r0, [pc, #100]	; (800891c <__s2b+0x90>)
 80088b8:	f000 fe7c 	bl	80095b4 <__assert_func>
 80088bc:	0052      	lsls	r2, r2, #1
 80088be:	3101      	adds	r1, #1
 80088c0:	e7f0      	b.n	80088a4 <__s2b+0x18>
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	2d09      	cmp	r5, #9
 80088c6:	6143      	str	r3, [r0, #20]
 80088c8:	f04f 0301 	mov.w	r3, #1
 80088cc:	6103      	str	r3, [r0, #16]
 80088ce:	dd16      	ble.n	80088fe <__s2b+0x72>
 80088d0:	f104 0909 	add.w	r9, r4, #9
 80088d4:	46c8      	mov	r8, r9
 80088d6:	442c      	add	r4, r5
 80088d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088dc:	4601      	mov	r1, r0
 80088de:	220a      	movs	r2, #10
 80088e0:	4630      	mov	r0, r6
 80088e2:	3b30      	subs	r3, #48	; 0x30
 80088e4:	f7ff ff8c 	bl	8008800 <__multadd>
 80088e8:	45a0      	cmp	r8, r4
 80088ea:	d1f5      	bne.n	80088d8 <__s2b+0x4c>
 80088ec:	f1a5 0408 	sub.w	r4, r5, #8
 80088f0:	444c      	add	r4, r9
 80088f2:	1b2d      	subs	r5, r5, r4
 80088f4:	1963      	adds	r3, r4, r5
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	db04      	blt.n	8008904 <__s2b+0x78>
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	2509      	movs	r5, #9
 8008900:	340a      	adds	r4, #10
 8008902:	e7f6      	b.n	80088f2 <__s2b+0x66>
 8008904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008908:	4601      	mov	r1, r0
 800890a:	220a      	movs	r2, #10
 800890c:	4630      	mov	r0, r6
 800890e:	3b30      	subs	r3, #48	; 0x30
 8008910:	f7ff ff76 	bl	8008800 <__multadd>
 8008914:	e7ee      	b.n	80088f4 <__s2b+0x68>
 8008916:	bf00      	nop
 8008918:	0800bd90 	.word	0x0800bd90
 800891c:	0800be1c 	.word	0x0800be1c

08008920 <__hi0bits>:
 8008920:	0c02      	lsrs	r2, r0, #16
 8008922:	0412      	lsls	r2, r2, #16
 8008924:	4603      	mov	r3, r0
 8008926:	b9ca      	cbnz	r2, 800895c <__hi0bits+0x3c>
 8008928:	0403      	lsls	r3, r0, #16
 800892a:	2010      	movs	r0, #16
 800892c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008930:	bf04      	itt	eq
 8008932:	021b      	lsleq	r3, r3, #8
 8008934:	3008      	addeq	r0, #8
 8008936:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800893a:	bf04      	itt	eq
 800893c:	011b      	lsleq	r3, r3, #4
 800893e:	3004      	addeq	r0, #4
 8008940:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008944:	bf04      	itt	eq
 8008946:	009b      	lsleq	r3, r3, #2
 8008948:	3002      	addeq	r0, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	db05      	blt.n	800895a <__hi0bits+0x3a>
 800894e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008952:	f100 0001 	add.w	r0, r0, #1
 8008956:	bf08      	it	eq
 8008958:	2020      	moveq	r0, #32
 800895a:	4770      	bx	lr
 800895c:	2000      	movs	r0, #0
 800895e:	e7e5      	b.n	800892c <__hi0bits+0xc>

08008960 <__lo0bits>:
 8008960:	6803      	ldr	r3, [r0, #0]
 8008962:	4602      	mov	r2, r0
 8008964:	f013 0007 	ands.w	r0, r3, #7
 8008968:	d00b      	beq.n	8008982 <__lo0bits+0x22>
 800896a:	07d9      	lsls	r1, r3, #31
 800896c:	d421      	bmi.n	80089b2 <__lo0bits+0x52>
 800896e:	0798      	lsls	r0, r3, #30
 8008970:	bf49      	itett	mi
 8008972:	085b      	lsrmi	r3, r3, #1
 8008974:	089b      	lsrpl	r3, r3, #2
 8008976:	2001      	movmi	r0, #1
 8008978:	6013      	strmi	r3, [r2, #0]
 800897a:	bf5c      	itt	pl
 800897c:	2002      	movpl	r0, #2
 800897e:	6013      	strpl	r3, [r2, #0]
 8008980:	4770      	bx	lr
 8008982:	b299      	uxth	r1, r3
 8008984:	b909      	cbnz	r1, 800898a <__lo0bits+0x2a>
 8008986:	2010      	movs	r0, #16
 8008988:	0c1b      	lsrs	r3, r3, #16
 800898a:	b2d9      	uxtb	r1, r3
 800898c:	b909      	cbnz	r1, 8008992 <__lo0bits+0x32>
 800898e:	3008      	adds	r0, #8
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	0719      	lsls	r1, r3, #28
 8008994:	bf04      	itt	eq
 8008996:	091b      	lsreq	r3, r3, #4
 8008998:	3004      	addeq	r0, #4
 800899a:	0799      	lsls	r1, r3, #30
 800899c:	bf04      	itt	eq
 800899e:	089b      	lsreq	r3, r3, #2
 80089a0:	3002      	addeq	r0, #2
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	d403      	bmi.n	80089ae <__lo0bits+0x4e>
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	f100 0001 	add.w	r0, r0, #1
 80089ac:	d003      	beq.n	80089b6 <__lo0bits+0x56>
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	4770      	bx	lr
 80089b2:	2000      	movs	r0, #0
 80089b4:	4770      	bx	lr
 80089b6:	2020      	movs	r0, #32
 80089b8:	4770      	bx	lr
	...

080089bc <__i2b>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	2101      	movs	r1, #1
 80089c2:	f7ff febb 	bl	800873c <_Balloc>
 80089c6:	4602      	mov	r2, r0
 80089c8:	b928      	cbnz	r0, 80089d6 <__i2b+0x1a>
 80089ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089ce:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <__i2b+0x24>)
 80089d0:	4804      	ldr	r0, [pc, #16]	; (80089e4 <__i2b+0x28>)
 80089d2:	f000 fdef 	bl	80095b4 <__assert_func>
 80089d6:	2301      	movs	r3, #1
 80089d8:	6144      	str	r4, [r0, #20]
 80089da:	6103      	str	r3, [r0, #16]
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	0800bd90 	.word	0x0800bd90
 80089e4:	0800be1c 	.word	0x0800be1c

080089e8 <__multiply>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	4691      	mov	r9, r2
 80089ee:	690a      	ldr	r2, [r1, #16]
 80089f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089f4:	460c      	mov	r4, r1
 80089f6:	429a      	cmp	r2, r3
 80089f8:	bfbe      	ittt	lt
 80089fa:	460b      	movlt	r3, r1
 80089fc:	464c      	movlt	r4, r9
 80089fe:	4699      	movlt	r9, r3
 8008a00:	6927      	ldr	r7, [r4, #16]
 8008a02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	6861      	ldr	r1, [r4, #4]
 8008a0a:	eb07 060a 	add.w	r6, r7, sl
 8008a0e:	42b3      	cmp	r3, r6
 8008a10:	b085      	sub	sp, #20
 8008a12:	bfb8      	it	lt
 8008a14:	3101      	addlt	r1, #1
 8008a16:	f7ff fe91 	bl	800873c <_Balloc>
 8008a1a:	b930      	cbnz	r0, 8008a2a <__multiply+0x42>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	f240 115d 	movw	r1, #349	; 0x15d
 8008a22:	4b43      	ldr	r3, [pc, #268]	; (8008b30 <__multiply+0x148>)
 8008a24:	4843      	ldr	r0, [pc, #268]	; (8008b34 <__multiply+0x14c>)
 8008a26:	f000 fdc5 	bl	80095b4 <__assert_func>
 8008a2a:	f100 0514 	add.w	r5, r0, #20
 8008a2e:	462b      	mov	r3, r5
 8008a30:	2200      	movs	r2, #0
 8008a32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a36:	4543      	cmp	r3, r8
 8008a38:	d321      	bcc.n	8008a7e <__multiply+0x96>
 8008a3a:	f104 0314 	add.w	r3, r4, #20
 8008a3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a42:	f109 0314 	add.w	r3, r9, #20
 8008a46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a4a:	9202      	str	r2, [sp, #8]
 8008a4c:	1b3a      	subs	r2, r7, r4
 8008a4e:	3a15      	subs	r2, #21
 8008a50:	f022 0203 	bic.w	r2, r2, #3
 8008a54:	3204      	adds	r2, #4
 8008a56:	f104 0115 	add.w	r1, r4, #21
 8008a5a:	428f      	cmp	r7, r1
 8008a5c:	bf38      	it	cc
 8008a5e:	2204      	movcc	r2, #4
 8008a60:	9201      	str	r2, [sp, #4]
 8008a62:	9a02      	ldr	r2, [sp, #8]
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d80c      	bhi.n	8008a84 <__multiply+0x9c>
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	dd03      	ble.n	8008a76 <__multiply+0x8e>
 8008a6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d059      	beq.n	8008b2a <__multiply+0x142>
 8008a76:	6106      	str	r6, [r0, #16]
 8008a78:	b005      	add	sp, #20
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	f843 2b04 	str.w	r2, [r3], #4
 8008a82:	e7d8      	b.n	8008a36 <__multiply+0x4e>
 8008a84:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a88:	f1ba 0f00 	cmp.w	sl, #0
 8008a8c:	d023      	beq.n	8008ad6 <__multiply+0xee>
 8008a8e:	46a9      	mov	r9, r5
 8008a90:	f04f 0c00 	mov.w	ip, #0
 8008a94:	f104 0e14 	add.w	lr, r4, #20
 8008a98:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a9c:	f8d9 1000 	ldr.w	r1, [r9]
 8008aa0:	fa1f fb82 	uxth.w	fp, r2
 8008aa4:	b289      	uxth	r1, r1
 8008aa6:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aaa:	4461      	add	r1, ip
 8008aac:	f8d9 c000 	ldr.w	ip, [r9]
 8008ab0:	0c12      	lsrs	r2, r2, #16
 8008ab2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008ab6:	fb0a c202 	mla	r2, sl, r2, ip
 8008aba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008abe:	b289      	uxth	r1, r1
 8008ac0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ac4:	4577      	cmp	r7, lr
 8008ac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aca:	f849 1b04 	str.w	r1, [r9], #4
 8008ace:	d8e3      	bhi.n	8008a98 <__multiply+0xb0>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	f845 c002 	str.w	ip, [r5, r2]
 8008ad6:	9a03      	ldr	r2, [sp, #12]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ade:	f1b9 0f00 	cmp.w	r9, #0
 8008ae2:	d020      	beq.n	8008b26 <__multiply+0x13e>
 8008ae4:	46ae      	mov	lr, r5
 8008ae6:	f04f 0a00 	mov.w	sl, #0
 8008aea:	6829      	ldr	r1, [r5, #0]
 8008aec:	f104 0c14 	add.w	ip, r4, #20
 8008af0:	f8bc b000 	ldrh.w	fp, [ip]
 8008af4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008af8:	b289      	uxth	r1, r1
 8008afa:	fb09 220b 	mla	r2, r9, fp, r2
 8008afe:	4492      	add	sl, r2
 8008b00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b04:	f84e 1b04 	str.w	r1, [lr], #4
 8008b08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b0c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b10:	0c12      	lsrs	r2, r2, #16
 8008b12:	fb09 1102 	mla	r1, r9, r2, r1
 8008b16:	4567      	cmp	r7, ip
 8008b18:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b20:	d8e6      	bhi.n	8008af0 <__multiply+0x108>
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	50a9      	str	r1, [r5, r2]
 8008b26:	3504      	adds	r5, #4
 8008b28:	e79b      	b.n	8008a62 <__multiply+0x7a>
 8008b2a:	3e01      	subs	r6, #1
 8008b2c:	e79d      	b.n	8008a6a <__multiply+0x82>
 8008b2e:	bf00      	nop
 8008b30:	0800bd90 	.word	0x0800bd90
 8008b34:	0800be1c 	.word	0x0800be1c

08008b38 <__pow5mult>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	4615      	mov	r5, r2
 8008b3e:	f012 0203 	ands.w	r2, r2, #3
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	d007      	beq.n	8008b58 <__pow5mult+0x20>
 8008b48:	4c25      	ldr	r4, [pc, #148]	; (8008be0 <__pow5mult+0xa8>)
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b52:	f7ff fe55 	bl	8008800 <__multadd>
 8008b56:	4607      	mov	r7, r0
 8008b58:	10ad      	asrs	r5, r5, #2
 8008b5a:	d03d      	beq.n	8008bd8 <__pow5mult+0xa0>
 8008b5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b5e:	b97c      	cbnz	r4, 8008b80 <__pow5mult+0x48>
 8008b60:	2010      	movs	r0, #16
 8008b62:	f7ff fdb5 	bl	80086d0 <malloc>
 8008b66:	4602      	mov	r2, r0
 8008b68:	6270      	str	r0, [r6, #36]	; 0x24
 8008b6a:	b928      	cbnz	r0, 8008b78 <__pow5mult+0x40>
 8008b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b70:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <__pow5mult+0xac>)
 8008b72:	481d      	ldr	r0, [pc, #116]	; (8008be8 <__pow5mult+0xb0>)
 8008b74:	f000 fd1e 	bl	80095b4 <__assert_func>
 8008b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b7c:	6004      	str	r4, [r0, #0]
 8008b7e:	60c4      	str	r4, [r0, #12]
 8008b80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b88:	b94c      	cbnz	r4, 8008b9e <__pow5mult+0x66>
 8008b8a:	f240 2171 	movw	r1, #625	; 0x271
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ff14 	bl	80089bc <__i2b>
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	f04f 0900 	mov.w	r9, #0
 8008ba2:	07eb      	lsls	r3, r5, #31
 8008ba4:	d50a      	bpl.n	8008bbc <__pow5mult+0x84>
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	4622      	mov	r2, r4
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ff1c 	bl	80089e8 <__multiply>
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff fe01 	bl	80087bc <_Bfree>
 8008bba:	4647      	mov	r7, r8
 8008bbc:	106d      	asrs	r5, r5, #1
 8008bbe:	d00b      	beq.n	8008bd8 <__pow5mult+0xa0>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	b938      	cbnz	r0, 8008bd4 <__pow5mult+0x9c>
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff ff0d 	bl	80089e8 <__multiply>
 8008bce:	6020      	str	r0, [r4, #0]
 8008bd0:	f8c0 9000 	str.w	r9, [r0]
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	e7e4      	b.n	8008ba2 <__pow5mult+0x6a>
 8008bd8:	4638      	mov	r0, r7
 8008bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bde:	bf00      	nop
 8008be0:	0800bf68 	.word	0x0800bf68
 8008be4:	0800bd1e 	.word	0x0800bd1e
 8008be8:	0800be1c 	.word	0x0800be1c

08008bec <__lshift>:
 8008bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	4691      	mov	r9, r2
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	6849      	ldr	r1, [r1, #4]
 8008bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c04:	f108 0601 	add.w	r6, r8, #1
 8008c08:	42b3      	cmp	r3, r6
 8008c0a:	db0b      	blt.n	8008c24 <__lshift+0x38>
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f7ff fd95 	bl	800873c <_Balloc>
 8008c12:	4605      	mov	r5, r0
 8008c14:	b948      	cbnz	r0, 8008c2a <__lshift+0x3e>
 8008c16:	4602      	mov	r2, r0
 8008c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c1c:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <__lshift+0xd8>)
 8008c1e:	482a      	ldr	r0, [pc, #168]	; (8008cc8 <__lshift+0xdc>)
 8008c20:	f000 fcc8 	bl	80095b4 <__assert_func>
 8008c24:	3101      	adds	r1, #1
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	e7ee      	b.n	8008c08 <__lshift+0x1c>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f100 0114 	add.w	r1, r0, #20
 8008c30:	f100 0210 	add.w	r2, r0, #16
 8008c34:	4618      	mov	r0, r3
 8008c36:	4553      	cmp	r3, sl
 8008c38:	db37      	blt.n	8008caa <__lshift+0xbe>
 8008c3a:	6920      	ldr	r0, [r4, #16]
 8008c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c40:	f104 0314 	add.w	r3, r4, #20
 8008c44:	f019 091f 	ands.w	r9, r9, #31
 8008c48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c50:	d02f      	beq.n	8008cb2 <__lshift+0xc6>
 8008c52:	468a      	mov	sl, r1
 8008c54:	f04f 0c00 	mov.w	ip, #0
 8008c58:	f1c9 0e20 	rsb	lr, r9, #32
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	fa02 f209 	lsl.w	r2, r2, r9
 8008c62:	ea42 020c 	orr.w	r2, r2, ip
 8008c66:	f84a 2b04 	str.w	r2, [sl], #4
 8008c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c74:	d8f2      	bhi.n	8008c5c <__lshift+0x70>
 8008c76:	1b03      	subs	r3, r0, r4
 8008c78:	3b15      	subs	r3, #21
 8008c7a:	f023 0303 	bic.w	r3, r3, #3
 8008c7e:	3304      	adds	r3, #4
 8008c80:	f104 0215 	add.w	r2, r4, #21
 8008c84:	4290      	cmp	r0, r2
 8008c86:	bf38      	it	cc
 8008c88:	2304      	movcc	r3, #4
 8008c8a:	f841 c003 	str.w	ip, [r1, r3]
 8008c8e:	f1bc 0f00 	cmp.w	ip, #0
 8008c92:	d001      	beq.n	8008c98 <__lshift+0xac>
 8008c94:	f108 0602 	add.w	r6, r8, #2
 8008c98:	3e01      	subs	r6, #1
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	612e      	str	r6, [r5, #16]
 8008ca0:	f7ff fd8c 	bl	80087bc <_Bfree>
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cae:	3301      	adds	r3, #1
 8008cb0:	e7c1      	b.n	8008c36 <__lshift+0x4a>
 8008cb2:	3904      	subs	r1, #4
 8008cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cbe:	d8f9      	bhi.n	8008cb4 <__lshift+0xc8>
 8008cc0:	e7ea      	b.n	8008c98 <__lshift+0xac>
 8008cc2:	bf00      	nop
 8008cc4:	0800bd90 	.word	0x0800bd90
 8008cc8:	0800be1c 	.word	0x0800be1c

08008ccc <__mcmp>:
 8008ccc:	4603      	mov	r3, r0
 8008cce:	690a      	ldr	r2, [r1, #16]
 8008cd0:	6900      	ldr	r0, [r0, #16]
 8008cd2:	b530      	push	{r4, r5, lr}
 8008cd4:	1a80      	subs	r0, r0, r2
 8008cd6:	d10d      	bne.n	8008cf4 <__mcmp+0x28>
 8008cd8:	3314      	adds	r3, #20
 8008cda:	3114      	adds	r1, #20
 8008cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008cec:	4295      	cmp	r5, r2
 8008cee:	d002      	beq.n	8008cf6 <__mcmp+0x2a>
 8008cf0:	d304      	bcc.n	8008cfc <__mcmp+0x30>
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	bd30      	pop	{r4, r5, pc}
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	d3f4      	bcc.n	8008ce4 <__mcmp+0x18>
 8008cfa:	e7fb      	b.n	8008cf4 <__mcmp+0x28>
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	e7f8      	b.n	8008cf4 <__mcmp+0x28>
	...

08008d04 <__mdiff>:
 8008d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	460d      	mov	r5, r1
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4628      	mov	r0, r5
 8008d10:	4614      	mov	r4, r2
 8008d12:	f7ff ffdb 	bl	8008ccc <__mcmp>
 8008d16:	1e06      	subs	r6, r0, #0
 8008d18:	d111      	bne.n	8008d3e <__mdiff+0x3a>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff fd0d 	bl	800873c <_Balloc>
 8008d22:	4602      	mov	r2, r0
 8008d24:	b928      	cbnz	r0, 8008d32 <__mdiff+0x2e>
 8008d26:	f240 2132 	movw	r1, #562	; 0x232
 8008d2a:	4b3a      	ldr	r3, [pc, #232]	; (8008e14 <__mdiff+0x110>)
 8008d2c:	483a      	ldr	r0, [pc, #232]	; (8008e18 <__mdiff+0x114>)
 8008d2e:	f000 fc41 	bl	80095b4 <__assert_func>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	bfa4      	itt	ge
 8008d40:	4623      	movge	r3, r4
 8008d42:	462c      	movge	r4, r5
 8008d44:	4638      	mov	r0, r7
 8008d46:	6861      	ldr	r1, [r4, #4]
 8008d48:	bfa6      	itte	ge
 8008d4a:	461d      	movge	r5, r3
 8008d4c:	2600      	movge	r6, #0
 8008d4e:	2601      	movlt	r6, #1
 8008d50:	f7ff fcf4 	bl	800873c <_Balloc>
 8008d54:	4602      	mov	r2, r0
 8008d56:	b918      	cbnz	r0, 8008d60 <__mdiff+0x5c>
 8008d58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d5c:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <__mdiff+0x110>)
 8008d5e:	e7e5      	b.n	8008d2c <__mdiff+0x28>
 8008d60:	f102 0814 	add.w	r8, r2, #20
 8008d64:	46c2      	mov	sl, r8
 8008d66:	f04f 0c00 	mov.w	ip, #0
 8008d6a:	6927      	ldr	r7, [r4, #16]
 8008d6c:	60c6      	str	r6, [r0, #12]
 8008d6e:	692e      	ldr	r6, [r5, #16]
 8008d70:	f104 0014 	add.w	r0, r4, #20
 8008d74:	f105 0914 	add.w	r9, r5, #20
 8008d78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d80:	3410      	adds	r4, #16
 8008d82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008d86:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d8a:	fa1f f18b 	uxth.w	r1, fp
 8008d8e:	448c      	add	ip, r1
 8008d90:	b299      	uxth	r1, r3
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	ebac 0101 	sub.w	r1, ip, r1
 8008d98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008da0:	b289      	uxth	r1, r1
 8008da2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008da6:	454e      	cmp	r6, r9
 8008da8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008dac:	f84a 3b04 	str.w	r3, [sl], #4
 8008db0:	d8e7      	bhi.n	8008d82 <__mdiff+0x7e>
 8008db2:	1b73      	subs	r3, r6, r5
 8008db4:	3b15      	subs	r3, #21
 8008db6:	f023 0303 	bic.w	r3, r3, #3
 8008dba:	3515      	adds	r5, #21
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	42ae      	cmp	r6, r5
 8008dc0:	bf38      	it	cc
 8008dc2:	2304      	movcc	r3, #4
 8008dc4:	4418      	add	r0, r3
 8008dc6:	4443      	add	r3, r8
 8008dc8:	461e      	mov	r6, r3
 8008dca:	4605      	mov	r5, r0
 8008dcc:	4575      	cmp	r5, lr
 8008dce:	d30e      	bcc.n	8008dee <__mdiff+0xea>
 8008dd0:	f10e 0103 	add.w	r1, lr, #3
 8008dd4:	1a09      	subs	r1, r1, r0
 8008dd6:	f021 0103 	bic.w	r1, r1, #3
 8008dda:	3803      	subs	r0, #3
 8008ddc:	4586      	cmp	lr, r0
 8008dde:	bf38      	it	cc
 8008de0:	2100      	movcc	r1, #0
 8008de2:	4419      	add	r1, r3
 8008de4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008de8:	b18b      	cbz	r3, 8008e0e <__mdiff+0x10a>
 8008dea:	6117      	str	r7, [r2, #16]
 8008dec:	e7a4      	b.n	8008d38 <__mdiff+0x34>
 8008dee:	f855 8b04 	ldr.w	r8, [r5], #4
 8008df2:	fa1f f188 	uxth.w	r1, r8
 8008df6:	4461      	add	r1, ip
 8008df8:	140c      	asrs	r4, r1, #16
 8008dfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dfe:	b289      	uxth	r1, r1
 8008e00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e04:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008e08:	f846 1b04 	str.w	r1, [r6], #4
 8008e0c:	e7de      	b.n	8008dcc <__mdiff+0xc8>
 8008e0e:	3f01      	subs	r7, #1
 8008e10:	e7e8      	b.n	8008de4 <__mdiff+0xe0>
 8008e12:	bf00      	nop
 8008e14:	0800bd90 	.word	0x0800bd90
 8008e18:	0800be1c 	.word	0x0800be1c

08008e1c <__ulp>:
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <__ulp+0x48>)
 8008e1e:	400b      	ands	r3, r1
 8008e20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd02      	ble.n	8008e2e <__ulp+0x12>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4770      	bx	lr
 8008e2e:	425b      	negs	r3, r3
 8008e30:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008e34:	f04f 0000 	mov.w	r0, #0
 8008e38:	f04f 0100 	mov.w	r1, #0
 8008e3c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e40:	da04      	bge.n	8008e4c <__ulp+0x30>
 8008e42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e46:	fa43 f102 	asr.w	r1, r3, r2
 8008e4a:	4770      	bx	lr
 8008e4c:	f1a2 0314 	sub.w	r3, r2, #20
 8008e50:	2b1e      	cmp	r3, #30
 8008e52:	bfd6      	itet	le
 8008e54:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008e58:	2301      	movgt	r3, #1
 8008e5a:	fa22 f303 	lsrle.w	r3, r2, r3
 8008e5e:	4618      	mov	r0, r3
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	7ff00000 	.word	0x7ff00000

08008e68 <__b2d>:
 8008e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	6907      	ldr	r7, [r0, #16]
 8008e6e:	f100 0914 	add.w	r9, r0, #20
 8008e72:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008e76:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008e7a:	f1a7 0804 	sub.w	r8, r7, #4
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7ff fd4e 	bl	8008920 <__hi0bits>
 8008e84:	f1c0 0320 	rsb	r3, r0, #32
 8008e88:	280a      	cmp	r0, #10
 8008e8a:	600b      	str	r3, [r1, #0]
 8008e8c:	491f      	ldr	r1, [pc, #124]	; (8008f0c <__b2d+0xa4>)
 8008e8e:	dc17      	bgt.n	8008ec0 <__b2d+0x58>
 8008e90:	45c1      	cmp	r9, r8
 8008e92:	bf28      	it	cs
 8008e94:	2200      	movcs	r2, #0
 8008e96:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e9a:	fa26 f30c 	lsr.w	r3, r6, ip
 8008e9e:	bf38      	it	cc
 8008ea0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ea4:	ea43 0501 	orr.w	r5, r3, r1
 8008ea8:	f100 0315 	add.w	r3, r0, #21
 8008eac:	fa06 f303 	lsl.w	r3, r6, r3
 8008eb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008eb4:	ea43 0402 	orr.w	r4, r3, r2
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec0:	45c1      	cmp	r9, r8
 8008ec2:	bf2e      	itee	cs
 8008ec4:	2200      	movcs	r2, #0
 8008ec6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008eca:	f1a7 0808 	subcc.w	r8, r7, #8
 8008ece:	f1b0 030b 	subs.w	r3, r0, #11
 8008ed2:	d016      	beq.n	8008f02 <__b2d+0x9a>
 8008ed4:	f1c3 0720 	rsb	r7, r3, #32
 8008ed8:	fa22 f107 	lsr.w	r1, r2, r7
 8008edc:	45c8      	cmp	r8, r9
 8008ede:	fa06 f603 	lsl.w	r6, r6, r3
 8008ee2:	ea46 0601 	orr.w	r6, r6, r1
 8008ee6:	bf94      	ite	ls
 8008ee8:	2100      	movls	r1, #0
 8008eea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008eee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008ef2:	fa02 f003 	lsl.w	r0, r2, r3
 8008ef6:	40f9      	lsrs	r1, r7
 8008ef8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008efc:	ea40 0401 	orr.w	r4, r0, r1
 8008f00:	e7da      	b.n	8008eb8 <__b2d+0x50>
 8008f02:	4614      	mov	r4, r2
 8008f04:	ea46 0501 	orr.w	r5, r6, r1
 8008f08:	e7d6      	b.n	8008eb8 <__b2d+0x50>
 8008f0a:	bf00      	nop
 8008f0c:	3ff00000 	.word	0x3ff00000

08008f10 <__d2b>:
 8008f10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008f14:	2101      	movs	r1, #1
 8008f16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008f1a:	4690      	mov	r8, r2
 8008f1c:	461d      	mov	r5, r3
 8008f1e:	f7ff fc0d 	bl	800873c <_Balloc>
 8008f22:	4604      	mov	r4, r0
 8008f24:	b930      	cbnz	r0, 8008f34 <__d2b+0x24>
 8008f26:	4602      	mov	r2, r0
 8008f28:	f240 310a 	movw	r1, #778	; 0x30a
 8008f2c:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <__d2b+0xb0>)
 8008f2e:	4825      	ldr	r0, [pc, #148]	; (8008fc4 <__d2b+0xb4>)
 8008f30:	f000 fb40 	bl	80095b4 <__assert_func>
 8008f34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008f38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008f3c:	bb2d      	cbnz	r5, 8008f8a <__d2b+0x7a>
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	f1b8 0300 	subs.w	r3, r8, #0
 8008f44:	d026      	beq.n	8008f94 <__d2b+0x84>
 8008f46:	4668      	mov	r0, sp
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	f7ff fd09 	bl	8008960 <__lo0bits>
 8008f4e:	9900      	ldr	r1, [sp, #0]
 8008f50:	b1f0      	cbz	r0, 8008f90 <__d2b+0x80>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	f1c0 0320 	rsb	r3, r0, #32
 8008f58:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	40c2      	lsrs	r2, r0
 8008f60:	6163      	str	r3, [r4, #20]
 8008f62:	9201      	str	r2, [sp, #4]
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bf14      	ite	ne
 8008f6a:	2102      	movne	r1, #2
 8008f6c:	2101      	moveq	r1, #1
 8008f6e:	61a3      	str	r3, [r4, #24]
 8008f70:	6121      	str	r1, [r4, #16]
 8008f72:	b1c5      	cbz	r5, 8008fa6 <__d2b+0x96>
 8008f74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f78:	4405      	add	r5, r0
 8008f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f7e:	603d      	str	r5, [r7, #0]
 8008f80:	6030      	str	r0, [r6, #0]
 8008f82:	4620      	mov	r0, r4
 8008f84:	b002      	add	sp, #8
 8008f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f8e:	e7d6      	b.n	8008f3e <__d2b+0x2e>
 8008f90:	6161      	str	r1, [r4, #20]
 8008f92:	e7e7      	b.n	8008f64 <__d2b+0x54>
 8008f94:	a801      	add	r0, sp, #4
 8008f96:	f7ff fce3 	bl	8008960 <__lo0bits>
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	6121      	str	r1, [r4, #16]
 8008fa0:	6163      	str	r3, [r4, #20]
 8008fa2:	3020      	adds	r0, #32
 8008fa4:	e7e5      	b.n	8008f72 <__d2b+0x62>
 8008fa6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008faa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fae:	6038      	str	r0, [r7, #0]
 8008fb0:	6918      	ldr	r0, [r3, #16]
 8008fb2:	f7ff fcb5 	bl	8008920 <__hi0bits>
 8008fb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	e7e1      	b.n	8008f82 <__d2b+0x72>
 8008fbe:	bf00      	nop
 8008fc0:	0800bd90 	.word	0x0800bd90
 8008fc4:	0800be1c 	.word	0x0800be1c

08008fc8 <__ratio>:
 8008fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4688      	mov	r8, r1
 8008fce:	4669      	mov	r1, sp
 8008fd0:	4681      	mov	r9, r0
 8008fd2:	f7ff ff49 	bl	8008e68 <__b2d>
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4640      	mov	r0, r8
 8008fde:	a901      	add	r1, sp, #4
 8008fe0:	f7ff ff42 	bl	8008e68 <__b2d>
 8008fe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fe8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fec:	468b      	mov	fp, r1
 8008fee:	eba3 0c02 	sub.w	ip, r3, r2
 8008ff2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfd5      	itete	le
 8009000:	460a      	movle	r2, r1
 8009002:	462a      	movgt	r2, r5
 8009004:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009008:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800900c:	bfd8      	it	le
 800900e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009012:	465b      	mov	r3, fp
 8009014:	4602      	mov	r2, r0
 8009016:	4639      	mov	r1, r7
 8009018:	4620      	mov	r0, r4
 800901a:	f7f7 fb87 	bl	800072c <__aeabi_ddiv>
 800901e:	b003      	add	sp, #12
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009024 <__copybits>:
 8009024:	3901      	subs	r1, #1
 8009026:	b570      	push	{r4, r5, r6, lr}
 8009028:	1149      	asrs	r1, r1, #5
 800902a:	6914      	ldr	r4, [r2, #16]
 800902c:	3101      	adds	r1, #1
 800902e:	f102 0314 	add.w	r3, r2, #20
 8009032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800903a:	1f05      	subs	r5, r0, #4
 800903c:	42a3      	cmp	r3, r4
 800903e:	d30c      	bcc.n	800905a <__copybits+0x36>
 8009040:	1aa3      	subs	r3, r4, r2
 8009042:	3b11      	subs	r3, #17
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	3211      	adds	r2, #17
 800904a:	42a2      	cmp	r2, r4
 800904c:	bf88      	it	hi
 800904e:	2300      	movhi	r3, #0
 8009050:	4418      	add	r0, r3
 8009052:	2300      	movs	r3, #0
 8009054:	4288      	cmp	r0, r1
 8009056:	d305      	bcc.n	8009064 <__copybits+0x40>
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	f853 6b04 	ldr.w	r6, [r3], #4
 800905e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009062:	e7eb      	b.n	800903c <__copybits+0x18>
 8009064:	f840 3b04 	str.w	r3, [r0], #4
 8009068:	e7f4      	b.n	8009054 <__copybits+0x30>

0800906a <__any_on>:
 800906a:	f100 0214 	add.w	r2, r0, #20
 800906e:	6900      	ldr	r0, [r0, #16]
 8009070:	114b      	asrs	r3, r1, #5
 8009072:	4298      	cmp	r0, r3
 8009074:	b510      	push	{r4, lr}
 8009076:	db11      	blt.n	800909c <__any_on+0x32>
 8009078:	dd0a      	ble.n	8009090 <__any_on+0x26>
 800907a:	f011 011f 	ands.w	r1, r1, #31
 800907e:	d007      	beq.n	8009090 <__any_on+0x26>
 8009080:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009084:	fa24 f001 	lsr.w	r0, r4, r1
 8009088:	fa00 f101 	lsl.w	r1, r0, r1
 800908c:	428c      	cmp	r4, r1
 800908e:	d10b      	bne.n	80090a8 <__any_on+0x3e>
 8009090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009094:	4293      	cmp	r3, r2
 8009096:	d803      	bhi.n	80090a0 <__any_on+0x36>
 8009098:	2000      	movs	r0, #0
 800909a:	bd10      	pop	{r4, pc}
 800909c:	4603      	mov	r3, r0
 800909e:	e7f7      	b.n	8009090 <__any_on+0x26>
 80090a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d0f5      	beq.n	8009094 <__any_on+0x2a>
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7f6      	b.n	800909a <__any_on+0x30>

080090ac <_calloc_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	fba1 5402 	umull	r5, r4, r1, r2
 80090b2:	b934      	cbnz	r4, 80090c2 <_calloc_r+0x16>
 80090b4:	4629      	mov	r1, r5
 80090b6:	f000 f875 	bl	80091a4 <_malloc_r>
 80090ba:	4606      	mov	r6, r0
 80090bc:	b928      	cbnz	r0, 80090ca <_calloc_r+0x1e>
 80090be:	4630      	mov	r0, r6
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	220c      	movs	r2, #12
 80090c4:	2600      	movs	r6, #0
 80090c6:	6002      	str	r2, [r0, #0]
 80090c8:	e7f9      	b.n	80090be <_calloc_r+0x12>
 80090ca:	462a      	mov	r2, r5
 80090cc:	4621      	mov	r1, r4
 80090ce:	f7fc fbf3 	bl	80058b8 <memset>
 80090d2:	e7f4      	b.n	80090be <_calloc_r+0x12>

080090d4 <_free_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4605      	mov	r5, r0
 80090d8:	2900      	cmp	r1, #0
 80090da:	d040      	beq.n	800915e <_free_r+0x8a>
 80090dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e0:	1f0c      	subs	r4, r1, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfb8      	it	lt
 80090e6:	18e4      	addlt	r4, r4, r3
 80090e8:	f000 faae 	bl	8009648 <__malloc_lock>
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <_free_r+0x8c>)
 80090ee:	6813      	ldr	r3, [r2, #0]
 80090f0:	b933      	cbnz	r3, 8009100 <_free_r+0x2c>
 80090f2:	6063      	str	r3, [r4, #4]
 80090f4:	6014      	str	r4, [r2, #0]
 80090f6:	4628      	mov	r0, r5
 80090f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090fc:	f000 baaa 	b.w	8009654 <__malloc_unlock>
 8009100:	42a3      	cmp	r3, r4
 8009102:	d908      	bls.n	8009116 <_free_r+0x42>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	1821      	adds	r1, r4, r0
 8009108:	428b      	cmp	r3, r1
 800910a:	bf01      	itttt	eq
 800910c:	6819      	ldreq	r1, [r3, #0]
 800910e:	685b      	ldreq	r3, [r3, #4]
 8009110:	1809      	addeq	r1, r1, r0
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	e7ed      	b.n	80090f2 <_free_r+0x1e>
 8009116:	461a      	mov	r2, r3
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	b10b      	cbz	r3, 8009120 <_free_r+0x4c>
 800911c:	42a3      	cmp	r3, r4
 800911e:	d9fa      	bls.n	8009116 <_free_r+0x42>
 8009120:	6811      	ldr	r1, [r2, #0]
 8009122:	1850      	adds	r0, r2, r1
 8009124:	42a0      	cmp	r0, r4
 8009126:	d10b      	bne.n	8009140 <_free_r+0x6c>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	4401      	add	r1, r0
 800912c:	1850      	adds	r0, r2, r1
 800912e:	4283      	cmp	r3, r0
 8009130:	6011      	str	r1, [r2, #0]
 8009132:	d1e0      	bne.n	80090f6 <_free_r+0x22>
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4401      	add	r1, r0
 800913a:	6011      	str	r1, [r2, #0]
 800913c:	6053      	str	r3, [r2, #4]
 800913e:	e7da      	b.n	80090f6 <_free_r+0x22>
 8009140:	d902      	bls.n	8009148 <_free_r+0x74>
 8009142:	230c      	movs	r3, #12
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	e7d6      	b.n	80090f6 <_free_r+0x22>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	1821      	adds	r1, r4, r0
 800914c:	428b      	cmp	r3, r1
 800914e:	bf01      	itttt	eq
 8009150:	6819      	ldreq	r1, [r3, #0]
 8009152:	685b      	ldreq	r3, [r3, #4]
 8009154:	1809      	addeq	r1, r1, r0
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	6063      	str	r3, [r4, #4]
 800915a:	6054      	str	r4, [r2, #4]
 800915c:	e7cb      	b.n	80090f6 <_free_r+0x22>
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000768 	.word	0x20000768

08009164 <sbrk_aligned>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4e0e      	ldr	r6, [pc, #56]	; (80091a0 <sbrk_aligned+0x3c>)
 8009168:	460c      	mov	r4, r1
 800916a:	6831      	ldr	r1, [r6, #0]
 800916c:	4605      	mov	r5, r0
 800916e:	b911      	cbnz	r1, 8009176 <sbrk_aligned+0x12>
 8009170:	f000 f9ee 	bl	8009550 <_sbrk_r>
 8009174:	6030      	str	r0, [r6, #0]
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	f000 f9e9 	bl	8009550 <_sbrk_r>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d00a      	beq.n	8009198 <sbrk_aligned+0x34>
 8009182:	1cc4      	adds	r4, r0, #3
 8009184:	f024 0403 	bic.w	r4, r4, #3
 8009188:	42a0      	cmp	r0, r4
 800918a:	d007      	beq.n	800919c <sbrk_aligned+0x38>
 800918c:	1a21      	subs	r1, r4, r0
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f9de 	bl	8009550 <_sbrk_r>
 8009194:	3001      	adds	r0, #1
 8009196:	d101      	bne.n	800919c <sbrk_aligned+0x38>
 8009198:	f04f 34ff 	mov.w	r4, #4294967295
 800919c:	4620      	mov	r0, r4
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	2000076c 	.word	0x2000076c

080091a4 <_malloc_r>:
 80091a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	1ccd      	adds	r5, r1, #3
 80091aa:	f025 0503 	bic.w	r5, r5, #3
 80091ae:	3508      	adds	r5, #8
 80091b0:	2d0c      	cmp	r5, #12
 80091b2:	bf38      	it	cc
 80091b4:	250c      	movcc	r5, #12
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	4607      	mov	r7, r0
 80091ba:	db01      	blt.n	80091c0 <_malloc_r+0x1c>
 80091bc:	42a9      	cmp	r1, r5
 80091be:	d905      	bls.n	80091cc <_malloc_r+0x28>
 80091c0:	230c      	movs	r3, #12
 80091c2:	2600      	movs	r6, #0
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	4630      	mov	r0, r6
 80091c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091cc:	4e2e      	ldr	r6, [pc, #184]	; (8009288 <_malloc_r+0xe4>)
 80091ce:	f000 fa3b 	bl	8009648 <__malloc_lock>
 80091d2:	6833      	ldr	r3, [r6, #0]
 80091d4:	461c      	mov	r4, r3
 80091d6:	bb34      	cbnz	r4, 8009226 <_malloc_r+0x82>
 80091d8:	4629      	mov	r1, r5
 80091da:	4638      	mov	r0, r7
 80091dc:	f7ff ffc2 	bl	8009164 <sbrk_aligned>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	4604      	mov	r4, r0
 80091e4:	d14d      	bne.n	8009282 <_malloc_r+0xde>
 80091e6:	6834      	ldr	r4, [r6, #0]
 80091e8:	4626      	mov	r6, r4
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d140      	bne.n	8009270 <_malloc_r+0xcc>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	4631      	mov	r1, r6
 80091f2:	4638      	mov	r0, r7
 80091f4:	eb04 0803 	add.w	r8, r4, r3
 80091f8:	f000 f9aa 	bl	8009550 <_sbrk_r>
 80091fc:	4580      	cmp	r8, r0
 80091fe:	d13a      	bne.n	8009276 <_malloc_r+0xd2>
 8009200:	6821      	ldr	r1, [r4, #0]
 8009202:	3503      	adds	r5, #3
 8009204:	1a6d      	subs	r5, r5, r1
 8009206:	f025 0503 	bic.w	r5, r5, #3
 800920a:	3508      	adds	r5, #8
 800920c:	2d0c      	cmp	r5, #12
 800920e:	bf38      	it	cc
 8009210:	250c      	movcc	r5, #12
 8009212:	4638      	mov	r0, r7
 8009214:	4629      	mov	r1, r5
 8009216:	f7ff ffa5 	bl	8009164 <sbrk_aligned>
 800921a:	3001      	adds	r0, #1
 800921c:	d02b      	beq.n	8009276 <_malloc_r+0xd2>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	442b      	add	r3, r5
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	e00e      	b.n	8009244 <_malloc_r+0xa0>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	1b52      	subs	r2, r2, r5
 800922a:	d41e      	bmi.n	800926a <_malloc_r+0xc6>
 800922c:	2a0b      	cmp	r2, #11
 800922e:	d916      	bls.n	800925e <_malloc_r+0xba>
 8009230:	1961      	adds	r1, r4, r5
 8009232:	42a3      	cmp	r3, r4
 8009234:	6025      	str	r5, [r4, #0]
 8009236:	bf18      	it	ne
 8009238:	6059      	strne	r1, [r3, #4]
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	bf08      	it	eq
 800923e:	6031      	streq	r1, [r6, #0]
 8009240:	5162      	str	r2, [r4, r5]
 8009242:	604b      	str	r3, [r1, #4]
 8009244:	4638      	mov	r0, r7
 8009246:	f104 060b 	add.w	r6, r4, #11
 800924a:	f000 fa03 	bl	8009654 <__malloc_unlock>
 800924e:	f026 0607 	bic.w	r6, r6, #7
 8009252:	1d23      	adds	r3, r4, #4
 8009254:	1af2      	subs	r2, r6, r3
 8009256:	d0b6      	beq.n	80091c6 <_malloc_r+0x22>
 8009258:	1b9b      	subs	r3, r3, r6
 800925a:	50a3      	str	r3, [r4, r2]
 800925c:	e7b3      	b.n	80091c6 <_malloc_r+0x22>
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	42a3      	cmp	r3, r4
 8009262:	bf0c      	ite	eq
 8009264:	6032      	streq	r2, [r6, #0]
 8009266:	605a      	strne	r2, [r3, #4]
 8009268:	e7ec      	b.n	8009244 <_malloc_r+0xa0>
 800926a:	4623      	mov	r3, r4
 800926c:	6864      	ldr	r4, [r4, #4]
 800926e:	e7b2      	b.n	80091d6 <_malloc_r+0x32>
 8009270:	4634      	mov	r4, r6
 8009272:	6876      	ldr	r6, [r6, #4]
 8009274:	e7b9      	b.n	80091ea <_malloc_r+0x46>
 8009276:	230c      	movs	r3, #12
 8009278:	4638      	mov	r0, r7
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	f000 f9ea 	bl	8009654 <__malloc_unlock>
 8009280:	e7a1      	b.n	80091c6 <_malloc_r+0x22>
 8009282:	6025      	str	r5, [r4, #0]
 8009284:	e7de      	b.n	8009244 <_malloc_r+0xa0>
 8009286:	bf00      	nop
 8009288:	20000768 	.word	0x20000768

0800928c <__ssputs_r>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	688e      	ldr	r6, [r1, #8]
 8009292:	4682      	mov	sl, r0
 8009294:	429e      	cmp	r6, r3
 8009296:	460c      	mov	r4, r1
 8009298:	4690      	mov	r8, r2
 800929a:	461f      	mov	r7, r3
 800929c:	d838      	bhi.n	8009310 <__ssputs_r+0x84>
 800929e:	898a      	ldrh	r2, [r1, #12]
 80092a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092a4:	d032      	beq.n	800930c <__ssputs_r+0x80>
 80092a6:	6825      	ldr	r5, [r4, #0]
 80092a8:	6909      	ldr	r1, [r1, #16]
 80092aa:	3301      	adds	r3, #1
 80092ac:	eba5 0901 	sub.w	r9, r5, r1
 80092b0:	6965      	ldr	r5, [r4, #20]
 80092b2:	444b      	add	r3, r9
 80092b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092bc:	106d      	asrs	r5, r5, #1
 80092be:	429d      	cmp	r5, r3
 80092c0:	bf38      	it	cc
 80092c2:	461d      	movcc	r5, r3
 80092c4:	0553      	lsls	r3, r2, #21
 80092c6:	d531      	bpl.n	800932c <__ssputs_r+0xa0>
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7ff ff6b 	bl	80091a4 <_malloc_r>
 80092ce:	4606      	mov	r6, r0
 80092d0:	b950      	cbnz	r0, 80092e8 <__ssputs_r+0x5c>
 80092d2:	230c      	movs	r3, #12
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	f8ca 3000 	str.w	r3, [sl]
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e8:	464a      	mov	r2, r9
 80092ea:	6921      	ldr	r1, [r4, #16]
 80092ec:	f7ff fa18 	bl	8008720 <memcpy>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	6126      	str	r6, [r4, #16]
 80092fe:	444e      	add	r6, r9
 8009300:	6026      	str	r6, [r4, #0]
 8009302:	463e      	mov	r6, r7
 8009304:	6165      	str	r5, [r4, #20]
 8009306:	eba5 0509 	sub.w	r5, r5, r9
 800930a:	60a5      	str	r5, [r4, #8]
 800930c:	42be      	cmp	r6, r7
 800930e:	d900      	bls.n	8009312 <__ssputs_r+0x86>
 8009310:	463e      	mov	r6, r7
 8009312:	4632      	mov	r2, r6
 8009314:	4641      	mov	r1, r8
 8009316:	6820      	ldr	r0, [r4, #0]
 8009318:	f000 f97c 	bl	8009614 <memmove>
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	2000      	movs	r0, #0
 8009320:	1b9b      	subs	r3, r3, r6
 8009322:	60a3      	str	r3, [r4, #8]
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	4433      	add	r3, r6
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	e7db      	b.n	80092e4 <__ssputs_r+0x58>
 800932c:	462a      	mov	r2, r5
 800932e:	f000 f997 	bl	8009660 <_realloc_r>
 8009332:	4606      	mov	r6, r0
 8009334:	2800      	cmp	r0, #0
 8009336:	d1e1      	bne.n	80092fc <__ssputs_r+0x70>
 8009338:	4650      	mov	r0, sl
 800933a:	6921      	ldr	r1, [r4, #16]
 800933c:	f7ff feca 	bl	80090d4 <_free_r>
 8009340:	e7c7      	b.n	80092d2 <__ssputs_r+0x46>
	...

08009344 <_svfiprintf_r>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	4698      	mov	r8, r3
 800934a:	898b      	ldrh	r3, [r1, #12]
 800934c:	4607      	mov	r7, r0
 800934e:	061b      	lsls	r3, r3, #24
 8009350:	460d      	mov	r5, r1
 8009352:	4614      	mov	r4, r2
 8009354:	b09d      	sub	sp, #116	; 0x74
 8009356:	d50e      	bpl.n	8009376 <_svfiprintf_r+0x32>
 8009358:	690b      	ldr	r3, [r1, #16]
 800935a:	b963      	cbnz	r3, 8009376 <_svfiprintf_r+0x32>
 800935c:	2140      	movs	r1, #64	; 0x40
 800935e:	f7ff ff21 	bl	80091a4 <_malloc_r>
 8009362:	6028      	str	r0, [r5, #0]
 8009364:	6128      	str	r0, [r5, #16]
 8009366:	b920      	cbnz	r0, 8009372 <_svfiprintf_r+0x2e>
 8009368:	230c      	movs	r3, #12
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e0d1      	b.n	8009516 <_svfiprintf_r+0x1d2>
 8009372:	2340      	movs	r3, #64	; 0x40
 8009374:	616b      	str	r3, [r5, #20]
 8009376:	2300      	movs	r3, #0
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
 800937a:	2320      	movs	r3, #32
 800937c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009380:	2330      	movs	r3, #48	; 0x30
 8009382:	f04f 0901 	mov.w	r9, #1
 8009386:	f8cd 800c 	str.w	r8, [sp, #12]
 800938a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009530 <_svfiprintf_r+0x1ec>
 800938e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009392:	4623      	mov	r3, r4
 8009394:	469a      	mov	sl, r3
 8009396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800939a:	b10a      	cbz	r2, 80093a0 <_svfiprintf_r+0x5c>
 800939c:	2a25      	cmp	r2, #37	; 0x25
 800939e:	d1f9      	bne.n	8009394 <_svfiprintf_r+0x50>
 80093a0:	ebba 0b04 	subs.w	fp, sl, r4
 80093a4:	d00b      	beq.n	80093be <_svfiprintf_r+0x7a>
 80093a6:	465b      	mov	r3, fp
 80093a8:	4622      	mov	r2, r4
 80093aa:	4629      	mov	r1, r5
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff ff6d 	bl	800928c <__ssputs_r>
 80093b2:	3001      	adds	r0, #1
 80093b4:	f000 80aa 	beq.w	800950c <_svfiprintf_r+0x1c8>
 80093b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ba:	445a      	add	r2, fp
 80093bc:	9209      	str	r2, [sp, #36]	; 0x24
 80093be:	f89a 3000 	ldrb.w	r3, [sl]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 80a2 	beq.w	800950c <_svfiprintf_r+0x1c8>
 80093c8:	2300      	movs	r3, #0
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d2:	f10a 0a01 	add.w	sl, sl, #1
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	9307      	str	r3, [sp, #28]
 80093da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093de:	931a      	str	r3, [sp, #104]	; 0x68
 80093e0:	4654      	mov	r4, sl
 80093e2:	2205      	movs	r2, #5
 80093e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e8:	4851      	ldr	r0, [pc, #324]	; (8009530 <_svfiprintf_r+0x1ec>)
 80093ea:	f7ff f98b 	bl	8008704 <memchr>
 80093ee:	9a04      	ldr	r2, [sp, #16]
 80093f0:	b9d8      	cbnz	r0, 800942a <_svfiprintf_r+0xe6>
 80093f2:	06d0      	lsls	r0, r2, #27
 80093f4:	bf44      	itt	mi
 80093f6:	2320      	movmi	r3, #32
 80093f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093fc:	0711      	lsls	r1, r2, #28
 80093fe:	bf44      	itt	mi
 8009400:	232b      	movmi	r3, #43	; 0x2b
 8009402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009406:	f89a 3000 	ldrb.w	r3, [sl]
 800940a:	2b2a      	cmp	r3, #42	; 0x2a
 800940c:	d015      	beq.n	800943a <_svfiprintf_r+0xf6>
 800940e:	4654      	mov	r4, sl
 8009410:	2000      	movs	r0, #0
 8009412:	f04f 0c0a 	mov.w	ip, #10
 8009416:	9a07      	ldr	r2, [sp, #28]
 8009418:	4621      	mov	r1, r4
 800941a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800941e:	3b30      	subs	r3, #48	; 0x30
 8009420:	2b09      	cmp	r3, #9
 8009422:	d94e      	bls.n	80094c2 <_svfiprintf_r+0x17e>
 8009424:	b1b0      	cbz	r0, 8009454 <_svfiprintf_r+0x110>
 8009426:	9207      	str	r2, [sp, #28]
 8009428:	e014      	b.n	8009454 <_svfiprintf_r+0x110>
 800942a:	eba0 0308 	sub.w	r3, r0, r8
 800942e:	fa09 f303 	lsl.w	r3, r9, r3
 8009432:	4313      	orrs	r3, r2
 8009434:	46a2      	mov	sl, r4
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	e7d2      	b.n	80093e0 <_svfiprintf_r+0x9c>
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	1d19      	adds	r1, r3, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	9103      	str	r1, [sp, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	bfbb      	ittet	lt
 8009446:	425b      	neglt	r3, r3
 8009448:	f042 0202 	orrlt.w	r2, r2, #2
 800944c:	9307      	strge	r3, [sp, #28]
 800944e:	9307      	strlt	r3, [sp, #28]
 8009450:	bfb8      	it	lt
 8009452:	9204      	strlt	r2, [sp, #16]
 8009454:	7823      	ldrb	r3, [r4, #0]
 8009456:	2b2e      	cmp	r3, #46	; 0x2e
 8009458:	d10c      	bne.n	8009474 <_svfiprintf_r+0x130>
 800945a:	7863      	ldrb	r3, [r4, #1]
 800945c:	2b2a      	cmp	r3, #42	; 0x2a
 800945e:	d135      	bne.n	80094cc <_svfiprintf_r+0x188>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	3402      	adds	r4, #2
 8009464:	1d1a      	adds	r2, r3, #4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	9203      	str	r2, [sp, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfb8      	it	lt
 800946e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009534 <_svfiprintf_r+0x1f0>
 8009478:	2203      	movs	r2, #3
 800947a:	4650      	mov	r0, sl
 800947c:	7821      	ldrb	r1, [r4, #0]
 800947e:	f7ff f941 	bl	8008704 <memchr>
 8009482:	b140      	cbz	r0, 8009496 <_svfiprintf_r+0x152>
 8009484:	2340      	movs	r3, #64	; 0x40
 8009486:	eba0 000a 	sub.w	r0, r0, sl
 800948a:	fa03 f000 	lsl.w	r0, r3, r0
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	3401      	adds	r4, #1
 8009492:	4303      	orrs	r3, r0
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949a:	2206      	movs	r2, #6
 800949c:	4826      	ldr	r0, [pc, #152]	; (8009538 <_svfiprintf_r+0x1f4>)
 800949e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094a2:	f7ff f92f 	bl	8008704 <memchr>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d038      	beq.n	800951c <_svfiprintf_r+0x1d8>
 80094aa:	4b24      	ldr	r3, [pc, #144]	; (800953c <_svfiprintf_r+0x1f8>)
 80094ac:	bb1b      	cbnz	r3, 80094f6 <_svfiprintf_r+0x1b2>
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	f023 0307 	bic.w	r3, r3, #7
 80094b6:	3308      	adds	r3, #8
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	4433      	add	r3, r6
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	e767      	b.n	8009392 <_svfiprintf_r+0x4e>
 80094c2:	460c      	mov	r4, r1
 80094c4:	2001      	movs	r0, #1
 80094c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ca:	e7a5      	b.n	8009418 <_svfiprintf_r+0xd4>
 80094cc:	2300      	movs	r3, #0
 80094ce:	f04f 0c0a 	mov.w	ip, #10
 80094d2:	4619      	mov	r1, r3
 80094d4:	3401      	adds	r4, #1
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	4620      	mov	r0, r4
 80094da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094de:	3a30      	subs	r2, #48	; 0x30
 80094e0:	2a09      	cmp	r2, #9
 80094e2:	d903      	bls.n	80094ec <_svfiprintf_r+0x1a8>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0c5      	beq.n	8009474 <_svfiprintf_r+0x130>
 80094e8:	9105      	str	r1, [sp, #20]
 80094ea:	e7c3      	b.n	8009474 <_svfiprintf_r+0x130>
 80094ec:	4604      	mov	r4, r0
 80094ee:	2301      	movs	r3, #1
 80094f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094f4:	e7f0      	b.n	80094d8 <_svfiprintf_r+0x194>
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	462a      	mov	r2, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	4b10      	ldr	r3, [pc, #64]	; (8009540 <_svfiprintf_r+0x1fc>)
 8009500:	a904      	add	r1, sp, #16
 8009502:	f7fc fa7f 	bl	8005a04 <_printf_float>
 8009506:	1c42      	adds	r2, r0, #1
 8009508:	4606      	mov	r6, r0
 800950a:	d1d6      	bne.n	80094ba <_svfiprintf_r+0x176>
 800950c:	89ab      	ldrh	r3, [r5, #12]
 800950e:	065b      	lsls	r3, r3, #25
 8009510:	f53f af2c 	bmi.w	800936c <_svfiprintf_r+0x28>
 8009514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009516:	b01d      	add	sp, #116	; 0x74
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	ab03      	add	r3, sp, #12
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	462a      	mov	r2, r5
 8009522:	4638      	mov	r0, r7
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <_svfiprintf_r+0x1fc>)
 8009526:	a904      	add	r1, sp, #16
 8009528:	f7fc fd08 	bl	8005f3c <_printf_i>
 800952c:	e7eb      	b.n	8009506 <_svfiprintf_r+0x1c2>
 800952e:	bf00      	nop
 8009530:	0800bf74 	.word	0x0800bf74
 8009534:	0800bf7a 	.word	0x0800bf7a
 8009538:	0800bf7e 	.word	0x0800bf7e
 800953c:	08005a05 	.word	0x08005a05
 8009540:	0800928d 	.word	0x0800928d

08009544 <nan>:
 8009544:	2000      	movs	r0, #0
 8009546:	4901      	ldr	r1, [pc, #4]	; (800954c <nan+0x8>)
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	7ff80000 	.word	0x7ff80000

08009550 <_sbrk_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	2300      	movs	r3, #0
 8009554:	4d05      	ldr	r5, [pc, #20]	; (800956c <_sbrk_r+0x1c>)
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f9 f8c6 	bl	80026ec <_sbrk>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_sbrk_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_sbrk_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000770 	.word	0x20000770

08009570 <strncmp>:
 8009570:	4603      	mov	r3, r0
 8009572:	b510      	push	{r4, lr}
 8009574:	b172      	cbz	r2, 8009594 <strncmp+0x24>
 8009576:	3901      	subs	r1, #1
 8009578:	1884      	adds	r4, r0, r2
 800957a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800957e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009582:	4290      	cmp	r0, r2
 8009584:	d101      	bne.n	800958a <strncmp+0x1a>
 8009586:	42a3      	cmp	r3, r4
 8009588:	d101      	bne.n	800958e <strncmp+0x1e>
 800958a:	1a80      	subs	r0, r0, r2
 800958c:	bd10      	pop	{r4, pc}
 800958e:	2800      	cmp	r0, #0
 8009590:	d1f3      	bne.n	800957a <strncmp+0xa>
 8009592:	e7fa      	b.n	800958a <strncmp+0x1a>
 8009594:	4610      	mov	r0, r2
 8009596:	e7f9      	b.n	800958c <strncmp+0x1c>

08009598 <__ascii_wctomb>:
 8009598:	4603      	mov	r3, r0
 800959a:	4608      	mov	r0, r1
 800959c:	b141      	cbz	r1, 80095b0 <__ascii_wctomb+0x18>
 800959e:	2aff      	cmp	r2, #255	; 0xff
 80095a0:	d904      	bls.n	80095ac <__ascii_wctomb+0x14>
 80095a2:	228a      	movs	r2, #138	; 0x8a
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	4770      	bx	lr
 80095ac:	2001      	movs	r0, #1
 80095ae:	700a      	strb	r2, [r1, #0]
 80095b0:	4770      	bx	lr
	...

080095b4 <__assert_func>:
 80095b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095b6:	4614      	mov	r4, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <__assert_func+0x2c>)
 80095bc:	4605      	mov	r5, r0
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68d8      	ldr	r0, [r3, #12]
 80095c2:	b14c      	cbz	r4, 80095d8 <__assert_func+0x24>
 80095c4:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <__assert_func+0x30>)
 80095c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ca:	9100      	str	r1, [sp, #0]
 80095cc:	462b      	mov	r3, r5
 80095ce:	4906      	ldr	r1, [pc, #24]	; (80095e8 <__assert_func+0x34>)
 80095d0:	f000 f80e 	bl	80095f0 <fiprintf>
 80095d4:	f000 fa8a 	bl	8009aec <abort>
 80095d8:	4b04      	ldr	r3, [pc, #16]	; (80095ec <__assert_func+0x38>)
 80095da:	461c      	mov	r4, r3
 80095dc:	e7f3      	b.n	80095c6 <__assert_func+0x12>
 80095de:	bf00      	nop
 80095e0:	2000000c 	.word	0x2000000c
 80095e4:	0800bf85 	.word	0x0800bf85
 80095e8:	0800bf92 	.word	0x0800bf92
 80095ec:	0800bfc0 	.word	0x0800bfc0

080095f0 <fiprintf>:
 80095f0:	b40e      	push	{r1, r2, r3}
 80095f2:	b503      	push	{r0, r1, lr}
 80095f4:	4601      	mov	r1, r0
 80095f6:	ab03      	add	r3, sp, #12
 80095f8:	4805      	ldr	r0, [pc, #20]	; (8009610 <fiprintf+0x20>)
 80095fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80095fe:	6800      	ldr	r0, [r0, #0]
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	f000 f883 	bl	800970c <_vfiprintf_r>
 8009606:	b002      	add	sp, #8
 8009608:	f85d eb04 	ldr.w	lr, [sp], #4
 800960c:	b003      	add	sp, #12
 800960e:	4770      	bx	lr
 8009610:	2000000c 	.word	0x2000000c

08009614 <memmove>:
 8009614:	4288      	cmp	r0, r1
 8009616:	b510      	push	{r4, lr}
 8009618:	eb01 0402 	add.w	r4, r1, r2
 800961c:	d902      	bls.n	8009624 <memmove+0x10>
 800961e:	4284      	cmp	r4, r0
 8009620:	4623      	mov	r3, r4
 8009622:	d807      	bhi.n	8009634 <memmove+0x20>
 8009624:	1e43      	subs	r3, r0, #1
 8009626:	42a1      	cmp	r1, r4
 8009628:	d008      	beq.n	800963c <memmove+0x28>
 800962a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009632:	e7f8      	b.n	8009626 <memmove+0x12>
 8009634:	4601      	mov	r1, r0
 8009636:	4402      	add	r2, r0
 8009638:	428a      	cmp	r2, r1
 800963a:	d100      	bne.n	800963e <memmove+0x2a>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009646:	e7f7      	b.n	8009638 <memmove+0x24>

08009648 <__malloc_lock>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__malloc_lock+0x8>)
 800964a:	f000 bc0b 	b.w	8009e64 <__retarget_lock_acquire_recursive>
 800964e:	bf00      	nop
 8009650:	20000774 	.word	0x20000774

08009654 <__malloc_unlock>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__malloc_unlock+0x8>)
 8009656:	f000 bc06 	b.w	8009e66 <__retarget_lock_release_recursive>
 800965a:	bf00      	nop
 800965c:	20000774 	.word	0x20000774

08009660 <_realloc_r>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4680      	mov	r8, r0
 8009666:	4614      	mov	r4, r2
 8009668:	460e      	mov	r6, r1
 800966a:	b921      	cbnz	r1, 8009676 <_realloc_r+0x16>
 800966c:	4611      	mov	r1, r2
 800966e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	f7ff bd97 	b.w	80091a4 <_malloc_r>
 8009676:	b92a      	cbnz	r2, 8009684 <_realloc_r+0x24>
 8009678:	f7ff fd2c 	bl	80090d4 <_free_r>
 800967c:	4625      	mov	r5, r4
 800967e:	4628      	mov	r0, r5
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	f000 fc56 	bl	8009f34 <_malloc_usable_size_r>
 8009688:	4284      	cmp	r4, r0
 800968a:	4607      	mov	r7, r0
 800968c:	d802      	bhi.n	8009694 <_realloc_r+0x34>
 800968e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009692:	d812      	bhi.n	80096ba <_realloc_r+0x5a>
 8009694:	4621      	mov	r1, r4
 8009696:	4640      	mov	r0, r8
 8009698:	f7ff fd84 	bl	80091a4 <_malloc_r>
 800969c:	4605      	mov	r5, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	d0ed      	beq.n	800967e <_realloc_r+0x1e>
 80096a2:	42bc      	cmp	r4, r7
 80096a4:	4622      	mov	r2, r4
 80096a6:	4631      	mov	r1, r6
 80096a8:	bf28      	it	cs
 80096aa:	463a      	movcs	r2, r7
 80096ac:	f7ff f838 	bl	8008720 <memcpy>
 80096b0:	4631      	mov	r1, r6
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff fd0e 	bl	80090d4 <_free_r>
 80096b8:	e7e1      	b.n	800967e <_realloc_r+0x1e>
 80096ba:	4635      	mov	r5, r6
 80096bc:	e7df      	b.n	800967e <_realloc_r+0x1e>

080096be <__sfputc_r>:
 80096be:	6893      	ldr	r3, [r2, #8]
 80096c0:	b410      	push	{r4}
 80096c2:	3b01      	subs	r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	6093      	str	r3, [r2, #8]
 80096c8:	da07      	bge.n	80096da <__sfputc_r+0x1c>
 80096ca:	6994      	ldr	r4, [r2, #24]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	db01      	blt.n	80096d4 <__sfputc_r+0x16>
 80096d0:	290a      	cmp	r1, #10
 80096d2:	d102      	bne.n	80096da <__sfputc_r+0x1c>
 80096d4:	bc10      	pop	{r4}
 80096d6:	f000 b949 	b.w	800996c <__swbuf_r>
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	1c58      	adds	r0, r3, #1
 80096de:	6010      	str	r0, [r2, #0]
 80096e0:	7019      	strb	r1, [r3, #0]
 80096e2:	4608      	mov	r0, r1
 80096e4:	bc10      	pop	{r4}
 80096e6:	4770      	bx	lr

080096e8 <__sfputs_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	4614      	mov	r4, r2
 80096f0:	18d5      	adds	r5, r2, r3
 80096f2:	42ac      	cmp	r4, r5
 80096f4:	d101      	bne.n	80096fa <__sfputs_r+0x12>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e007      	b.n	800970a <__sfputs_r+0x22>
 80096fa:	463a      	mov	r2, r7
 80096fc:	4630      	mov	r0, r6
 80096fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009702:	f7ff ffdc 	bl	80096be <__sfputc_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d1f3      	bne.n	80096f2 <__sfputs_r+0xa>
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800970c <_vfiprintf_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	460d      	mov	r5, r1
 8009712:	4614      	mov	r4, r2
 8009714:	4698      	mov	r8, r3
 8009716:	4606      	mov	r6, r0
 8009718:	b09d      	sub	sp, #116	; 0x74
 800971a:	b118      	cbz	r0, 8009724 <_vfiprintf_r+0x18>
 800971c:	6983      	ldr	r3, [r0, #24]
 800971e:	b90b      	cbnz	r3, 8009724 <_vfiprintf_r+0x18>
 8009720:	f000 fb02 	bl	8009d28 <__sinit>
 8009724:	4b89      	ldr	r3, [pc, #548]	; (800994c <_vfiprintf_r+0x240>)
 8009726:	429d      	cmp	r5, r3
 8009728:	d11b      	bne.n	8009762 <_vfiprintf_r+0x56>
 800972a:	6875      	ldr	r5, [r6, #4]
 800972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972e:	07d9      	lsls	r1, r3, #31
 8009730:	d405      	bmi.n	800973e <_vfiprintf_r+0x32>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	059a      	lsls	r2, r3, #22
 8009736:	d402      	bmi.n	800973e <_vfiprintf_r+0x32>
 8009738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973a:	f000 fb93 	bl	8009e64 <__retarget_lock_acquire_recursive>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	071b      	lsls	r3, r3, #28
 8009742:	d501      	bpl.n	8009748 <_vfiprintf_r+0x3c>
 8009744:	692b      	ldr	r3, [r5, #16]
 8009746:	b9eb      	cbnz	r3, 8009784 <_vfiprintf_r+0x78>
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f000 f960 	bl	8009a10 <__swsetup_r>
 8009750:	b1c0      	cbz	r0, 8009784 <_vfiprintf_r+0x78>
 8009752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009754:	07dc      	lsls	r4, r3, #31
 8009756:	d50e      	bpl.n	8009776 <_vfiprintf_r+0x6a>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	b01d      	add	sp, #116	; 0x74
 800975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009762:	4b7b      	ldr	r3, [pc, #492]	; (8009950 <_vfiprintf_r+0x244>)
 8009764:	429d      	cmp	r5, r3
 8009766:	d101      	bne.n	800976c <_vfiprintf_r+0x60>
 8009768:	68b5      	ldr	r5, [r6, #8]
 800976a:	e7df      	b.n	800972c <_vfiprintf_r+0x20>
 800976c:	4b79      	ldr	r3, [pc, #484]	; (8009954 <_vfiprintf_r+0x248>)
 800976e:	429d      	cmp	r5, r3
 8009770:	bf08      	it	eq
 8009772:	68f5      	ldreq	r5, [r6, #12]
 8009774:	e7da      	b.n	800972c <_vfiprintf_r+0x20>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	0598      	lsls	r0, r3, #22
 800977a:	d4ed      	bmi.n	8009758 <_vfiprintf_r+0x4c>
 800977c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800977e:	f000 fb72 	bl	8009e66 <__retarget_lock_release_recursive>
 8009782:	e7e9      	b.n	8009758 <_vfiprintf_r+0x4c>
 8009784:	2300      	movs	r3, #0
 8009786:	9309      	str	r3, [sp, #36]	; 0x24
 8009788:	2320      	movs	r3, #32
 800978a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800978e:	2330      	movs	r3, #48	; 0x30
 8009790:	f04f 0901 	mov.w	r9, #1
 8009794:	f8cd 800c 	str.w	r8, [sp, #12]
 8009798:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009958 <_vfiprintf_r+0x24c>
 800979c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a0:	4623      	mov	r3, r4
 80097a2:	469a      	mov	sl, r3
 80097a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a8:	b10a      	cbz	r2, 80097ae <_vfiprintf_r+0xa2>
 80097aa:	2a25      	cmp	r2, #37	; 0x25
 80097ac:	d1f9      	bne.n	80097a2 <_vfiprintf_r+0x96>
 80097ae:	ebba 0b04 	subs.w	fp, sl, r4
 80097b2:	d00b      	beq.n	80097cc <_vfiprintf_r+0xc0>
 80097b4:	465b      	mov	r3, fp
 80097b6:	4622      	mov	r2, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff94 	bl	80096e8 <__sfputs_r>
 80097c0:	3001      	adds	r0, #1
 80097c2:	f000 80aa 	beq.w	800991a <_vfiprintf_r+0x20e>
 80097c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097c8:	445a      	add	r2, fp
 80097ca:	9209      	str	r2, [sp, #36]	; 0x24
 80097cc:	f89a 3000 	ldrb.w	r3, [sl]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 80a2 	beq.w	800991a <_vfiprintf_r+0x20e>
 80097d6:	2300      	movs	r3, #0
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295
 80097dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e0:	f10a 0a01 	add.w	sl, sl, #1
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ec:	931a      	str	r3, [sp, #104]	; 0x68
 80097ee:	4654      	mov	r4, sl
 80097f0:	2205      	movs	r2, #5
 80097f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f6:	4858      	ldr	r0, [pc, #352]	; (8009958 <_vfiprintf_r+0x24c>)
 80097f8:	f7fe ff84 	bl	8008704 <memchr>
 80097fc:	9a04      	ldr	r2, [sp, #16]
 80097fe:	b9d8      	cbnz	r0, 8009838 <_vfiprintf_r+0x12c>
 8009800:	06d1      	lsls	r1, r2, #27
 8009802:	bf44      	itt	mi
 8009804:	2320      	movmi	r3, #32
 8009806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980a:	0713      	lsls	r3, r2, #28
 800980c:	bf44      	itt	mi
 800980e:	232b      	movmi	r3, #43	; 0x2b
 8009810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009814:	f89a 3000 	ldrb.w	r3, [sl]
 8009818:	2b2a      	cmp	r3, #42	; 0x2a
 800981a:	d015      	beq.n	8009848 <_vfiprintf_r+0x13c>
 800981c:	4654      	mov	r4, sl
 800981e:	2000      	movs	r0, #0
 8009820:	f04f 0c0a 	mov.w	ip, #10
 8009824:	9a07      	ldr	r2, [sp, #28]
 8009826:	4621      	mov	r1, r4
 8009828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800982c:	3b30      	subs	r3, #48	; 0x30
 800982e:	2b09      	cmp	r3, #9
 8009830:	d94e      	bls.n	80098d0 <_vfiprintf_r+0x1c4>
 8009832:	b1b0      	cbz	r0, 8009862 <_vfiprintf_r+0x156>
 8009834:	9207      	str	r2, [sp, #28]
 8009836:	e014      	b.n	8009862 <_vfiprintf_r+0x156>
 8009838:	eba0 0308 	sub.w	r3, r0, r8
 800983c:	fa09 f303 	lsl.w	r3, r9, r3
 8009840:	4313      	orrs	r3, r2
 8009842:	46a2      	mov	sl, r4
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	e7d2      	b.n	80097ee <_vfiprintf_r+0xe2>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	1d19      	adds	r1, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	9103      	str	r1, [sp, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	bfbb      	ittet	lt
 8009854:	425b      	neglt	r3, r3
 8009856:	f042 0202 	orrlt.w	r2, r2, #2
 800985a:	9307      	strge	r3, [sp, #28]
 800985c:	9307      	strlt	r3, [sp, #28]
 800985e:	bfb8      	it	lt
 8009860:	9204      	strlt	r2, [sp, #16]
 8009862:	7823      	ldrb	r3, [r4, #0]
 8009864:	2b2e      	cmp	r3, #46	; 0x2e
 8009866:	d10c      	bne.n	8009882 <_vfiprintf_r+0x176>
 8009868:	7863      	ldrb	r3, [r4, #1]
 800986a:	2b2a      	cmp	r3, #42	; 0x2a
 800986c:	d135      	bne.n	80098da <_vfiprintf_r+0x1ce>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	3402      	adds	r4, #2
 8009872:	1d1a      	adds	r2, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	9203      	str	r2, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfb8      	it	lt
 800987c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009880:	9305      	str	r3, [sp, #20]
 8009882:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800995c <_vfiprintf_r+0x250>
 8009886:	2203      	movs	r2, #3
 8009888:	4650      	mov	r0, sl
 800988a:	7821      	ldrb	r1, [r4, #0]
 800988c:	f7fe ff3a 	bl	8008704 <memchr>
 8009890:	b140      	cbz	r0, 80098a4 <_vfiprintf_r+0x198>
 8009892:	2340      	movs	r3, #64	; 0x40
 8009894:	eba0 000a 	sub.w	r0, r0, sl
 8009898:	fa03 f000 	lsl.w	r0, r3, r0
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	3401      	adds	r4, #1
 80098a0:	4303      	orrs	r3, r0
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a8:	2206      	movs	r2, #6
 80098aa:	482d      	ldr	r0, [pc, #180]	; (8009960 <_vfiprintf_r+0x254>)
 80098ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098b0:	f7fe ff28 	bl	8008704 <memchr>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d03f      	beq.n	8009938 <_vfiprintf_r+0x22c>
 80098b8:	4b2a      	ldr	r3, [pc, #168]	; (8009964 <_vfiprintf_r+0x258>)
 80098ba:	bb1b      	cbnz	r3, 8009904 <_vfiprintf_r+0x1f8>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	3307      	adds	r3, #7
 80098c0:	f023 0307 	bic.w	r3, r3, #7
 80098c4:	3308      	adds	r3, #8
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ca:	443b      	add	r3, r7
 80098cc:	9309      	str	r3, [sp, #36]	; 0x24
 80098ce:	e767      	b.n	80097a0 <_vfiprintf_r+0x94>
 80098d0:	460c      	mov	r4, r1
 80098d2:	2001      	movs	r0, #1
 80098d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d8:	e7a5      	b.n	8009826 <_vfiprintf_r+0x11a>
 80098da:	2300      	movs	r3, #0
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4619      	mov	r1, r3
 80098e2:	3401      	adds	r4, #1
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	4620      	mov	r0, r4
 80098e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ec:	3a30      	subs	r2, #48	; 0x30
 80098ee:	2a09      	cmp	r2, #9
 80098f0:	d903      	bls.n	80098fa <_vfiprintf_r+0x1ee>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0c5      	beq.n	8009882 <_vfiprintf_r+0x176>
 80098f6:	9105      	str	r1, [sp, #20]
 80098f8:	e7c3      	b.n	8009882 <_vfiprintf_r+0x176>
 80098fa:	4604      	mov	r4, r0
 80098fc:	2301      	movs	r3, #1
 80098fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009902:	e7f0      	b.n	80098e6 <_vfiprintf_r+0x1da>
 8009904:	ab03      	add	r3, sp, #12
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	462a      	mov	r2, r5
 800990a:	4630      	mov	r0, r6
 800990c:	4b16      	ldr	r3, [pc, #88]	; (8009968 <_vfiprintf_r+0x25c>)
 800990e:	a904      	add	r1, sp, #16
 8009910:	f7fc f878 	bl	8005a04 <_printf_float>
 8009914:	4607      	mov	r7, r0
 8009916:	1c78      	adds	r0, r7, #1
 8009918:	d1d6      	bne.n	80098c8 <_vfiprintf_r+0x1bc>
 800991a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800991c:	07d9      	lsls	r1, r3, #31
 800991e:	d405      	bmi.n	800992c <_vfiprintf_r+0x220>
 8009920:	89ab      	ldrh	r3, [r5, #12]
 8009922:	059a      	lsls	r2, r3, #22
 8009924:	d402      	bmi.n	800992c <_vfiprintf_r+0x220>
 8009926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009928:	f000 fa9d 	bl	8009e66 <__retarget_lock_release_recursive>
 800992c:	89ab      	ldrh	r3, [r5, #12]
 800992e:	065b      	lsls	r3, r3, #25
 8009930:	f53f af12 	bmi.w	8009758 <_vfiprintf_r+0x4c>
 8009934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009936:	e711      	b.n	800975c <_vfiprintf_r+0x50>
 8009938:	ab03      	add	r3, sp, #12
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	462a      	mov	r2, r5
 800993e:	4630      	mov	r0, r6
 8009940:	4b09      	ldr	r3, [pc, #36]	; (8009968 <_vfiprintf_r+0x25c>)
 8009942:	a904      	add	r1, sp, #16
 8009944:	f7fc fafa 	bl	8005f3c <_printf_i>
 8009948:	e7e4      	b.n	8009914 <_vfiprintf_r+0x208>
 800994a:	bf00      	nop
 800994c:	0800bfe4 	.word	0x0800bfe4
 8009950:	0800c004 	.word	0x0800c004
 8009954:	0800bfc4 	.word	0x0800bfc4
 8009958:	0800bf74 	.word	0x0800bf74
 800995c:	0800bf7a 	.word	0x0800bf7a
 8009960:	0800bf7e 	.word	0x0800bf7e
 8009964:	08005a05 	.word	0x08005a05
 8009968:	080096e9 	.word	0x080096e9

0800996c <__swbuf_r>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	460e      	mov	r6, r1
 8009970:	4614      	mov	r4, r2
 8009972:	4605      	mov	r5, r0
 8009974:	b118      	cbz	r0, 800997e <__swbuf_r+0x12>
 8009976:	6983      	ldr	r3, [r0, #24]
 8009978:	b90b      	cbnz	r3, 800997e <__swbuf_r+0x12>
 800997a:	f000 f9d5 	bl	8009d28 <__sinit>
 800997e:	4b21      	ldr	r3, [pc, #132]	; (8009a04 <__swbuf_r+0x98>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d12b      	bne.n	80099dc <__swbuf_r+0x70>
 8009984:	686c      	ldr	r4, [r5, #4]
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	071a      	lsls	r2, r3, #28
 800998e:	d52f      	bpl.n	80099f0 <__swbuf_r+0x84>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	b36b      	cbz	r3, 80099f0 <__swbuf_r+0x84>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	b2f6      	uxtb	r6, r6
 800999a:	1ac0      	subs	r0, r0, r3
 800999c:	6963      	ldr	r3, [r4, #20]
 800999e:	4637      	mov	r7, r6
 80099a0:	4283      	cmp	r3, r0
 80099a2:	dc04      	bgt.n	80099ae <__swbuf_r+0x42>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f92a 	bl	8009c00 <_fflush_r>
 80099ac:	bb30      	cbnz	r0, 80099fc <__swbuf_r+0x90>
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	3001      	adds	r0, #1
 80099b2:	3b01      	subs	r3, #1
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	6022      	str	r2, [r4, #0]
 80099bc:	701e      	strb	r6, [r3, #0]
 80099be:	6963      	ldr	r3, [r4, #20]
 80099c0:	4283      	cmp	r3, r0
 80099c2:	d004      	beq.n	80099ce <__swbuf_r+0x62>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	07db      	lsls	r3, r3, #31
 80099c8:	d506      	bpl.n	80099d8 <__swbuf_r+0x6c>
 80099ca:	2e0a      	cmp	r6, #10
 80099cc:	d104      	bne.n	80099d8 <__swbuf_r+0x6c>
 80099ce:	4621      	mov	r1, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f915 	bl	8009c00 <_fflush_r>
 80099d6:	b988      	cbnz	r0, 80099fc <__swbuf_r+0x90>
 80099d8:	4638      	mov	r0, r7
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <__swbuf_r+0x9c>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d101      	bne.n	80099e6 <__swbuf_r+0x7a>
 80099e2:	68ac      	ldr	r4, [r5, #8]
 80099e4:	e7cf      	b.n	8009986 <__swbuf_r+0x1a>
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <__swbuf_r+0xa0>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	bf08      	it	eq
 80099ec:	68ec      	ldreq	r4, [r5, #12]
 80099ee:	e7ca      	b.n	8009986 <__swbuf_r+0x1a>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f80c 	bl	8009a10 <__swsetup_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0cb      	beq.n	8009994 <__swbuf_r+0x28>
 80099fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009a00:	e7ea      	b.n	80099d8 <__swbuf_r+0x6c>
 8009a02:	bf00      	nop
 8009a04:	0800bfe4 	.word	0x0800bfe4
 8009a08:	0800c004 	.word	0x0800c004
 8009a0c:	0800bfc4 	.word	0x0800bfc4

08009a10 <__swsetup_r>:
 8009a10:	4b32      	ldr	r3, [pc, #200]	; (8009adc <__swsetup_r+0xcc>)
 8009a12:	b570      	push	{r4, r5, r6, lr}
 8009a14:	681d      	ldr	r5, [r3, #0]
 8009a16:	4606      	mov	r6, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	b125      	cbz	r5, 8009a26 <__swsetup_r+0x16>
 8009a1c:	69ab      	ldr	r3, [r5, #24]
 8009a1e:	b913      	cbnz	r3, 8009a26 <__swsetup_r+0x16>
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f981 	bl	8009d28 <__sinit>
 8009a26:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <__swsetup_r+0xd0>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	d10f      	bne.n	8009a4c <__swsetup_r+0x3c>
 8009a2c:	686c      	ldr	r4, [r5, #4]
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a34:	0719      	lsls	r1, r3, #28
 8009a36:	d42c      	bmi.n	8009a92 <__swsetup_r+0x82>
 8009a38:	06dd      	lsls	r5, r3, #27
 8009a3a:	d411      	bmi.n	8009a60 <__swsetup_r+0x50>
 8009a3c:	2309      	movs	r3, #9
 8009a3e:	6033      	str	r3, [r6, #0]
 8009a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	e03e      	b.n	8009aca <__swsetup_r+0xba>
 8009a4c:	4b25      	ldr	r3, [pc, #148]	; (8009ae4 <__swsetup_r+0xd4>)
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d101      	bne.n	8009a56 <__swsetup_r+0x46>
 8009a52:	68ac      	ldr	r4, [r5, #8]
 8009a54:	e7eb      	b.n	8009a2e <__swsetup_r+0x1e>
 8009a56:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <__swsetup_r+0xd8>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	bf08      	it	eq
 8009a5c:	68ec      	ldreq	r4, [r5, #12]
 8009a5e:	e7e6      	b.n	8009a2e <__swsetup_r+0x1e>
 8009a60:	0758      	lsls	r0, r3, #29
 8009a62:	d512      	bpl.n	8009a8a <__swsetup_r+0x7a>
 8009a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a66:	b141      	cbz	r1, 8009a7a <__swsetup_r+0x6a>
 8009a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d002      	beq.n	8009a76 <__swsetup_r+0x66>
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff fb2f 	bl	80090d4 <_free_r>
 8009a76:	2300      	movs	r3, #0
 8009a78:	6363      	str	r3, [r4, #52]	; 0x34
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	2300      	movs	r3, #0
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f043 0308 	orr.w	r3, r3, #8
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	b94b      	cbnz	r3, 8009aaa <__swsetup_r+0x9a>
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa0:	d003      	beq.n	8009aaa <__swsetup_r+0x9a>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 fa05 	bl	8009eb4 <__smakebuf_r>
 8009aaa:	89a0      	ldrh	r0, [r4, #12]
 8009aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab0:	f010 0301 	ands.w	r3, r0, #1
 8009ab4:	d00a      	beq.n	8009acc <__swsetup_r+0xbc>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	6963      	ldr	r3, [r4, #20]
 8009abc:	425b      	negs	r3, r3
 8009abe:	61a3      	str	r3, [r4, #24]
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	b943      	cbnz	r3, 8009ad6 <__swsetup_r+0xc6>
 8009ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ac8:	d1ba      	bne.n	8009a40 <__swsetup_r+0x30>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	0781      	lsls	r1, r0, #30
 8009ace:	bf58      	it	pl
 8009ad0:	6963      	ldrpl	r3, [r4, #20]
 8009ad2:	60a3      	str	r3, [r4, #8]
 8009ad4:	e7f4      	b.n	8009ac0 <__swsetup_r+0xb0>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	e7f7      	b.n	8009aca <__swsetup_r+0xba>
 8009ada:	bf00      	nop
 8009adc:	2000000c 	.word	0x2000000c
 8009ae0:	0800bfe4 	.word	0x0800bfe4
 8009ae4:	0800c004 	.word	0x0800c004
 8009ae8:	0800bfc4 	.word	0x0800bfc4

08009aec <abort>:
 8009aec:	2006      	movs	r0, #6
 8009aee:	b508      	push	{r3, lr}
 8009af0:	f000 fa50 	bl	8009f94 <raise>
 8009af4:	2001      	movs	r0, #1
 8009af6:	f7f8 fd85 	bl	8002604 <_exit>
	...

08009afc <__sflush_r>:
 8009afc:	898a      	ldrh	r2, [r1, #12]
 8009afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b00:	4605      	mov	r5, r0
 8009b02:	0710      	lsls	r0, r2, #28
 8009b04:	460c      	mov	r4, r1
 8009b06:	d457      	bmi.n	8009bb8 <__sflush_r+0xbc>
 8009b08:	684b      	ldr	r3, [r1, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc04      	bgt.n	8009b18 <__sflush_r+0x1c>
 8009b0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc01      	bgt.n	8009b18 <__sflush_r+0x1c>
 8009b14:	2000      	movs	r0, #0
 8009b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	d0fa      	beq.n	8009b14 <__sflush_r+0x18>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b24:	682f      	ldr	r7, [r5, #0]
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	d032      	beq.n	8009b90 <__sflush_r+0x94>
 8009b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	075a      	lsls	r2, r3, #29
 8009b30:	d505      	bpl.n	8009b3e <__sflush_r+0x42>
 8009b32:	6863      	ldr	r3, [r4, #4]
 8009b34:	1ac0      	subs	r0, r0, r3
 8009b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b38:	b10b      	cbz	r3, 8009b3e <__sflush_r+0x42>
 8009b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b3c:	1ac0      	subs	r0, r0, r3
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4602      	mov	r2, r0
 8009b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b44:	4628      	mov	r0, r5
 8009b46:	6a21      	ldr	r1, [r4, #32]
 8009b48:	47b0      	blx	r6
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	d106      	bne.n	8009b5e <__sflush_r+0x62>
 8009b50:	6829      	ldr	r1, [r5, #0]
 8009b52:	291d      	cmp	r1, #29
 8009b54:	d82c      	bhi.n	8009bb0 <__sflush_r+0xb4>
 8009b56:	4a29      	ldr	r2, [pc, #164]	; (8009bfc <__sflush_r+0x100>)
 8009b58:	40ca      	lsrs	r2, r1
 8009b5a:	07d6      	lsls	r6, r2, #31
 8009b5c:	d528      	bpl.n	8009bb0 <__sflush_r+0xb4>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	6062      	str	r2, [r4, #4]
 8009b62:	6922      	ldr	r2, [r4, #16]
 8009b64:	04d9      	lsls	r1, r3, #19
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	d504      	bpl.n	8009b74 <__sflush_r+0x78>
 8009b6a:	1c42      	adds	r2, r0, #1
 8009b6c:	d101      	bne.n	8009b72 <__sflush_r+0x76>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b903      	cbnz	r3, 8009b74 <__sflush_r+0x78>
 8009b72:	6560      	str	r0, [r4, #84]	; 0x54
 8009b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b76:	602f      	str	r7, [r5, #0]
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d0cb      	beq.n	8009b14 <__sflush_r+0x18>
 8009b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b80:	4299      	cmp	r1, r3
 8009b82:	d002      	beq.n	8009b8a <__sflush_r+0x8e>
 8009b84:	4628      	mov	r0, r5
 8009b86:	f7ff faa5 	bl	80090d4 <_free_r>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b8e:	e7c2      	b.n	8009b16 <__sflush_r+0x1a>
 8009b90:	6a21      	ldr	r1, [r4, #32]
 8009b92:	2301      	movs	r3, #1
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b0      	blx	r6
 8009b98:	1c41      	adds	r1, r0, #1
 8009b9a:	d1c7      	bne.n	8009b2c <__sflush_r+0x30>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c4      	beq.n	8009b2c <__sflush_r+0x30>
 8009ba2:	2b1d      	cmp	r3, #29
 8009ba4:	d001      	beq.n	8009baa <__sflush_r+0xae>
 8009ba6:	2b16      	cmp	r3, #22
 8009ba8:	d101      	bne.n	8009bae <__sflush_r+0xb2>
 8009baa:	602f      	str	r7, [r5, #0]
 8009bac:	e7b2      	b.n	8009b14 <__sflush_r+0x18>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	e7ae      	b.n	8009b16 <__sflush_r+0x1a>
 8009bb8:	690f      	ldr	r7, [r1, #16]
 8009bba:	2f00      	cmp	r7, #0
 8009bbc:	d0aa      	beq.n	8009b14 <__sflush_r+0x18>
 8009bbe:	0793      	lsls	r3, r2, #30
 8009bc0:	bf18      	it	ne
 8009bc2:	2300      	movne	r3, #0
 8009bc4:	680e      	ldr	r6, [r1, #0]
 8009bc6:	bf08      	it	eq
 8009bc8:	694b      	ldreq	r3, [r1, #20]
 8009bca:	1bf6      	subs	r6, r6, r7
 8009bcc:	600f      	str	r7, [r1, #0]
 8009bce:	608b      	str	r3, [r1, #8]
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	dd9f      	ble.n	8009b14 <__sflush_r+0x18>
 8009bd4:	4633      	mov	r3, r6
 8009bd6:	463a      	mov	r2, r7
 8009bd8:	4628      	mov	r0, r5
 8009bda:	6a21      	ldr	r1, [r4, #32]
 8009bdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009be0:	47e0      	blx	ip
 8009be2:	2800      	cmp	r0, #0
 8009be4:	dc06      	bgt.n	8009bf4 <__sflush_r+0xf8>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	e790      	b.n	8009b16 <__sflush_r+0x1a>
 8009bf4:	4407      	add	r7, r0
 8009bf6:	1a36      	subs	r6, r6, r0
 8009bf8:	e7ea      	b.n	8009bd0 <__sflush_r+0xd4>
 8009bfa:	bf00      	nop
 8009bfc:	20400001 	.word	0x20400001

08009c00 <_fflush_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	690b      	ldr	r3, [r1, #16]
 8009c04:	4605      	mov	r5, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	b913      	cbnz	r3, 8009c10 <_fflush_r+0x10>
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	b118      	cbz	r0, 8009c1a <_fflush_r+0x1a>
 8009c12:	6983      	ldr	r3, [r0, #24]
 8009c14:	b90b      	cbnz	r3, 8009c1a <_fflush_r+0x1a>
 8009c16:	f000 f887 	bl	8009d28 <__sinit>
 8009c1a:	4b14      	ldr	r3, [pc, #80]	; (8009c6c <_fflush_r+0x6c>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d11b      	bne.n	8009c58 <_fflush_r+0x58>
 8009c20:	686c      	ldr	r4, [r5, #4]
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0ef      	beq.n	8009c0a <_fflush_r+0xa>
 8009c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c2c:	07d0      	lsls	r0, r2, #31
 8009c2e:	d404      	bmi.n	8009c3a <_fflush_r+0x3a>
 8009c30:	0599      	lsls	r1, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_fflush_r+0x3a>
 8009c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c36:	f000 f915 	bl	8009e64 <__retarget_lock_acquire_recursive>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f7ff ff5d 	bl	8009afc <__sflush_r>
 8009c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c44:	4605      	mov	r5, r0
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d4e0      	bmi.n	8009c0c <_fflush_r+0xc>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	059b      	lsls	r3, r3, #22
 8009c4e:	d4dd      	bmi.n	8009c0c <_fflush_r+0xc>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f000 f908 	bl	8009e66 <__retarget_lock_release_recursive>
 8009c56:	e7d9      	b.n	8009c0c <_fflush_r+0xc>
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <_fflush_r+0x70>)
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d101      	bne.n	8009c62 <_fflush_r+0x62>
 8009c5e:	68ac      	ldr	r4, [r5, #8]
 8009c60:	e7df      	b.n	8009c22 <_fflush_r+0x22>
 8009c62:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <_fflush_r+0x74>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	bf08      	it	eq
 8009c68:	68ec      	ldreq	r4, [r5, #12]
 8009c6a:	e7da      	b.n	8009c22 <_fflush_r+0x22>
 8009c6c:	0800bfe4 	.word	0x0800bfe4
 8009c70:	0800c004 	.word	0x0800c004
 8009c74:	0800bfc4 	.word	0x0800bfc4

08009c78 <std>:
 8009c78:	2300      	movs	r3, #0
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c86:	6083      	str	r3, [r0, #8]
 8009c88:	8181      	strh	r1, [r0, #12]
 8009c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c8c:	81c2      	strh	r2, [r0, #14]
 8009c8e:	6183      	str	r3, [r0, #24]
 8009c90:	4619      	mov	r1, r3
 8009c92:	2208      	movs	r2, #8
 8009c94:	305c      	adds	r0, #92	; 0x5c
 8009c96:	f7fb fe0f 	bl	80058b8 <memset>
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <std+0x38>)
 8009c9c:	6224      	str	r4, [r4, #32]
 8009c9e:	6263      	str	r3, [r4, #36]	; 0x24
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <std+0x3c>)
 8009ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ca4:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <std+0x40>)
 8009ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <std+0x44>)
 8009caa:	6323      	str	r3, [r4, #48]	; 0x30
 8009cac:	bd10      	pop	{r4, pc}
 8009cae:	bf00      	nop
 8009cb0:	08009fcd 	.word	0x08009fcd
 8009cb4:	08009fef 	.word	0x08009fef
 8009cb8:	0800a027 	.word	0x0800a027
 8009cbc:	0800a04b 	.word	0x0800a04b

08009cc0 <_cleanup_r>:
 8009cc0:	4901      	ldr	r1, [pc, #4]	; (8009cc8 <_cleanup_r+0x8>)
 8009cc2:	f000 b8af 	b.w	8009e24 <_fwalk_reent>
 8009cc6:	bf00      	nop
 8009cc8:	08009c01 	.word	0x08009c01

08009ccc <__sfmoreglue>:
 8009ccc:	2268      	movs	r2, #104	; 0x68
 8009cce:	b570      	push	{r4, r5, r6, lr}
 8009cd0:	1e4d      	subs	r5, r1, #1
 8009cd2:	4355      	muls	r5, r2
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cda:	f7ff fa63 	bl	80091a4 <_malloc_r>
 8009cde:	4604      	mov	r4, r0
 8009ce0:	b140      	cbz	r0, 8009cf4 <__sfmoreglue+0x28>
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ce8:	300c      	adds	r0, #12
 8009cea:	60a0      	str	r0, [r4, #8]
 8009cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cf0:	f7fb fde2 	bl	80058b8 <memset>
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}

08009cf8 <__sfp_lock_acquire>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__sfp_lock_acquire+0x8>)
 8009cfa:	f000 b8b3 	b.w	8009e64 <__retarget_lock_acquire_recursive>
 8009cfe:	bf00      	nop
 8009d00:	20000775 	.word	0x20000775

08009d04 <__sfp_lock_release>:
 8009d04:	4801      	ldr	r0, [pc, #4]	; (8009d0c <__sfp_lock_release+0x8>)
 8009d06:	f000 b8ae 	b.w	8009e66 <__retarget_lock_release_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	20000775 	.word	0x20000775

08009d10 <__sinit_lock_acquire>:
 8009d10:	4801      	ldr	r0, [pc, #4]	; (8009d18 <__sinit_lock_acquire+0x8>)
 8009d12:	f000 b8a7 	b.w	8009e64 <__retarget_lock_acquire_recursive>
 8009d16:	bf00      	nop
 8009d18:	20000776 	.word	0x20000776

08009d1c <__sinit_lock_release>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	; (8009d24 <__sinit_lock_release+0x8>)
 8009d1e:	f000 b8a2 	b.w	8009e66 <__retarget_lock_release_recursive>
 8009d22:	bf00      	nop
 8009d24:	20000776 	.word	0x20000776

08009d28 <__sinit>:
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	f7ff fff0 	bl	8009d10 <__sinit_lock_acquire>
 8009d30:	69a3      	ldr	r3, [r4, #24]
 8009d32:	b11b      	cbz	r3, 8009d3c <__sinit+0x14>
 8009d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d38:	f7ff bff0 	b.w	8009d1c <__sinit_lock_release>
 8009d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d40:	6523      	str	r3, [r4, #80]	; 0x50
 8009d42:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <__sinit+0x68>)
 8009d44:	4a13      	ldr	r2, [pc, #76]	; (8009d94 <__sinit+0x6c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d4a:	42a3      	cmp	r3, r4
 8009d4c:	bf08      	it	eq
 8009d4e:	2301      	moveq	r3, #1
 8009d50:	4620      	mov	r0, r4
 8009d52:	bf08      	it	eq
 8009d54:	61a3      	streq	r3, [r4, #24]
 8009d56:	f000 f81f 	bl	8009d98 <__sfp>
 8009d5a:	6060      	str	r0, [r4, #4]
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 f81b 	bl	8009d98 <__sfp>
 8009d62:	60a0      	str	r0, [r4, #8]
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 f817 	bl	8009d98 <__sfp>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2104      	movs	r1, #4
 8009d6e:	60e0      	str	r0, [r4, #12]
 8009d70:	6860      	ldr	r0, [r4, #4]
 8009d72:	f7ff ff81 	bl	8009c78 <std>
 8009d76:	2201      	movs	r2, #1
 8009d78:	2109      	movs	r1, #9
 8009d7a:	68a0      	ldr	r0, [r4, #8]
 8009d7c:	f7ff ff7c 	bl	8009c78 <std>
 8009d80:	2202      	movs	r2, #2
 8009d82:	2112      	movs	r1, #18
 8009d84:	68e0      	ldr	r0, [r4, #12]
 8009d86:	f7ff ff77 	bl	8009c78 <std>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	61a3      	str	r3, [r4, #24]
 8009d8e:	e7d1      	b.n	8009d34 <__sinit+0xc>
 8009d90:	0800bb80 	.word	0x0800bb80
 8009d94:	08009cc1 	.word	0x08009cc1

08009d98 <__sfp>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	f7ff ffac 	bl	8009cf8 <__sfp_lock_acquire>
 8009da0:	4b1e      	ldr	r3, [pc, #120]	; (8009e1c <__sfp+0x84>)
 8009da2:	681e      	ldr	r6, [r3, #0]
 8009da4:	69b3      	ldr	r3, [r6, #24]
 8009da6:	b913      	cbnz	r3, 8009dae <__sfp+0x16>
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff ffbd 	bl	8009d28 <__sinit>
 8009dae:	3648      	adds	r6, #72	; 0x48
 8009db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	d503      	bpl.n	8009dc0 <__sfp+0x28>
 8009db8:	6833      	ldr	r3, [r6, #0]
 8009dba:	b30b      	cbz	r3, 8009e00 <__sfp+0x68>
 8009dbc:	6836      	ldr	r6, [r6, #0]
 8009dbe:	e7f7      	b.n	8009db0 <__sfp+0x18>
 8009dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dc4:	b9d5      	cbnz	r5, 8009dfc <__sfp+0x64>
 8009dc6:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <__sfp+0x88>)
 8009dc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dcc:	60e3      	str	r3, [r4, #12]
 8009dce:	6665      	str	r5, [r4, #100]	; 0x64
 8009dd0:	f000 f847 	bl	8009e62 <__retarget_lock_init_recursive>
 8009dd4:	f7ff ff96 	bl	8009d04 <__sfp_lock_release>
 8009dd8:	2208      	movs	r2, #8
 8009dda:	4629      	mov	r1, r5
 8009ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009de4:	6025      	str	r5, [r4, #0]
 8009de6:	61a5      	str	r5, [r4, #24]
 8009de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dec:	f7fb fd64 	bl	80058b8 <memset>
 8009df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009df8:	4620      	mov	r0, r4
 8009dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dfc:	3468      	adds	r4, #104	; 0x68
 8009dfe:	e7d9      	b.n	8009db4 <__sfp+0x1c>
 8009e00:	2104      	movs	r1, #4
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ff62 	bl	8009ccc <__sfmoreglue>
 8009e08:	4604      	mov	r4, r0
 8009e0a:	6030      	str	r0, [r6, #0]
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d1d5      	bne.n	8009dbc <__sfp+0x24>
 8009e10:	f7ff ff78 	bl	8009d04 <__sfp_lock_release>
 8009e14:	230c      	movs	r3, #12
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	e7ee      	b.n	8009df8 <__sfp+0x60>
 8009e1a:	bf00      	nop
 8009e1c:	0800bb80 	.word	0x0800bb80
 8009e20:	ffff0001 	.word	0xffff0001

08009e24 <_fwalk_reent>:
 8009e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e28:	4606      	mov	r6, r0
 8009e2a:	4688      	mov	r8, r1
 8009e2c:	2700      	movs	r7, #0
 8009e2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e36:	f1b9 0901 	subs.w	r9, r9, #1
 8009e3a:	d505      	bpl.n	8009e48 <_fwalk_reent+0x24>
 8009e3c:	6824      	ldr	r4, [r4, #0]
 8009e3e:	2c00      	cmp	r4, #0
 8009e40:	d1f7      	bne.n	8009e32 <_fwalk_reent+0xe>
 8009e42:	4638      	mov	r0, r7
 8009e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e48:	89ab      	ldrh	r3, [r5, #12]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d907      	bls.n	8009e5e <_fwalk_reent+0x3a>
 8009e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e52:	3301      	adds	r3, #1
 8009e54:	d003      	beq.n	8009e5e <_fwalk_reent+0x3a>
 8009e56:	4629      	mov	r1, r5
 8009e58:	4630      	mov	r0, r6
 8009e5a:	47c0      	blx	r8
 8009e5c:	4307      	orrs	r7, r0
 8009e5e:	3568      	adds	r5, #104	; 0x68
 8009e60:	e7e9      	b.n	8009e36 <_fwalk_reent+0x12>

08009e62 <__retarget_lock_init_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <__retarget_lock_acquire_recursive>:
 8009e64:	4770      	bx	lr

08009e66 <__retarget_lock_release_recursive>:
 8009e66:	4770      	bx	lr

08009e68 <__swhatbuf_r>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e70:	4614      	mov	r4, r2
 8009e72:	2900      	cmp	r1, #0
 8009e74:	461d      	mov	r5, r3
 8009e76:	b096      	sub	sp, #88	; 0x58
 8009e78:	da08      	bge.n	8009e8c <__swhatbuf_r+0x24>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e80:	602a      	str	r2, [r5, #0]
 8009e82:	061a      	lsls	r2, r3, #24
 8009e84:	d410      	bmi.n	8009ea8 <__swhatbuf_r+0x40>
 8009e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8a:	e00e      	b.n	8009eaa <__swhatbuf_r+0x42>
 8009e8c:	466a      	mov	r2, sp
 8009e8e:	f000 f903 	bl	800a098 <_fstat_r>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	dbf1      	blt.n	8009e7a <__swhatbuf_r+0x12>
 8009e96:	9a01      	ldr	r2, [sp, #4]
 8009e98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ea0:	425a      	negs	r2, r3
 8009ea2:	415a      	adcs	r2, r3
 8009ea4:	602a      	str	r2, [r5, #0]
 8009ea6:	e7ee      	b.n	8009e86 <__swhatbuf_r+0x1e>
 8009ea8:	2340      	movs	r3, #64	; 0x40
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	b016      	add	sp, #88	; 0x58
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009eb4 <__smakebuf_r>:
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eb8:	079d      	lsls	r5, r3, #30
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	d507      	bpl.n	8009ed0 <__smakebuf_r+0x1c>
 8009ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	6163      	str	r3, [r4, #20]
 8009ecc:	b002      	add	sp, #8
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	466a      	mov	r2, sp
 8009ed2:	ab01      	add	r3, sp, #4
 8009ed4:	f7ff ffc8 	bl	8009e68 <__swhatbuf_r>
 8009ed8:	9900      	ldr	r1, [sp, #0]
 8009eda:	4605      	mov	r5, r0
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff f961 	bl	80091a4 <_malloc_r>
 8009ee2:	b948      	cbnz	r0, 8009ef8 <__smakebuf_r+0x44>
 8009ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee8:	059a      	lsls	r2, r3, #22
 8009eea:	d4ef      	bmi.n	8009ecc <__smakebuf_r+0x18>
 8009eec:	f023 0303 	bic.w	r3, r3, #3
 8009ef0:	f043 0302 	orr.w	r3, r3, #2
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	e7e3      	b.n	8009ec0 <__smakebuf_r+0xc>
 8009ef8:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <__smakebuf_r+0x7c>)
 8009efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	6020      	str	r0, [r4, #0]
 8009f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	9b00      	ldr	r3, [sp, #0]
 8009f08:	6120      	str	r0, [r4, #16]
 8009f0a:	6163      	str	r3, [r4, #20]
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	b15b      	cbz	r3, 8009f28 <__smakebuf_r+0x74>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f16:	f000 f8d1 	bl	800a0bc <_isatty_r>
 8009f1a:	b128      	cbz	r0, 8009f28 <__smakebuf_r+0x74>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	89a0      	ldrh	r0, [r4, #12]
 8009f2a:	4305      	orrs	r5, r0
 8009f2c:	81a5      	strh	r5, [r4, #12]
 8009f2e:	e7cd      	b.n	8009ecc <__smakebuf_r+0x18>
 8009f30:	08009cc1 	.word	0x08009cc1

08009f34 <_malloc_usable_size_r>:
 8009f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f38:	1f18      	subs	r0, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	bfbc      	itt	lt
 8009f3e:	580b      	ldrlt	r3, [r1, r0]
 8009f40:	18c0      	addlt	r0, r0, r3
 8009f42:	4770      	bx	lr

08009f44 <_raise_r>:
 8009f44:	291f      	cmp	r1, #31
 8009f46:	b538      	push	{r3, r4, r5, lr}
 8009f48:	4604      	mov	r4, r0
 8009f4a:	460d      	mov	r5, r1
 8009f4c:	d904      	bls.n	8009f58 <_raise_r+0x14>
 8009f4e:	2316      	movs	r3, #22
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	f04f 30ff 	mov.w	r0, #4294967295
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f5a:	b112      	cbz	r2, 8009f62 <_raise_r+0x1e>
 8009f5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f60:	b94b      	cbnz	r3, 8009f76 <_raise_r+0x32>
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 f830 	bl	8009fc8 <_getpid_r>
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f72:	f000 b817 	b.w	8009fa4 <_kill_r>
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d00a      	beq.n	8009f90 <_raise_r+0x4c>
 8009f7a:	1c59      	adds	r1, r3, #1
 8009f7c:	d103      	bne.n	8009f86 <_raise_r+0x42>
 8009f7e:	2316      	movs	r3, #22
 8009f80:	6003      	str	r3, [r0, #0]
 8009f82:	2001      	movs	r0, #1
 8009f84:	e7e7      	b.n	8009f56 <_raise_r+0x12>
 8009f86:	2400      	movs	r4, #0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f8e:	4798      	blx	r3
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7e0      	b.n	8009f56 <_raise_r+0x12>

08009f94 <raise>:
 8009f94:	4b02      	ldr	r3, [pc, #8]	; (8009fa0 <raise+0xc>)
 8009f96:	4601      	mov	r1, r0
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	f7ff bfd3 	b.w	8009f44 <_raise_r>
 8009f9e:	bf00      	nop
 8009fa0:	2000000c 	.word	0x2000000c

08009fa4 <_kill_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	4d06      	ldr	r5, [pc, #24]	; (8009fc4 <_kill_r+0x20>)
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	f7f8 fb17 	bl	80025e4 <_kill>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d102      	bne.n	8009fc0 <_kill_r+0x1c>
 8009fba:	682b      	ldr	r3, [r5, #0]
 8009fbc:	b103      	cbz	r3, 8009fc0 <_kill_r+0x1c>
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000770 	.word	0x20000770

08009fc8 <_getpid_r>:
 8009fc8:	f7f8 bb05 	b.w	80025d6 <_getpid>

08009fcc <__sread>:
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	460c      	mov	r4, r1
 8009fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd4:	f000 f894 	bl	800a100 <_read_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	bfab      	itete	ge
 8009fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fde:	89a3      	ldrhlt	r3, [r4, #12]
 8009fe0:	181b      	addge	r3, r3, r0
 8009fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fe6:	bfac      	ite	ge
 8009fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fea:	81a3      	strhlt	r3, [r4, #12]
 8009fec:	bd10      	pop	{r4, pc}

08009fee <__swrite>:
 8009fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	898b      	ldrh	r3, [r1, #12]
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	05db      	lsls	r3, r3, #23
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	d505      	bpl.n	800a00c <__swrite+0x1e>
 800a000:	2302      	movs	r3, #2
 800a002:	2200      	movs	r2, #0
 800a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a008:	f000 f868 	bl	800a0dc <_lseek_r>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	4632      	mov	r2, r6
 800a010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	4628      	mov	r0, r5
 800a018:	463b      	mov	r3, r7
 800a01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a022:	f000 b817 	b.w	800a054 <_write_r>

0800a026 <__sseek>:
 800a026:	b510      	push	{r4, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02e:	f000 f855 	bl	800a0dc <_lseek_r>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	bf15      	itete	ne
 800a038:	6560      	strne	r0, [r4, #84]	; 0x54
 800a03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a042:	81a3      	strheq	r3, [r4, #12]
 800a044:	bf18      	it	ne
 800a046:	81a3      	strhne	r3, [r4, #12]
 800a048:	bd10      	pop	{r4, pc}

0800a04a <__sclose>:
 800a04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04e:	f000 b813 	b.w	800a078 <_close_r>
	...

0800a054 <_write_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	2200      	movs	r2, #0
 800a05e:	4d05      	ldr	r5, [pc, #20]	; (800a074 <_write_r+0x20>)
 800a060:	602a      	str	r2, [r5, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	f7f8 faf5 	bl	8002652 <_write>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_write_r+0x1e>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_write_r+0x1e>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20000770 	.word	0x20000770

0800a078 <_close_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	2300      	movs	r3, #0
 800a07c:	4d05      	ldr	r5, [pc, #20]	; (800a094 <_close_r+0x1c>)
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7f8 fb01 	bl	800268a <_close>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_close_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_close_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20000770 	.word	0x20000770

0800a098 <_fstat_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	2300      	movs	r3, #0
 800a09c:	4d06      	ldr	r5, [pc, #24]	; (800a0b8 <_fstat_r+0x20>)
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	f7f8 fafb 	bl	80026a0 <_fstat>
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	d102      	bne.n	800a0b4 <_fstat_r+0x1c>
 800a0ae:	682b      	ldr	r3, [r5, #0]
 800a0b0:	b103      	cbz	r3, 800a0b4 <_fstat_r+0x1c>
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	bd38      	pop	{r3, r4, r5, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000770 	.word	0x20000770

0800a0bc <_isatty_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4d05      	ldr	r5, [pc, #20]	; (800a0d8 <_isatty_r+0x1c>)
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	602b      	str	r3, [r5, #0]
 800a0c8:	f7f8 faf9 	bl	80026be <_isatty>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_isatty_r+0x1a>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_isatty_r+0x1a>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	20000770 	.word	0x20000770

0800a0dc <_lseek_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4d05      	ldr	r5, [pc, #20]	; (800a0fc <_lseek_r+0x20>)
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7f8 faf1 	bl	80026d2 <_lseek>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_lseek_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_lseek_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20000770 	.word	0x20000770

0800a100 <_read_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4604      	mov	r4, r0
 800a104:	4608      	mov	r0, r1
 800a106:	4611      	mov	r1, r2
 800a108:	2200      	movs	r2, #0
 800a10a:	4d05      	ldr	r5, [pc, #20]	; (800a120 <_read_r+0x20>)
 800a10c:	602a      	str	r2, [r5, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	f7f8 fa82 	bl	8002618 <_read>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_read_r+0x1e>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_read_r+0x1e>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20000770 	.word	0x20000770

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
